// Documentation: https://github.com/coreos/coreos-ci/blob/master/README-upstream-ci.md

// Build coreos-assembler image and create
// an imageStream for it
def imageName = buildImage()

pod(image: imageName + ":latest", kvm: true, memory: "10Gi") {
    checkout scm

    shwrap("rpm -qa | sort > rpmdb.txt")
    archiveArtifacts artifacts: 'rpmdb.txt'

    // Run stage Build FCOS (init, fetch and build)
    fcosBuild(skipKola: 1, cosaDir: "/srv", noForce: true)

    // Run stage Kola QEMU (basic-qemu-scenarios, upgrade and self tests)
    fcosKola(basicScenarios: true, cosaDir: "/srv", addExtTests: ["${env.WORKSPACE}/ci/run-kola-self-tests"])

    stage("Build Metal") {
        cosaParallelCmds(cosaDir: "/srv", commands: ["metal", "metal4k"])
    }

    stage("Build Live Images") {
        cosa_cmd("buildextend-live --fast")
    }

    stage("Test Live Images") {
        try {
            parallel metal: {
                shwrap("cd /srv && env TMPDIR=\$(pwd)/tmp/ kola testiso -S --output-dir tmp/kola-testiso-metal")
            }, metal4k: {
                shwrap("cd /srv && env TMPDIR=\$(pwd)/tmp/ kola testiso -S --output-dir tmp/kola-testiso-metal4k --no-pxe --qemu-native-4k")
            }
        } finally {
            shwrap("cd /srv && tar -cf - tmp/kola-testiso-metal/ | xz -c9 > ${env.WORKSPACE}/kola-testiso-metal.tar.xz")
            shwrap("cd /srv && tar -cf - tmp/kola-testiso-metal4k/ | xz -c9 > ${env.WORKSPACE}/kola-testiso-metal4k.tar.xz")
            archiveArtifacts allowEmptyArchive: true, artifacts: 'kola-testiso*.tar.xz'
        }
    }

    stage("Build Cloud Images") {
        def clouds = ["Aliyun", "AWS", "Azure", "DigitalOcean", "Exoscale", "GCP", "IBMCloud", "OpenStack", "VMware", "Vultr"]
        parallel clouds.inject([:]) { d, i -> d[i] = {
            cosa_cmd("buildextend-${i.toLowerCase()}")
        }; d }

        // quick schema validation
        cosa_cmd("meta --get name")
    }

    stage("Compress") {
            cosa_cmd("compress --fast")
    }

    stage("Upload Dry Run") {
        cosa_cmd("buildupload --dry-run s3 --acl=public-read my-nonexistent-bucket/my/prefix")
    }

    // Random other tests that aren't about building. XXX: These should be part of `make
    // check` or something and use dummy cosa builds.
    stage("CLI Tests") {
        shwrap("""
            cd /srv
            sudo -u builder ${env.WORKSPACE}/tests/test_pruning.sh
        """)
    }
}

def cosa_cmd(args) {
    shwrap("cd /srv && sudo -u builder cosa ${args}")
}
