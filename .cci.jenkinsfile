// Documentation: https://github.com/coreos/coreos-ci/blob/main/README-upstream-ci.md

properties([
    // abort previous runs when a PR is updated to save resources
    disableConcurrentBuilds(abortPrevious: true)
])

// Build coreos-assembler image and create
// an imageStream for it
def cpuCount = 6
def cpuCount_s = cpuCount.toString()
def memory = (cpuCount * 1536) as Integer
def imageName = buildImage(env: [ENABLE_GO_RACE_DETECTOR: "1", GOMAXPROCS: cpuCount_s], cpu: cpuCount_s)

// We are seeing an issue where the first time we try to create a pod
// from a just created image it fails. Here we bake in an initial pod
// that we allow to fail to work around the problem while we investigate.
try {
    pod(image: imageName + ":latest", kvm: true, cpu: "${cpuCount}", memory: "${memory}Mi") {
        shwrap("Initial pod creation worked!")
    }
} catch(e) {
    echo "Initial pod creation failed. Continuing."
}

pod(image: imageName + ":latest", kvm: true, cpu: "${cpuCount}", memory: "${memory}Mi") {
    checkout scm

    stage("Unit tests") {
        shwrap("make check")
        shwrap("make unittest")
    }

    shwrap("rpm -qa | sort > rpmdb.txt")
    archiveArtifacts artifacts: 'rpmdb.txt'

    // Run stage Build FCOS (init, fetch and build)
    cosaBuild(skipKola: 1, cosaDir: "/srv", noForce: true)

    // Run stage Kola QEMU (basic-qemu-scenarios, upgrade and self tests)
    kola(cosaDir: "/srv", addExtTests: ["${env.WORKSPACE}/ci/run-kola-self-tests"])

    stage("Build Artifacts") {
        def artifacts = ["aliyun", "applehv", "aws", "azure", "azurestack",
                         "digitalocean", "exoscale", "gcp", "hetzner", "hyperv",
                         "ibmcloud", "kubevirt", "live", "metal", "metal4k",
                         "nutanix", "openstack", "vultr"]
        utils.cosaCmd(cosaDir: "/srv", args: "osbuild ${artifacts.join(' ')}")
        cosaParallelCmds(cosaDir: "/srv", commands: ["vmware", "virtualbox"])
        // quick schema validation
        utils.cosaCmd(cosaDir: "/srv", args: "meta --get name")
    }

    kolaTestIso(cosaDir: "/srv")

    stage("Compress") {
        // Test compression but only a few of the artifacts. This should test xz, zip, gzip
        utils.cosaCmd(cosaDir: "/srv", args: "compress --fast --artifact=qemu --artifact=applehv --artifact=hyperv")
    }

    stage("Upload Dry Run") {
        utils.cosaCmd(cosaDir: "/srv", args: "buildupload --dry-run s3 --acl=public-read my-nonexistent-bucket/my/prefix")
    }

    // Random other tests that aren't about building. XXX: These should be part of `make
    // check` or something and use dummy cosa builds.
    stage("CLI Tests") {
        shwrap("""
            cd /srv
            ${env.WORKSPACE}/tests/test_pruning.sh
        """)
    }
}
