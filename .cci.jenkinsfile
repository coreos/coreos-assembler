// Documentation: https://github.com/coreos/coreos-ci/blob/main/README-upstream-ci.md

// Build coreos-assembler image and create
// an imageStream for it
def cpuCount = "8".toString()
def imageName = buildImage(env: [ENABLE_GO_RACE_DETECTOR: "1", GOMAXPROCS: cpuCount], cpu: cpuCount)

pod(image: imageName + ":latest", kvm: true, cpu: cpuCount, memory: "10Gi") {
    checkout scm

    stage("Unit tests") {
        shwrap("make check")
        shwrap("make unittest")
    }

    shwrap("rpm -qa | sort > rpmdb.txt")
    archiveArtifacts artifacts: 'rpmdb.txt'

    // Run stage Build FCOS (init, fetch and build)
    fcosBuild(skipKola: 1, cosaDir: "/srv", noForce: true)

    // Run stage Kola QEMU (basic-qemu-scenarios, upgrade and self tests)
    fcosKola(cosaDir: "/srv", addExtTests: ["${env.WORKSPACE}/ci/run-kola-self-tests"])

    stage("Build Metal") {
        cosaParallelCmds(cosaDir: "/srv", commands: ["metal", "metal4k"])
    }

    stage("Build Live Images") {
        // Explicitly test re-importing the ostree repo
        shwrap("cd /srv && rm tmp/repo -rf")
        utils.cosaCmd(cosaDir: "/srv", args: "buildextend-live --fast")
    }

    fcosKolaTestIso(cosaDir: "/srv", extraArgs4k: "--no-pxe")

    stage("Build Cloud Images") {
        cosaParallelCmds(cosaDir: "/srv", commands: ["Aliyun", "AWS", "Azure", "DigitalOcean", "Exoscale", "GCP",
                                                     "IBMCloud", "KubeVirt", "OpenStack", "VMware", "Vultr"])

        // quick schema validation
        utils.cosaCmd(cosaDir: "/srv", args: "meta --get name")
    }

    stage("Compress") {
        utils.cosaCmd(cosaDir: "/srv", args: "compress --fast")
    }

    stage("Upload Dry Run") {
        utils.cosaCmd(cosaDir: "/srv", args: "buildupload --dry-run s3 --acl=public-read my-nonexistent-bucket/my/prefix")
    }

    // Random other tests that aren't about building. XXX: These should be part of `make
    // check` or something and use dummy cosa builds.
    stage("CLI Tests") {
        shwrap("""
            cd /srv
            ${env.WORKSPACE}/tests/test_pruning.sh
        """)
    }
}
