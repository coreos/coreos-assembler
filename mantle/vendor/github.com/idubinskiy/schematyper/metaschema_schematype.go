package main

// generated by "schematyper --root-type=metaSchema --prefix=meta metaschema.json" -- DO NOT EDIT

type metaDependency interface{}

type metaPositiveInteger int

type metaPositiveIntegerDefault0 interface{}

type metaPositiveIntegerDefault0Embedded1 interface{}

// Core schema meta-schema
type metaSchema struct {
	AdditionalItems      interface{}                 `json:"additionalItems,omitempty"`
	AdditionalProperties interface{}                 `json:"additionalProperties,omitempty"`
	AllOf                metaSchemaArray             `json:"allOf,omitempty"`
	AnyOf                metaSchemaArray             `json:"anyOf,omitempty"`
	Default              interface{}                 `json:"default,omitempty"`
	Definitions          map[string]metaSchema       `json:"definitions,omitempty"`
	Dependencies         map[string]metaDependency   `json:"dependencies,omitempty"`
	Description          string                      `json:"description,omitempty"`
	Enum                 []interface{}               `json:"enum,omitempty"`
	ExclusiveMaximum     bool                        `json:"exclusiveMaximum,omitempty"`
	ExclusiveMinimum     bool                        `json:"exclusiveMinimum,omitempty"`
	Format               string                      `json:"format,omitempty"`
	ID                   string                      `json:"id,omitempty"`
	Items                interface{}                 `json:"items,omitempty"`
	MaxItems             metaPositiveInteger         `json:"maxItems,omitempty"`
	MaxLength            metaPositiveInteger         `json:"maxLength,omitempty"`
	MaxProperties        metaPositiveInteger         `json:"maxProperties,omitempty"`
	Maximum              float64                     `json:"maximum,omitempty"`
	MinItems             metaPositiveIntegerDefault0 `json:"minItems,omitempty"`
	MinLength            metaPositiveIntegerDefault0 `json:"minLength,omitempty"`
	MinProperties        metaPositiveIntegerDefault0 `json:"minProperties,omitempty"`
	Minimum              float64                     `json:"minimum,omitempty"`
	MultipleOf           float64                     `json:"multipleOf,omitempty"`
	Not                  *metaSchema                 `json:"not,omitempty"`
	OneOf                metaSchemaArray             `json:"oneOf,omitempty"`
	Pattern              string                      `json:"pattern,omitempty"`
	PatternProperties    map[string]metaSchema       `json:"patternProperties,omitempty"`
	Properties           map[string]metaSchema       `json:"properties,omitempty"`
	Ref                  string                      `json:"$ref,omitempty"`
	Required             metaStringArray             `json:"required,omitempty"`
	Schema               string                      `json:"$schema,omitempty"`
	Title                string                      `json:"title,omitempty"`
	Type                 interface{}                 `json:"type,omitempty"`
	UniqueItems          bool                        `json:"uniqueItems,omitempty"`
}

type metaSchemaArray []metaSchema

type metaSimpleTypes interface{}

type metaStringArray []metaStringArrayItem

type metaStringArrayItem string
