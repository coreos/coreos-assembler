# See the description of testLiveInstalliscsi() in testiso.go for an explanation
# of what this Butane config is doing.
variant: fcos
version: 1.5.0
storage:
  filesystems:
    - path: /var
      device: /dev/disk/by-id/virtio-var
      format: ext4
      wipe_filesystem: true
      label: var
      with_mount_unit: true
  files:
    - path: /etc/containers/systemd/targetd.container
      contents:
        inline: |
            [Unit]
            Description=Targetd container
            Documentation=https://github.com/jbtrystram/targetcli-containers
            After=local-fs.target network-online.target nss-lookup.target dev-disk-by\x2did-virtio\x2dtarget.device
            Wants=network-online.target
            OnFailure=emergency.target
            OnFailureJobMode=isolate
            [Container]
            Image=quay.io/coreos-assembler/targetcli:latest
            ContainerName=targetd
            Network=host
            Volume=/dev/disk/by-id/virtio-target:/dev/disk/by-id/virtio-target
            Volume=/lib/modules:/lib/modules
            Volume=/sys/kernel/config:/sys/kernel/config
            PodmanArgs=--privileged
            # FIXME this requires podman 4.9.0
            #HealthCmd=/usr/bin/targetcli pwd
            #HealthStartPeriod=15s
            #Notify=healthy
            [Install]
            # Start by default on boot
            WantedBy=multi-user.target
    - path: /usr/local/bin/targetcli_script
      mode: 0755
      contents:
          inline: |
            #!/bin/bash
            set -xeuo pipefail
            podman exec targetd bash -exc "
            # wait until targetcli is ready to accept commands
            # FIXME: use RestartMode=direct instead in the systemd unit but we need systemd v254
            while ! targetcli ls; do sleep 1; done
            targetcli /backstores/block create name=coreos dev=/dev/disk/by-id/virtio-target
            targetcli iscsi/ create iqn.2024-05.com.coreos:0
            targetcli iscsi/ create iqn.2024-05.com.coreos:1
            targetcli iscsi/iqn.2024-05.com.coreos:0/tpg1/luns create /backstores/block/coreos
            targetcli iscsi/iqn.2024-05.com.coreos:1/tpg1/luns create /backstores/block/coreos
            targetcli iscsi/iqn.2024-05.com.coreos:0/tpg1/ set attribute authentication=0 demo_mode_write_protect=0 generate_node_acls=1 cache_dynamic_acls=1
            targetcli iscsi/iqn.2024-05.com.coreos:1/tpg1/ set attribute authentication=0 demo_mode_write_protect=0 generate_node_acls=1 cache_dynamic_acls=1
            "
            # Will return 0 if the discovery yield a valid portal
            iscsiadm --mode discovery --type sendtargets --portal 127.0.0.1 | \
              grep iqn.2024-05.com.coreos
    - path: /srv/boot.ipxe
      mode: 0644
      contents:
        inline: |
            #!ipxe
            # set some random uuid as the initiator iqn. we can use
            # a random value here because we don't have ACL's enabled,
            # but we do need to provide it because otherwise this will
            # fail pointing to https://ipxe.org/1c0d6502
            set initiator-iqn iqn.68cc69b9-1b54-4ff1-9d61-eedb570da8fd
            sanboot iscsi:10.0.2.15::::iqn.2024-05.com.coreos:0 \
                    iscsi:10.0.2.15::::iqn.2024-05.com.coreos:1
    - path: /usr/local/bin/install-coreos-iscsi
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          set -euxo pipefail
          # Mount the iscsi target
          iscsiadm --mode discovery --type sendtargets --portal 127.0.0.1 --login
          # Give a bit of time to udev to create the persistent names paths
          sleep 2
          # Install coreos
          coreos-installer install \
            /dev/disk/by-path/ip-127.0.0.1\:3260-iscsi-iqn.2024-05.com.coreos\:0-lun-0 \
            COREOS_INSTALLER_KARGS \
            --console ttyS0,115200n8 \
            -i /var/nested-ign.json
          # Unmount the disk
          iscsiadm --mode node --logoutall=all
    - path: /etc/containers/systemd/coreos-iscsi-vm.container
      contents:
        inline: |
          [Unit]
          Description=Boot VM over iSCSI
          After=network-online.target nss-lookup.target install-coreos-to-iscsi-target.service
          Wants=network-online.target install-coreos-to-iscsi-target.service
          Requires=install-coreos-to-iscsi-target.service
          OnFailure=emergency.target
          OnFailureJobMode=isolate
          [Container]
          ContainerName=iscsiboot
          # Use the read-only virtiofs shared rootfs from COSA. This
          # saves us pulling 4+ GiB COSA container from quay.
          # makes it so we don't have to pull down COSA from quay
          Rootfs=/var/cosaroot
          Volume=/srv/boot.ipxe:/srv/boot.ipxe
          AddDevice=/dev/virtio-ports/testisocompletion:/dev/virtio-ports/testisocompletion
          # Create a few writable directories from empty volumes. We
          # must use named volumes for now so we can pass :nocopy.
          # https://github.com/containers/podman/issues/25176
          Volume=root:/root/:nocopy
          Volume=vartmp:/var/tmp/:nocopy
          WorkingDir=/root
          PodmanArgs=--privileged
          Network=host
          LogDriver=passthrough
          Exec=kola qemuexec --netboot /srv/boot.ipxe --qemu-swtpm=false --usernet-addr 10.0.3.0/24 -- -device virtio-serial -chardev file,id=iscsi-completion-virtio,path=/dev/virtio-ports/testisocompletion,append=on -device virtserialport,chardev=iscsi-completion-virtio,name=testisocompletion
          [Install]
          # Start by default on boot
          WantedBy=multi-user.target
          [Service]
          # fix permissions on the serial device before passing it as a volume
          ExecStartPre=chmod 777 /dev/virtio-ports/testisocompletion
          # Pipe the logs to a virtio port so kola saves them
          StandardError=inherit
          StandardOutput=file:/dev/virtio-ports/nestedvmlogs
    - path: /var/nested-ign.json
      contents:
        inline: |
          {
            "ignition": {
              "version": "3.1.0"
            },
            "systemd": {
              "units": [
                {
                  "contents": "[Unit]\nDescription=iSCSI Boot Signal Completion\nAfter=multi-user.target\nOnFailure=emergency.target\nOnFailureJobMode=isolate\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/bin/sh -c '/usr/bin/echo \"iscsi-boot-ok\" \u003e/dev/virtio-ports/testisocompletion \u0026\u0026 systemctl poweroff'\n[Install]\nRequiredBy=multi-user.target\n",
                  "enabled": true,
                  "name": "successful-boot-signal.service"
                }
              ]
            }
          }
systemd:
    units:
    - name: setup-targetcli.service
      enabled: true
      contents: |
        [Unit]
        Description=Setup targetcli
        Requires=targetd.service
        After=targetd.service
        ConditionFirstBoot=true
        OnFailure=emergency.target
        OnFailureJobMode=isolate
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/targetcli_script
        Restart=on-failure
        [Install]
        WantedBy=multi-user.target
    - name: install-coreos-to-iscsi-target.service
      enabled: true
      contents: |
        [Unit]
        Description=Mount an iscsi target and install coreOS into it
        Requires=setup-targetcli.service
        After=setup-targetcli.service
        OnFailure=emergency.target
        OnFailureJobMode=isolate
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/install-coreos-iscsi
        [Install]
        WantedBy=multi-user.target
