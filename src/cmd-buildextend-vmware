#!/usr/bin/env python3
# NOTE: PYTHONUNBUFFERED is set in cmdlib.sh for unbuffered output
#
# An operation that mutates a build by generating an ova

import os
import sys
import json
import shutil
import argparse
import tarfile

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from cmdlib import run_verbose, load_json, write_json, sha256sum_file, Builds

parser = argparse.ArgumentParser()
parser.add_argument("--build", help="Build ID")
args = parser.parse_args()

# Identify the builds and target the latest build if none provided
builds = Builds()
if not args.build:
    args.build = builds.get_latest()
print(f"Targeting build: {args.build}")

builddir = builds.get_build_dir(args.build)
buildmeta_path = os.path.join(builddir, 'meta.json')
buildmeta = load_json(buildmeta_path)
base_name = buildmeta['name']
vmware_prefix = f'{base_name}-{args.build}-vmware'
ova_name = f'{vmware_prefix}.ova'

try:
    img_qemu = os.path.join(builddir, buildmeta['images']['qemu']['path'])
except KeyError as e:
    print("meta.json does not contain key .images.qemu.path")
    sys.exit(1)

tmpdir = 'tmp/buildpost-vmware'
if os.path.isdir(tmpdir):
    shutil.rmtree(tmpdir)
os.mkdir(tmpdir)


def generate_ovf_parameters(qemu, vmdk, cpu=2,
                            memory=4096, system_type="vmx-13",
                            os_type="rhel7_64Guest", scsi="VirtualSCSI",
                            network="VmxNet3"):
    """
    Returns a dictionary with the parameters needed to create an OVF file based
    on the qemu, vmdk, and info from the build metadata
    """
    qemu_info = run_verbose(["qemu-img", "info", qemu,
                             "--output", "json"], capture_output=True)
    disk_size = json.loads(qemu_info.stdout)['virtual-size']
    vmdk_size = str(os.stat(vmdk).st_blocks*512)

    image = buildmeta['summary']
    product = buildmeta['summary']
    vendor = buildmeta['name']
    version = buildmeta['ostree-version']

    params = {
        'ovf_cpu_count':                    cpu,
        'ovf_memory_mb':                    memory,
        'vsphere_image_name':               image,
        'vsphere_product_name':             product,
        'vsphere_product_vendor_name':      vendor,
        'vsphere_product_version':          version,
        'vsphere_virtual_system_type':      system_type,
        'vsphere_os_type':                  os_type,
        'vsphere_scsi_controller_type':     scsi,
        'vsphere_network_controller_type':  network,
        'virtual_disk_size':                disk_size,
        'vmdk_size':                        vmdk_size
    }

    return params


def generate_ova_from_template():
    """Assembles an OVA using a qemu and OVF template."""
    vmware_qemu = os.path.join(tmpdir, (vmware_prefix + '.qcow2'))
    vmdk_image = os.path.join(tmpdir, "disk.vmdk")
    ovf_file = os.path.join(tmpdir, "desc.ovf")
    ova_file = os.path.join(builddir, ova_name)
    template_file = '/usr/lib/coreos-assembler/vmware-template.xml'

    # create vmware_qemu with vmware platformid
    run_verbose(['/usr/lib/coreos-assembler/gf-platformid',
                 img_qemu, vmware_qemu, 'vmware'])

    # convert vmware_qemu to vmdk
    run_verbose(["qemu-img", "convert", "-f", "qcow2", "-O", "vmdk", "-o",
                 "adapter_type=lsilogic,subformat=streamOptimized,compat6",
                 vmware_qemu, vmdk_image])

    # gather parameters for the ovf fiile
    ovf_params = generate_ovf_parameters(vmware_qemu, vmdk_image)

    # apply the parameters to the template and write out ovf file (xml)
    with open(template_file) as f:
        template = f.read()
    vmdk_xml = template.format(**ovf_params)

    with open(ovf_file, "w") as ovf:
        ovf.write(vmdk_xml)

    # add the ovf and vmdk to an ova (a tar archive--order of file matters!)
    with tarfile.open(ova_file, 'w') as tar:
        tar.add(ovf_file, arcname="desc.ovf")
        tar.add(vmdk_image, arcname="disk.vmdk")

    # update the build meta.json with info about the ova
    checksum = sha256sum_file(ova_file)
    size = os.path.getsize(ova_file)
    buildmeta_images = buildmeta['images']
    buildmeta_images['vmware'] = {
        'path': ova_name,
        'sha256': checksum,
        'size': size
    }

    write_json(buildmeta_path, buildmeta)
    print(f"Updated: {buildmeta_path}")

    os.unlink(ovf_file)
    os.unlink(vmdk_image)
    os.unlink(vmware_qemu)


generate_ova_from_template()
