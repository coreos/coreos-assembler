#!/usr/bin/python3 -u

import argparse
import sys

from cosalib.utils import run_cmd
from os import environ

def build_container_image(labels, gitURL, gitRef, repo, tag):
    '''
    Build the image  using podman remote and push to the registry
    @param repo str registry repository
    @param tag  str image tag
    @param time str expiration time for Quay images
    '''
    cmd = f"podman --remote build {gitURL}#{gitRef} --tag {repo}:{tag}"
    for label in labels:
        cmd += f" --label={label}"
    run_cmd(cmd)

def push_container_image(repo, tag):
    '''
    Push image to registry
    @param repo str registry repository
    @param tag str image tag
    '''
    run_cmd(f"podman --remote push {repo}:{tag}")
    # Even though check_call only returns after the cmd completion,
    # Quay seems to take more time to publish images in some occasions
    run_cmd("sleep 50")
    if is_tag_in_registry(repo, tag):
        print(f"Build and Push done successfully via tag: {tag}")
    else:
        raise Exception(f"Image pushed but not viewable in registry: tag:{tag}")

def is_tag_in_podman_storage(repo, tag):
    '''
    Search for a tag in the local podman storage
    @param repo str registry repository
    @param tag  str image tag
    '''
    return subprocess.run(f"podman image exists {repo}:{tag}").returncode == 0

def is_tag_in_registry(repo, tag):
    '''
    Search for a tag in the registry
    @param repo str registry repository
    @param tag  str image tag
    '''
    # Podman remote doesn't allow push using digestfile. That's why the tag check is done
    tags = run_cmd(f"podman search --list-tags {repo}")
    if (tag in str(tags)):
        return True
    return False

def main():
    args = parse_args()

    if environ.get('CONTAINER_HOST') is None or environ.get('CONTAINER_SSHKEY') is None:
        sys.exit('You must have CONTAINER_HOST and CONTAINER_SSHKEY environment variables setup')

    # If a tag wasn't passed then use the git
    # short commit hash
    if not args.tag:
        commit = run_cmd(f"git ls-remote {args.git_url} {args.git_ref}")[0:6].decode("utf-8")
        args.tag = f"{args.arch}-{commit}"

    if args.push_to_registry and is_tag_in_registry(args.repo, args.tag):
        print(f"Container image at {args.repo}:{args.tag} exists.")
        if args.force:
            print(f"--force was passed. Will overwrite container at {args.repo}:{args.tag}")
        else:
            print(f"No work to do. You can force with --force. Skipping build/push.")
            return

    # Check first if the build already exists in local storage on the builder
    if is_tag_in_podman_storage(args.repo, args.tag):
        if args.force:
            print(f"--force was passed. Will overwrite built container with tag {args.repo}:{args.tag}")
            needbuild = True
        else:
            print(f"Re-using existing built container with tag {args.repo}:{args.tag}")
            needbuild = False
    else:
        needbuild = True
    # Build the container if needed.
    if needbuild:
        build_container_image(args.label, args.git_url, args.git_ref, args.repo, args.tag)

    if args.push_to_registry:
        push_container_image(args.repo, args.tag)

def parse_args():
    parser = argparse.ArgumentParser(
        prog="CoreOS Assembler Remote Build",
        description="Build coreos-assembler remotely",
        usage="""
Run multi-arch builds using podman remote.
In order to get cmd-remote-build-container working the CONTAINER_SSHKEY and CONTAINER_HOST environment variables
must be defined

Examples:
    $ cosa remote-build-container \
        --arch aarch64 \
        --label quay.labels-after=4d \
        --git-ref main \
        --git-url https://github.com/coreos/coreos-assembler.git \
        --repo quay.io/coreos/coreos-assembler-staging \
        --push-to-registry """)

    parser.add_argument(
        '--arch', required=True,
        help='Build Architecture')
    parser.add_argument(
        '--label', default=[], action='append',
        required=False, help='Add image label(s)')
    parser.add_argument(
        '--force', required=False, action='store_true',
        help='Force image overwrite')
    parser.add_argument(
        '--git-ref', required=True,
        help='Git branch or tag')
    parser.add_argument(
        '--git-url', required=True,
        help='Git URL')
    parser.add_argument(
        '--push-to-registry', required=False, action='store_true',
         help='Push image to registry. You must be logged in before pushing images')
    parser.add_argument(
        '--repo', required=True,
        help='Registry repository')
    parser.add_argument(
        '--tag', required=False,
        help='Force image tag. The default is arch-commit')

    return parser.parse_args()


if __name__ == '__main__':
    sys.exit(main())
