From 84d4de577057f66e1ad1c8e91631c441c0294532 Mon Sep 17 00:00:00 2001
From: Nikita Dubrovskii <nikita@linux.ibm.com>
Date: Thu, 17 Oct 2024 12:57:00 +0200
Subject: [PATCH 3/4] org.osbuild.selinux: support operating on mounts

This adds support for specifying paths to operate on,
rather than just the root of the target:
```
- type: org.osbuild.selinux
  options:
    file_contexts: etc/selinux/targeted/contexts/files/file_contexts
    target: mount://root/path/to/dir
  mounts:
    - name: root
      source: disk
      target: /
```

or

```
- type: org.osbuild.selinux
  options:
    labels:
      mount://root/path/to/file: system_u:object_r:boot_t:s0
      mount://root/path/to/other/file: system_u:object_r:var_t:s0
  mounts:
    - name: root
      source: disk
      target: /

```
---
 stages/org.osbuild.selinux           | 21 ++++++++++++---------
 stages/org.osbuild.selinux.meta.json |  8 +++++++-
 2 files changed, 19 insertions(+), 10 deletions(-)

diff --git a/stages/org.osbuild.selinux b/stages/org.osbuild.selinux
index 563d827b..40487599 100755
--- a/stages/org.osbuild.selinux
+++ b/stages/org.osbuild.selinux
@@ -4,26 +4,30 @@ import pathlib
 import sys
 
 import osbuild.api
-from osbuild.util import selinux
+from osbuild.util import parsing, selinux
 
 
-def main(tree, options):
+def main(args):
+    # Get the path where the tree is
+    options = args["options"]
     file_contexts = options.get("file_contexts")
     exclude_paths = options.get("exclude_paths")
+    target = options.get("target", "tree:///")
+    root, target = parsing.parse_location_into_parts(target, args)
 
     if file_contexts:
-        file_contexts = os.path.join(f"{tree}", options["file_contexts"])
+        file_contexts = os.path.join(args["tree"], options["file_contexts"])
         if exclude_paths:
-            exclude_paths = [os.path.join(tree, p.lstrip("/")) for p in exclude_paths]
-        selinux.setfiles(file_contexts, os.fspath(tree), "", exclude_paths=exclude_paths)
+            exclude_paths = [os.path.normpath(f"{root}/{target}/{p}") for p in exclude_paths]
+        selinux.setfiles(file_contexts, os.path.normpath(root), target, exclude_paths=exclude_paths)
 
     labels = options.get("labels", {})
     for path, label in labels.items():
-        fullpath = os.path.join(tree, path.lstrip("/"))
+        fullpath = parsing.parse_location(path, args)
         selinux.setfilecon(fullpath, label)
 
     if options.get("force_autorelabel", False):
-        stamp = pathlib.Path(tree, ".autorelabel")
+        stamp = pathlib.Path(root, ".autorelabel")
         # Creating just empty /.autorelabel resets only the type of files.
         # To ensure that the full context is reset, we write "-F" into the file.
         # This mimics the behavior of `fixfiles -F boot`. The "-F" option is
@@ -34,6 +38,5 @@ def main(tree, options):
 
 
 if __name__ == '__main__':
-    args = osbuild.api.arguments()
-    r = main(args["tree"], args["options"])
+    r = main(osbuild.api.arguments())
     sys.exit(r)
diff --git a/stages/org.osbuild.selinux.meta.json b/stages/org.osbuild.selinux.meta.json
index 30dbddae..e536cead 100644
--- a/stages/org.osbuild.selinux.meta.json
+++ b/stages/org.osbuild.selinux.meta.json
@@ -33,6 +33,12 @@
         }
       ],
       "properties": {
+        "target": {
+          "type": "string",
+          "description": "Target path in the tree or on a mount",
+          "pattern": "^mount://[^/]+/|^tree:///",
+          "default": "tree:///"
+        },
         "file_contexts": {
           "type": "string",
           "description": "Path to the active SELinux policy's `file_contexts`"
@@ -53,7 +59,7 @@
         },
         "force_autorelabel": {
           "type": "boolean",
-          "description": "Do not use. Forces auto-relabelling on first boot.",
+          "description": "Do not use. Forces auto-relabelling on first boot. Affects target's root or tree:/// by default",
           "default": false
         }
       }
-- 
2.47.0

