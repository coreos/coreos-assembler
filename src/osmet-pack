#!/bin/bash
set -euo pipefail

if [ ! -f /etc/cosa-supermin ]; then
    dn=$(dirname "$0")
    # shellcheck source=src/cmdlib.sh
    . "${dn}"/cmdlib.sh

    img_src=$1; shift
    sector_size=$1; shift
    osmet_dest=$1; shift
    checksum=$1; shift
    speed=$1; shift
    coreinst=${1:-${OSMET_PACK_COREOS_INSTALLER:-}}

    workdir=$(pwd)
    TMPDIR=$(readlink -f tmp/tmp-osmet-pack)
    rm -rf "${TMPDIR}"
    mkdir -p "${TMPDIR}"

    if [[ $img_src == *.gz || $img_src == *.xz ]]; then
        img="$(basename "$img_src")"
        fatal "Cannot pack osmet from $img; not an uncompressed image"
    fi

    set -- "${TMPDIR}/osmet.bin" "${checksum}" "${speed}"
    if [ -n "${coreinst:-}" ]; then
        cp "${coreinst}" "${TMPDIR}/coreos-installer"
        set -- "$@" "${TMPDIR}/coreos-installer"
    fi

    device_opts=
    if [ "$sector_size" != 512 ]; then
        device_opts=",physical_block_size=${sector_size},logical_block_size=${sector_size}"
    fi

    # stamp it with "osmet" serial so we find it easily in the VM
    runvm -drive "if=none,id=osmet,format=raw,readonly=on,file=${img_src}" \
        -device "virtio-blk,serial=osmet,drive=osmet${device_opts}" -- \
        /usr/lib/coreos-assembler/osmet-pack "$@"

    mv "${TMPDIR}/osmet.bin" "${osmet_dest}"
    rm -rf "${TMPDIR}"

    exit 0
fi

# This runs inside supermin

osmet_dest=$1; shift
checksum=$1; shift
speed=$1; shift
coreinst=${1:-}

set -x

# Also hardcoded in redhat-coreos/.../coreos-cryptfs
rhcos_luks_header_size_sectors=32768

mkdir -p /sysroot
rootfs=/dev/disk/by-id/virtio-osmet-part4
roottype=$(blkid -p -s TYPE -o value "${rootfs}")
real_rootdev=
if [ "${roottype}" = "crypto_LUKS" ]; then
  dev_size=$(($(blockdev --getsize ${rootfs}) - rhcos_luks_header_size_sectors))
  # Unlike coreos-cryptfs we use the concise syntax which allows us to mark the blockdev
  # as read-only, which is required for XFS to actually honor `-o ro` not replaying
  # the journal.
  dmsetup create --concise "rhcos-luks-root-nocrypt,,,ro,0 ${dev_size} linear ${rootfs} ${rhcos_luks_header_size_sectors}"
  mount -o ro /dev/disk/by-label/root /sysroot
  real_rootdev="${rootfs},${rhcos_luks_header_size_sectors}"
else
  mount -o ro "${rootfs}" /sysroot
fi
osname=$(ls /sysroot/ostree/deploy)
deploydir=$(find "/sysroot/ostree/deploy/$osname/deploy" -mindepth 1 -maxdepth 1 -type d)
# shellcheck disable=SC1090
description=$(. "${deploydir}/etc/os-release" && echo "${PRETTY_NAME}")

if [ -z "${coreinst}" ]; then
    # if we weren't given a custom coreos-installer, then we want to use the one
    # from the target system itself; chroot into it to avoid linking issues
    for mnt in dev proc sys run var tmp; do
        mount --rbind /$mnt "${deploydir}/$mnt"
    done
    coreinst="chroot ${deploydir} coreos-installer"
fi

case "$speed" in
    fast)      fast=--fast ;;
    normal)    fast=       ;;
    *)         exit 1      ;;
esac

# We don't want double quotes (for both `coreinst` and `fast`, which may be '')
# shellcheck disable=SC2086
RUST_BACKTRACE=full ${coreinst} osmet pack /dev/disk/by-id/virtio-osmet \
    --description "${description}" \
    --checksum "${checksum}" \
    ${real_rootdev:+--real-rootdev ${real_rootdev}} \
    --output /tmp/osmet.bin $fast

mv /tmp/osmet.bin "${osmet_dest}"
