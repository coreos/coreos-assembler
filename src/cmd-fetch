#!/usr/bin/env bash
set -euo pipefail

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

print_help() {
    cat 1>&2 <<'EOF'
Usage: coreos-assembler fetch --help
       coreos-assembler fetch [--update-lockfile]

  Fetch and import the latest packages.
EOF
}

UPDATE_LOCKFILE=
rc=0
options=$(getopt --options h --longoptions help,update-lockfile -- "$@") || rc=$?
[ $rc -eq 0 ] || {
    print_help
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        --update-lockfile)
            UPDATE_LOCKFILE=1
            ;;
        --)
            shift
            break
            ;;
        *)
            fatal "$0: unrecognized option: $1"
            exit 1
            ;;
    esac
    shift
done

if [ $# -ne 0 ]; then
    print_help
    fatal "ERROR: Too many arguments"
    exit 1
fi

prepare_build

lock_arg=
if [ -n "${UPDATE_LOCKFILE}" ]; then
    # Put this under tmprepo so it gets automatically chown'ed if needed
    lock_arg="--ex-write-lockfile-to=${tmprepo}/tmp/manifest-lock.json"
    if [ -f "${manifest_lock_overrides}" ]; then
        echo "NB: ignoring overrides ${manifest_lock_overrides}"
        sleep 1
    fi
elif [ -f "${manifest_lock}" ]; then
    lock_arg="--ex-lockfile=${manifest_lock}"
    echo -n "Fetching RPMs from lockfile ${manifest_lock}"
    if [ -f "${manifest_lock_overrides}" ]; then
        lock_arg="${lock_arg} --ex-lockfile=${manifest_lock_overrides}"
        echo -n " and overrides ${manifest_lock_overrides}"
    fi
    echo
    sleep 1
fi

# shellcheck disable=SC2086
runcompose --download-only ${lock_arg}

if [ -n "${UPDATE_LOCKFILE}" ]; then
    mv "${tmprepo}/tmp/manifest-lock.json" "${manifest_lock}"
    echo "Updated lockfile ${manifest_lock}"
fi
