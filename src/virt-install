#!/usr/bin/env python3
# NOTE: PYTHONUNBUFFERED is set in cmdlib.sh for unbuffered output
#
# Wrapper for virt-install designed to run in a container
# environment, and using defaults targeted for CoreOS.
# https://github.com/coreos/coreos-assembler/issues/7
# Today, this requires a Kickstart (and an installer ISO path);
# we might change things down the line to have defaults for
# one or both.

import os,sys,argparse,subprocess,io,time,re,multiprocessing
import tempfile,yaml,platform,json,threading
import http.server
import socketserver

PID = os.getpid()

# Currently we spin up a temporary webserver, but we could also
# do something more custom over a virtio-serial channel or so.
PORT = 8000

# Soon we should create the filesystem outside of anaconda
ANACONDA_BOOT_SIZE_MB = 1024

def fatal(msg):
    print('error: {}'.format(msg), file=sys.stderr)
    raise SystemExit(1)

# Set of valid keys in image.yaml
IMAGE_CONF_KEYS = ['size', 'postprocess-script', 'extra-kargs',
                   'save-var-subdirs-for-selabel-workaround', 'ostree-remote']

parser = argparse.ArgumentParser()
parser.add_argument("--dest", help="Destination disk",
                    action='store', required=True)
parser.add_argument("--tmpdir", help="Temporary directory",
                    action='store', required=True)
parser.add_argument("--create-disk", help="Automatically create disk as qcow2, parsing kickstart for size",
                    action='store_true')
parser.add_argument("--configdir", help="coreos-assembler configdir",
                    action='store', required=True)
parser.add_argument("--variant", help="Configure image variant",
                    choices=('metal-bios', 'metal-uefi', 'cloud'), default=None)
parser.add_argument("--kickstart-out", help="Save flattened kickstart",
                    action='store')
parser.add_argument("--location", help="Installer location",
                    action='store', required=True)
parser.add_argument("--memory", help="Memory size in MB",
                    action='store', type=int,
                    default=os.environ.get("VIRT_INSTALL_MEMORY", 1024))
parser.add_argument("--console-log-file", help="Console log file",
                    action='store')
parser.add_argument("--fs9p", help="Make use of 9p",
                    action='store_true')
# Note https://bugzilla.redhat.com/show_bug.cgi?id=1379389
parser.add_argument("--ostree-repo", help="Path to OSTree repo",
                    action='store', required=True)
parser.add_argument("--ostree-stateroot", help="OSTree stateroot",
                    action='store')
parser.add_argument("--ostree-ref", help="OSTree ref",
                    action='store')
parser.add_argument("--delete-ostree-ref", help="Delete the OSTree ref after installation",
                    action='store_true')
parser.add_argument("--ostree-remote", help="OSTree remote",
                    action='store')
parser.add_argument("--wait", help="Number of minutes to wait",
                    action='store', type=int,
                    default=os.environ.get("VIRT_INSTALL_WAIT", 10))
args = parser.parse_args()

# Copy of bits from https://pagure.io/standard-test-roles/pull-request/223
def get_libvirt_smp_arg():
    """Determine the number of CPUs that should be visible in the guest.
    See e.g. https://www.redhat.com/archives/libvirt-users/2017-June/msg00025.html
    We want to match the number of host physical cores.
    """

    # When running under K8S, the scehduling may be much more restrictive than
    # physical core count, and the code below will assign that count, leading
    # to a VM hang. (e.g. 64 vcpu's to a 1 cpu assignment...)
    p1c = open("/proc/1/cgroup")
    if re.search(r'.*kubepods.*', p1c.read()):
        return '--vcpus=sockets=1,cores=1,threads=1'

    # We may be run in a cgroup with fewer cores available than physical.
    available_cpu = int(subprocess.check_output(['nproc']).strip())
    # https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line
    core_sockets = set()
    for line in io.BytesIO(subprocess.check_output(['lscpu', '-b', '-p=Core,Socket'])):
        if line.startswith(b'#'):
            continue
        core_sockets.add(line.strip())
    sockets = min(available_cpu, len(core_sockets))
    return '--vcpus=sockets={},cores=1,threads=1'.format(sockets)

def run(fn, argv, **kwargs):
    print("cmd: {}".format(subprocess.list2cmdline(argv)))
    try:
        return fn(argv, **kwargs)
    except subprocess.CalledProcessError as e:
        raise SystemExit(f"{e}")

def run_sync_verbose(argv, **kwargs):
    run(subprocess.check_call, argv, **kwargs)

if args.kickstart_out:
    ks_tmp = open(args.kickstart_out, 'w')
else:
    ks_tmp = tempfile.NamedTemporaryFile(mode='w', prefix="coreos-virtinstall", suffix=".ks")

with open(args.configdir + '/image.yaml') as f:
    image_conf = yaml.safe_load(f)
for k in image_conf:
    if not k in IMAGE_CONF_KEYS:
        fatal(f"Unknown key '{k}' in image.yaml")
disk_size = int(image_conf['size'])
extra_kargs = image_conf.get('extra-kargs', [])

with open('/usr/lib/coreos-assembler/image-base.ks') as basef:
    buf = basef.read()
    buf = buf.replace('%%KARGS%%', ' '.join(extra_kargs))
    ks_tmp.write(buf)

# To support different distro builds using Fedora anaconda,
# installclass must be explicit for anaconda to find the correct directory.
if subprocess.call(['ostree', f"--repo={args.ostree_repo}", 'ls', args.ostree_ref, "/usr/lib/ostree-boot/efi/EFI/redhat"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0:
    print("Detected /usr/lib/ostree-boot/efi/EFI/redhat, adding Red Hat Enterprise Linux installclass.")
    ks_tmp.write("""
    %anaconda
    installclass --name="Red Hat Enterprise Linux"
    %end
    """)

# This is an implementation detail of https://github.com/coreos/ignition-dracut
# So we hardcode it here.
# See: https://github.com/coreos/ignition-dracut/pull/12
ks_tmp.write("""
%post --erroronfail
touch /boot/ignition.firstboot
%end
""")

# Grab the ipv4 address of the container
default_iface = subprocess.check_output(['ip', '-4', 'route', 'list', '0/0']).split()[4]
output = subprocess.check_output(['ip', '-4', '-oneline', 'addr', 'show', default_iface])
ipv4 = re.match('.*inet ([\d.]+)/\d\d.*', str(output)).group(1)

if args.ostree_repo:
    assert args.ostree_stateroot
    assert args.ostree_remote
    assert args.ostree_ref
    ks_tmp.write(f"""
ostreesetup --nogpg --osname={args.ostree_stateroot} --remote={args.ostree_remote} --url=http://{ipv4}:{PORT}/ --ref="{args.ostree_ref}"
    """)

if args.fs9p:
    ks_tmp.write("""
%pre
set -euo pipefail
# Hacky bits to copy out all of the Anaconda logs on shutdown
mkdir -p /mnt/logs
mount -t 9p -o rw,trans=virtio,version=9p2000.L /mnt/logs /mnt/logs
cat >/etc/systemd/system/coreos-virtinstall-logs.service <<EOF
[Unit]
RequiresMountsFor=/mnt/logs
[Service]
Type=oneshot
RemainAfterExit=yes
ExecStop=/bin/sh -c 'cp /tmp/*.log /mnt/logs'
EOF

# And accelerate the ostree pulls
mkdir -p /install/ostree/repo
mount -t 9p -o ro,trans=virtio,version=9p2000.L /install/ostree/repo /install/ostree/repo

systemctl daemon-reload
systemctl start coreos-virtinstall-logs
%end
    """)

# Support using commits only
if args.delete_ostree_ref:
    print("virt-install: Will remove ostree ref")
    ks_tmp.write(f"""
%post --erroronfail
ostree refs --delete {args.ostree_remote}:{args.ostree_ref}
%end
""")

if args.create_disk:
    if args.variant.startswith('metal-'):
        fmt = 'raw'
        size_estimate_path = os.path.join(args.tmpdir, 'ostree-size.json')
        # The OSTree size is shared among disk images, so we compute it once per build
        if not os.path.exists(size_estimate_path):
            print(f"Estimating OSTree commit size...")
            subprocess.check_call(['/usr/lib/coreos-assembler/estimate-commit-disk-size',
                                   f"--repo={args.ostree_repo}", args.ostree_ref],
                                  stdout=open(size_estimate_path, 'w'))
        with open(size_estimate_path) as f:
            size_estimate = json.load(f)
        print(f"OSTree commit size:\n{size_estimate}")
        final_size_mb = size_estimate['estimate-mb']['final'] + ANACONDA_BOOT_SIZE_MB
        size = f"{final_size_mb}M"
    else:
        fmt = 'qcow2'
        size = f'{disk_size}G'
    run_sync_verbose(['qemu-img', 'create', '-f', fmt, args.dest, size])
    print(f"Created initial disk: {args.dest} with size {size}")

# Now a hack to avoid libvirt race conditions; it's
# activated by the cmdline (and exits after 30s), and in virt-install the daemon
# might not have grabbed the socket by the time the rest of the virt-install
# code tries to talk to it.
# https://github.com/coreos/coreos-assembler/issues/31
# At some point we'll talk to qemu directly.
for x in range(10):
    if subprocess.call(['virsh', '--connect=qemu:///session', 'version'], stdout=subprocess.DEVNULL) == 0:
        break
    print("Waiting for libvirt {}/10", x)
    time.sleep(1)

# Doesn't need to be truly unique, let's just use our pid+time
domain="coreos-inst-{}-{}".format(os.getpid(),int(time.time()))
tail_proc = None
http_proc = None

# See the use of this below; also note virt-install also output the version to
# stderr and not stdout.
have_virtinstall_2 = int(subprocess.check_output(['virt-install', '--version'],
                                                 stderr=subprocess.STDOUT).strip().decode('UTF-8').split('.')[0]) >= 2

ks_tmp.flush()

n_requests = 0

class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *myargs, **kwargs):
        super().__init__(*myargs, directory=args.ostree_repo, **kwargs)

    def log_request(code, size):
        global n_requests
        n_requests += 1

def run_webserver():
    try:
        print(f"Listening on {ipv4}:{PORT}")
        server = http.server.ThreadingHTTPServer((ipv4, PORT), RequestHandler)
        server.serve_forever()
    except Exception as e:
        sys.stderr.write(f"Http thread failed:\n{e}\n")
        sys.stderr.flush()
        os._exit(1)

try:
    vinstall_args = ["virt-install", "--connect=qemu:///session",
                     "--name={}".format(domain)]
    # use noautoconsole for fedora since we will use console=log.file
    # for el7 just use the serial console
    if os.environ['ISFEDORA'] != '':
        vinstall_args.append('--noautoconsole')
    else:
        vinstall_args.append('--nographics')
    if args.console_log_file:
        vinstall_args.append("--console=log.file={}".format(args.console_log_file))
        tail_proc = subprocess.Popen(["/bin/sh", "-c", f"tail --pid={PID} -F {args.console_log_file} | grep anaconda"])

    # Note this is racy, we should be waiting for the webserver to be up
    # (Or switch to doing this over virtio)
    http_thread = threading.Thread(target=run_webserver, daemon=True)
    http_thread.start()

    if args.fs9p:
        vinstall_args.append(f"--filesystem=source={args.tmpdir}/anaconda,target=/mnt/logs,accessmode=mapped")
        vinstall_args.append(f"--filesystem=source={args.ostree_repo},target=/install/ostree/repo,accessmode=mapped")

    location_arg = f"--location={args.location}"
    if have_virtinstall_2:
        # This way we don't go through libosinfo.  This is hardcoding the layout of the
        # ISO, but that's fine since we pin a version of it.
        # https://bugzilla.redhat.com/show_bug.cgi?id=1659242

        # set correct location of the kernel image and initrd
        arch = platform.machine()
        if arch == "x86_64" or arch == "i386":
            location_arg += ",kernel=isolinux/vmlinuz,initrd=isolinux/initrd.img"
        elif arch == "ppc64le":
            location_arg += ",kernel=ppc/ppc64/vmlinuz,initrd=ppc/ppc64/initrd.img"
        elif arch == "aarch64":
            location_arg += ",kernel=images/pxeboot/vmlinuz,initrd=images/pxeboot/initrd.img"
        elif arch == "s390x":
            location_arg += ",kernel=images/kernel.img,initrd=images/initrd.img"
        else:
            raise SystemExit("Unknown machine architecture "+arch+" can't determine the kernel and initrd location")

    vinstall_args.extend(["--wait={}".format(args.wait), "--noreboot", "--nographics",
                          "--memory={}".format(args.memory), get_libvirt_smp_arg(),
                          "--os-variant=rhel7.6", "--rng=/dev/urandom",
                          "--cpu=host-passthrough",
                          "--check", "path_in_use=off",
                          "--network=user",  # user mode networking
                          location_arg,
                          "--disk=path={},cache=unsafe".format(args.dest),
                          "--initrd-inject={}".format(ks_tmp.name),
                          "--extra-args", "ks=file://{} console=tty0 console=ttyS0,115200n8 inst.cmdline inst.notmux".format(os.path.basename(ks_tmp.name))])
    if args.variant == 'metal-uefi':
        vinstall_args.append('--boot=uefi')
    run_sync_verbose(vinstall_args)
    print(f"virt-install: Served {n_requests} requests via internal webserver")
    # And strip out all of the Anaconda stuff in /var; this uses libguestfs
    # to ensure we fully control the code.
    cleanup_argv = ['/usr/lib/coreos-assembler/gf-anaconda-cleanup', args.dest]
    if image_conf.get('save-var-subdirs-for-selabel-workaround'):
        cleanup_argv += ['--save-var-subdirs-for-selabel-workaround']
    run_sync_verbose(cleanup_argv)

    # This one is part of the "API" we provide to config repositories.  At least
    # RHEL CoreOS will use it to change the OS to appear to have been provisioned
    # from an oscontainer.
    config_image_post = image_conf.get("postprocess-script")
    if config_image_post is not None:
        run_sync_verbose([os.path.join(args.configdir, config_image_post), args.dest])

finally:
    subprocess.call(['virsh', '--connect=qemu:///session', 'undefine', '--nvram', domain])
    if tail_proc is not None:
        tail_proc.terminate()
print("Completed install to disk image: {}".format(args.dest))
