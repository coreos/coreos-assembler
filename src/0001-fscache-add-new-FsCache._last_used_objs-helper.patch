From 4a9831fa889b073ccb14568c4571f57d28dfe84f Mon Sep 17 00:00:00 2001
From: Michael Vogt <michael.vogt@gmail.com>
Date: Tue, 12 Dec 2023 21:20:42 +0100
Subject: [PATCH 1/4] fscache: add new `FsCache._last_used_objs()' helper

This commit adds a helper that can be used to get a sorted list
of cache entries. The list includes the name and the last_used
information.
---
 osbuild/util/fscache.py | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/osbuild/util/fscache.py b/osbuild/util/fscache.py
index c8fc99aa..58c9a310 100644
--- a/osbuild/util/fscache.py
+++ b/osbuild/util/fscache.py
@@ -15,7 +15,7 @@ import json
 import os
 import subprocess
 import uuid
-from typing import Any, Dict, NamedTuple, Optional, Tuple, Union
+from typing import Any, Dict, List, NamedTuple, Optional, Tuple, Union
 
 from osbuild.util import ctx, linux, rmrf
 
@@ -101,6 +101,17 @@ class FsCacheInfo(NamedTuple):
         return data
 
 
+class FsCacheObjectInfo(NamedTuple):
+    """ File System Cache object information
+
+    This type represents information about a single cache object. The
+    last_used information is only guaranteed to be valid while the cache
+    is locked.
+    """
+    name: str
+    last_used: float
+
+
 class FsCache(contextlib.AbstractContextManager, os.PathLike):
     """File System Cache
 
@@ -1059,6 +1070,22 @@ class FsCache(contextlib.AbstractContextManager, os.PathLike):
                 raise self.MissError() from None
             raise e
 
+    def _last_used_objs(self) -> List[FsCacheObjectInfo]:
+        """Return a list of FsCacheObjectInfo with name, last_used
+           information sorted by last_used time.
+
+        Note that this function will be racy when used without a lock and
+        the caller needs to handle this.
+        """
+        objs = []
+        for name in os.listdir(self._path(self._dirname_objects)):
+            try:
+                last_used = self._last_used(name)
+            except (OSError, FsCache.MissError):
+                continue
+            objs.append(FsCacheObjectInfo(name=name, last_used=last_used))
+        return sorted(objs, key=lambda obj: obj.last_used)
+
     @property
     def info(self) -> FsCacheInfo:
         """Query Cache Information
-- 
2.43.0

