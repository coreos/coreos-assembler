#!/usr/bin/python3

'''
    Implements signing with RoboSignatory via fedora-messaging from
    the cosalib/fedora_messaging_request library.
'''

import argparse
import gi
import os
import shutil
import subprocess
import sys
import tarfile
import tempfile

import boto3

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from cosalib.meta import GenericBuildMeta as Meta
from cosalib.builds import Builds
from cosalib.cmdlib import (
    get_basearch,
    sha256sum_file,
    import_ostree_commit)
from cosalib.fedora_messaging_request import send_request_and_wait_for_response

gi.require_version('OSTree', '1.0')
from gi.repository import Gio, OSTree

# this is really the worst case scenario, it's usually pretty fast otherwise
ROBOSIGNATORY_REQUEST_TIMEOUT_SEC = 60 * 60

fedenv = 'prod'


def main():
    args = parse_args()
    if args.stg:
        global fedenv
        fedenv = 'stg'
    args.func(args)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--build", help="Build ID", default='latest')
    subparsers = parser.add_subparsers(dest='cmd', title='subcommands')
    subparsers.required = True

    robosig = subparsers.add_parser('robosignatory', help='sign with '
                                    'RoboSignatory via fedora-messaging')
    robosig.add_argument("--s3", metavar='<BUCKET>[/PREFIX]', required=True,
                         help="bucket and prefix to S3 builds/ dir")
    group = robosig.add_mutually_exclusive_group(required=True)
    group.add_argument("--ostree", help="sign commit", action='store_true')
    group.add_argument("--images", help="sign images", action='store_true')
    robosig.add_argument("--extra-fedmsg-keys", action='append',
                         metavar='KEY=VAL', default=[],
                         help="extra keys to inject into messages")
    robosig.add_argument("--fedmsg-conf", metavar='CONFIG.TOML',
                         help="fedora-messaging config file for publishing")
    robosig.add_argument("--stg", action='store_true',
                         help="target the stg infra rather than prod")
    robosig.add_argument("--gpgkeypath", help="path to directory containing "
                         "public keys to use for signature verification",
                         default="/etc/pki/rpm-gpg")
    robosig.set_defaults(func=cmd_robosignatory)

    return parser.parse_args()


def cmd_robosignatory(args):
    builds = Builds()
    if args.build == 'latest':
        args.build = builds.get_latest()

    s3 = boto3.client('s3')
    args.bucket, args.prefix = get_bucket_and_prefix(args.s3)

    args.extra_keys = {}
    for keyval in args.extra_fedmsg_keys:
        key, val = keyval.split('=', 1)  # will throw exception if there's no =
        args.extra_keys[key] = val

    build = Meta(build=args.build)
    version = build['ostree-version']

    # 32.20200615.2.0 -> 32
    major = int(version.split('.')[0])
    gpgkey = f"{args.gpgkeypath}/RPM-GPG-KEY-fedora-{major}-primary"
    if not os.path.isfile(gpgkey):
        raise Exception(f"Expected GPG key {gpgkey} to exist")

    # these two are different enough that they deserve separate handlers
    if args.ostree:
        robosign_ostree(args, s3, build, gpgkey)
    else:
        assert args.images
        robosign_images(args, s3, build, gpgkey)


def robosign_ostree(args, s3, build, gpgkey):
    builds = Builds()
    builddir = builds.get_build_dir(args.build)
    checksum = build['ostree-commit']

    # Copy commit object to a temporary location. A preferred approach here is
    # to require the pipeline to do a preliminary buildupload and then just
    # point at the final object location instead. Though we'd want
    # https://github.com/coreos/coreos-assembler/issues/668 before doing this
    # so we at least GC on failure. For now, just use a stable path so we
    # clobber previous runs.
    build_dir_commit_obj = os.path.join(builddir, 'ostree-commit-object')
    commit_key = f'{args.prefix}/tmp/ostree-commit-object'
    commitmeta_key = f'{args.prefix}/tmp/ostree-commitmeta-object'
    print(f"Uploading s3://{args.bucket}/{commit_key}")
    s3.upload_file(build_dir_commit_obj, args.bucket, commit_key)
    s3.delete_object(Bucket=args.bucket, Key=commitmeta_key)

    response = send_request_and_wait_for_response(
        request_type='ostree-sign',
        config=args.fedmsg_conf,
        request_timeout=ROBOSIGNATORY_REQUEST_TIMEOUT_SEC,
        environment=fedenv,
        body={
            'build_id': args.build,
            'basearch': get_basearch(),
            'commit_object': f's3://{args.bucket}/{commit_key}',
            'checksum': f'sha256:{checksum}',
            **args.extra_keys
        }
    )

    validate_response(response)

    # download back sig and verify it in a throwaway repo
    print("Verifying OSTree signature")
    with tempfile.TemporaryDirectory(prefix="cosa-sign", dir="tmp") as d:
        repo = OSTree.Repo.new(Gio.File.new_for_path(d))
        repo.create(OSTree.RepoMode.ARCHIVE)

        commit_obj_relpath = f'objects/{checksum[:2]}/{checksum[2:]}.commit'
        commit_obj_path = os.path.join(d, commit_obj_relpath)
        commitmeta_obj_relpath = f'{commit_obj_relpath}meta'
        commitmeta_obj_path = os.path.join(d, commitmeta_obj_relpath)

        os.makedirs(os.path.dirname(commit_obj_path), exist_ok=True)
        shutil.copyfile(build_dir_commit_obj, commit_obj_path)
        s3.download_file(args.bucket, commitmeta_key, commitmeta_obj_path)

        # this is a bit awkward though the remote API is the only way to point
        # libostree at armored GPG keys
        config = repo.copy_config()
        config.set_string('remote "tmpremote"', 'url', 'https://example.com')
        config.set_string('remote "tmpremote"', 'gpgkeypath', gpgkey)
        config.set_boolean('remote "tmpremote"', 'gpg-verify', True)
        repo.write_config(config)
        # XXX: work around ostree_repo_write_config not reloading remotes too
        repo.reload_config()

        result = repo.verify_commit_for_remote(checksum, 'tmpremote')
        assert result.count_all() == 1
        t = result.get(0, [OSTree.GpgSignatureAttr.FINGERPRINT,
                           OSTree.GpgSignatureAttr.USER_NAME,
                           OSTree.GpgSignatureAttr.USER_EMAIL,
                           OSTree.GpgSignatureAttr.VALID])
        fp = t.get_child_value(0).get_string()
        name = t.get_child_value(1).get_string()
        email = t.get_child_value(2).get_string()
        valid = t.get_child_value(3).get_boolean()
        msg = (("Valid " if valid else "Invalid ")
               + f"signature from {name} <{email}> ({fp})")
        # allow unknown signatures in stg
        if not valid and fedenv != 'stg':
            raise Exception(msg)
        print(msg)

        # ok, it's valid -- add it to the tarfile
        ostree_image = build['images']['ostree']
        commit_tarfile = os.path.join(builddir, ostree_image['path'])
        commit_tarfile_new = os.path.join(d, ostree_image['path'])
        subprocess.check_call(['cp-reflink', commit_tarfile,
                               commit_tarfile_new])
        os.chmod(commit_tarfile_new, 0o660)
        with tarfile.open(commit_tarfile_new, 'a:') as t:
            t.add(commitmeta_obj_path, arcname=commitmeta_obj_relpath)
        ostree_image['size'] = os.path.getsize(commit_tarfile_new)
        ostree_image['sha256'] = sha256sum_file(commit_tarfile_new)
        # and the critical bits
        shutil.copymode(commit_tarfile, commit_tarfile_new)
        shutil.move(commit_tarfile_new, commit_tarfile)
        build.write()

    # and finally add it to the tmprepo too so that buildextend-(qemu|metal)
    # will pull it: we could just nuke the repo to force a re-untar, but it
    # might nuke a more recent commit if we're not operating on the latest
    import_ostree_commit('tmp/repo', checksum, commit_tarfile, force=True)


def robosign_images(args, s3, build, gpgkey):
    builds = Builds()
    builddir = builds.get_build_dir(args.build)

    # NB: we just handle the current basearch for now
    full_prefix = f'{args.prefix}/{args.build}/{get_basearch()}'

    # collect all the image paths to sign
    artifacts = [{
        'file': f's3://{args.bucket}/{full_prefix}/{img["path"]}',
        'checksum': f'sha256:{img["sha256"]}'
    } for img in build['images'].values()]

    response = send_request_and_wait_for_response(
        request_type='artifacts-sign',
        config=args.fedmsg_conf,
        request_timeout=ROBOSIGNATORY_REQUEST_TIMEOUT_SEC,
        environment=fedenv,
        body={
            'build_id': args.build,
            'basearch': get_basearch(),
            'artifacts': artifacts,
            **args.extra_keys
        }
    )

    validate_response(response)

    # download sigs and verify (use /tmp to avoid gpg hitting ENAMETOOLONG)
    with tempfile.TemporaryDirectory(prefix="cosa-sign-") as d:
        def gpg(*args):
            subprocess.check_call(['gpg', '--homedir', d, *args])

        gpg('--quiet', '--import', gpgkey)

        for img in build['images'].values():
            sig_s3_key = f'{full_prefix}/{img["path"]}.sig'

            tmp_sig_path = f'tmp/{img["path"]}.sig'
            s3.download_file(args.bucket, sig_s3_key, tmp_sig_path)

            local_artifact = f'{builddir}/{img["path"]}'

            print(f"Verifying signature for {local_artifact}")
            try:
                gpg('--verify', tmp_sig_path, local_artifact)
            except subprocess.CalledProcessError as e:
                # allow unknown signatures in stg
                if fedenv != 'stg':
                    raise e

            # move into final location
            shutil.move(tmp_sig_path, f'{local_artifact}.sig')

            # and make S3 object public (XXX: fix robosignatory for this?)
            s3.put_object_acl(Bucket=args.bucket, Key=sig_s3_key,
                              ACL='public-read')


def get_bucket_and_prefix(path):
    split = path.split("/", 1)
    if len(split) == 1:
        return (split[0], "")
    return split


def validate_response(response):
    if response['status'].lower() == 'failure':
        # https://pagure.io/robosignatory/pull-request/38
        if 'failure-message' not in response:
            raise Exception("Signing failed")
        raise Exception(f"Signing failed: {response['failure-message']}")
    assert response['status'].lower() == 'success', str(response)


if __name__ == '__main__':
    sys.exit(main())
