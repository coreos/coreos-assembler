#!/usr/bin/env bash
set -euo pipefail

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh
# shellcheck source=src/libguestfish.sh
. "${dn}"/libguestfish.sh

# Usage: gf-oemid <input image> <output image> OEMID
# Example: gf-oemid fedora-coreos.qcow2 fedora-coreos-aws.qcow2 ec2
#
# This will add the coreos.oem.id=ec2 to the bootloader arguments. Intended to
# be used for Ignition. It's much faster to do this than generate a fresh image
# for each provider (and also helps ensure the images are otherwise identical).

src="$1"
dest="$2"
oemid="$3"

if [[ $src == *.gz ]]; then
    img="$(basename "$src")"
    fatal "Cannot change coreos.oem.id on $img; not an uncompressed image"
fi

set -x
tmpd=$(mktemp -td gf-oemid.XXXXXX)
tmp_dest=${tmpd}/box.img

# Work around for https://github.com/coreos/coreos-assembler/issues/198
# performance monitoring for nested virtualization doesn't work reliably on
# different hypervisors (VMWare, VirtualBox, etc) so just disable the pmu
qemu_wrapper=${tmpd}/qemu-wrapper.sh
cat <<'EOF' > "${qemu_wrapper}"
#!/usr/bin/bash -
i=0
while [ $# -gt 0 ]; do
    case "$1" in
    -cpu)
        shift 2;;
    *)
        args[i]="$1"
        (( i++ ))
        shift ;;
    esac
done
EOF
# Expand QEMU_KVM
# shellcheck disable=SC2086 disable=SC2016
# Only x86_64 supports pmu=off option
if [ "$(arch)" == "x86_64" ]; then
    echo "exec ${QEMU_KVM} "'-cpu host,pmu=off "${args[@]}"' >> "${qemu_wrapper}"
else
    echo "exec ${QEMU_KVM} "'-cpu host "${args[@]}"' >> "${qemu_wrapper}"
fi
chmod +x "${qemu_wrapper}"

# This qemu wrapper doesn't work for some reason on EL7, so just skip
# it on EL7 for now
if [ -n "${ISFEDORA}" ]; then
    export LIBGUESTFS_HV="${qemu_wrapper}"
fi

cp --reflink=auto "${src}" "${tmp_dest}"
# <walters> I commonly chmod a-w VM images
chmod u+w "${tmp_dest}"

coreos_gf_run_mount "${tmp_dest}"

# Inject OEM label in all relevant places:
# * grub config
# * BLS config (for subsequent config regeneration)
# First, the grub config.
if [ "$(coreos_gf exists '/boot/efi')" == 'true' ]; then
    grubcfg_path=/boot/efi/EFI/fedora/grub.cfg
else
    grubcfg_path=/boot/loader/grub.cfg
fi
coreos_gf download "${grubcfg_path}" "${tmpd}"/grub.cfg
# Remove any oemid currently there
sed -i -e 's, coreos.oem.id=[a-zA-Z0-9]*,,g' "${tmpd}"/grub.cfg
# Insert our new oemid
sed -i -e 's,^\(linux16 .*\),\1 coreos.oem.id='"${oemid}"',' "${tmpd}"/grub.cfg
coreos_gf upload "${tmpd}"/grub.cfg "${grubcfg_path}"
# Now the BLS version
blscfg_path=$(coreos_gf glob-expand /boot/loader/entries/ostree-*.conf)
coreos_gf download "${blscfg_path}" "${tmpd}"/bls.conf
# Remove any oemid currently there
sed -i -e 's, coreos.oem.id=[a-zA-Z0-9]*,,g' "${tmpd}"/bls.conf
sed -i -e 's,^\(options .*\),\1 coreos.oem.id='"${oemid}"',' "${tmpd}"/bls.conf
coreos_gf upload "${tmpd}"/bls.conf "${blscfg_path}"

coreos_gf_shutdown

mv "${tmp_dest}" "${dest}"
rm "${tmpd}" -rf
