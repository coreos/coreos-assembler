#!/usr/bin/env bash
set -euo pipefail

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

# Initialize FORCE to 0 and BRANCH/INSTALLER_DIR to an empty string
FORCE=0
INSTALLER_DIR=""
BRANCH=""

print_help() {
    cat 1>&2 <<'EOF'
Usage: coreos-assembler init --help
       coreos-assembler init [--force] [--branch BRANCH] [--installerdir INSTALLER_DIR] GITCONFIG [SUBDIR]

  For example, you can use https://github.com/coreos/fedora-coreos-config
  as GITCONFIG, or fork it.  Another option useful for local development
  (if you're running a shell inside this container) is to pass a file path
  starting with `/` - a symlink to it will be created and then used directly.
  You can specify a branch of a git repo with the `--branch` flag.

  If specified, SUBDIR is a subdirectory of the git repository that should
  contain manifest.yaml and image.yaml (or image.ks).

  If you have the required install ISO and sha256sums already availble,
  you can specify the location of the those files with the `--installerdir` flag.
EOF
}

# Call getopt to validate the provided input.
rc=0
options=$(getopt --options hfb:i: --longoptions help,force,branch:,installerdir: -- "$@") || rc=$?
[ $rc -eq 0 ] || {
    print_help
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
    -h | --help)
        print_help
        exit 0
        ;;
    -f | --force)
        FORCE=1
        ;;
    -b | --branch)
        case "$2" in
            "")
                shift ;;
            *)
                BRANCH="$2"
                shift ;;
        esac
        ;;
    -i | --installerdir)
        case "$2" in
            "")
                shift ;;
            *)
                INSTALLER_DIR=$(readlink -f "$2")
                if [ ! -d "$INSTALLER_DIR" ]; then
                    fatal "installer must exist and be accessible: ${INSTALLER_DIR}"
                fi
                shift ;;
        esac
        ;;
    --)
        shift
        break
        ;;
    *)
        print_help
        fatal "init: unrecognized option: $1"
        exit 1
        ;;
    esac
    shift
done

# If user did not provide a repo then error out
if [ $# = 0 ]; then
    print_help
    fatal "ERROR: Missing GITCONFIG"
    exit 1
fi

# If the current working dir is not empty then error out
# unless force provided
if [ "$FORCE" != "1" ] && [ -n "$(ls -A ./)" ]; then
   fatal "init: current directory is not empty, override with --force"
fi

source=$1; shift
subdir=${1:-}

preflight

if has_privileges; then
    sudo chown "$USER:" .
elif [ ! -w . ]; then
    fatal "init: running unprivileged, and current directory not writable"
fi

# Get target architecture
arch=$(uname -m)
release="28"

# Download url is different for primary and secondary fedora
# Primary Fedora - https://download.fedoraproject.org/pub/fedora/linux/releases/
# Secondary Fedora - https://download.fedoraproject.org/pub/fedora-secondary/releases/
declare -A repository_dirs
repository_dirs[aarch64]=fedora/linux
repository_dirs[armhfp]=fedora/linux
repository_dirs[x86_64]=fedora/linux
repository_dirs[i386]=fedora-secondary
repository_dirs[ppc64le]=fedora-secondary
repository_dirs[s390x]=fedora-secondary

repository_dir=${repository_dirs[$arch]}
INSTALLER=https://download.fedoraproject.org/pub/$repository_dir/releases/$release/Everything/$arch/iso/Fedora-Everything-netinst-$arch-$release-1.1.iso
INSTALLER_CHECKSUM=https://download.fedoraproject.org/pub/$repository_dir/releases/$release/Everything/$arch/iso/Fedora-Everything-$release-1.1-$arch-CHECKSUM

# Overriding install URL
if [ -n "${INSTALLER_URL_OVERRIDE-}" ]; then
    INSTALLER="${INSTALLER_URL_OVERRIDE}"
    info "Overriding the install URL with contents of INSTALLER_URL_OVERRIDE"
fi
# Overriding install checksum URL
if [ -n "${INSTALLER_CHECKSUM_URL_OVERRIDE-}" ]; then
    INSTALLER_CHECKSUM="${INSTALLER_CHECKSUM_URL_OVERRIDE}"
    info "Overriding the install checksum URL with contents of INSTALLER_CHECKSUM_URL_OVERRIDE"
fi


set -x
# Initialize sources (git)
mkdir -p src
(cd src
 if ! test -e config; then
     case "${source}" in
         /*) ln -sr "${source}/${subdir}" config;;
         *) git clone "${source}" config
            if [ -n "${BRANCH}" ]; then
                # On EL7 git doesn't support -C option so use pushd/popd
                pushd config >/dev/null
                git checkout "${BRANCH}"
                popd
            fi
            if [ -n "${subdir}" ]; then
                mv config config-git
                ln -sr config-git/"${subdir}" config
            fi
            ;;
     esac
     manifest=config/manifest.yaml
     if ! [ -f "${manifest}" ]; then
         echo 1>&2 "Failed to find src/${manifest}"
         fatal "If using a custom configuration, be sure it has a manifest.yaml."
     fi
 fi)


installer_bn=$(basename "${INSTALLER}")
checksums_bn=$(basename "${INSTALLER_CHECKSUM}")
mkdir -p installer

if [ -n "${INSTALLER_DIR}" ]; then
    if (cd "${INSTALLER_DIR}" && sha256sum -c "${checksums_bn}"); then
        (cd installer
         cp --reflink=auto "${INSTALLER_DIR}"/"${installer_bn}" .
         cp --reflink=auto "${INSTALLER_DIR}"/"${checksums_bn}" .
        )
    fi
fi

(cd installer
 if ! [ -f "${installer_bn}" ]; then
    mkdir -p tmp
    (
     cd tmp
     curl -L --remote-name-all "${INSTALLER}" "${INSTALLER_CHECKSUM}"
     sha256sum -c "${checksums_bn}"
     mv "${installer_bn}" "${checksums_bn}" ..
    )
    rm tmp -rf
  fi
)

mkdir -p cache
mkdir -p builds
mkdir -p tmp
ostree --repo=repo init --mode=archive
if ! has_privileges && [ ! -f cache/cache.qcow2 ]; then
    qemu-img create -f qcow2 cache/cache.qcow2 10G
    LIBGUESTFS_BACKEND=direct virt-format --filesystem=xfs -a cache/cache.qcow2
fi
