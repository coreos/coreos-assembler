#!/bin/bash
set -euo pipefail

# This script runs the coreos-installer found in the compose itself inside a
# chroot inside a supermin VM. The first argument is the path to the metal
# image. All following arguments are passed as is to coreos-installer.
# The metal image is available as /dev/disk/by-id/virtio-coreos.

if [ ! -f /etc/cosa-supermin ]; then
    dn=$(dirname "$0")
    # shellcheck source=src/cmdlib.sh
    . "${dn}"/cmdlib.sh

    img_src=$1; shift
    if [[ $img_src == *.gz || $img_src == *.xz ]]; then
        img="$(basename "$img_src")"
        fatal "Cannot pack osmet from $img; not an uncompressed image"
    fi

    workdir=$(pwd)

    device_opts=
    if [[ "${img_src}" == *metal4k* ]]; then
        device_opts=",physical_block_size=4096,logical_block_size=4096"
    fi

    # stamp it with "coreos" serial so we find it easily in the VM
    runvm -drive "if=none,id=coreos,format=raw,readonly=on,file=${img_src}" \
        -device "virtio-blk,serial=coreos,drive=coreos${device_opts}" -- \
        /usr/lib/coreos-assembler/runvm-coreos-installer "$@"

    exit 0
fi

# This runs inside supermin

mkdir -p /sysroot
rootfs=/dev/disk/by-id/virtio-coreos-part4
mount -o ro "${rootfs}" /sysroot
osname=$(ls /sysroot/ostree/deploy)
deploydir=$(find "/sysroot/ostree/deploy/$osname/deploy" -mindepth 1 -maxdepth 1 -type d)

# we want to use the coreos-installer from the target system but we need to
# chroot into it to avoid linking issues
for mnt in dev proc sys run var tmp; do
    mount --rbind /$mnt "${deploydir}/$mnt"
done

# some dirs which we expect to exist already
mkdir -p "${deploydir}/var/"{home,mnt,opt,roothome,srv}

# and pass through the workdir itself
workdir=$(pwd)
mkdir -p "${deploydir}/${workdir}/"
mount --bind "${workdir}" "${deploydir}/${workdir}"

# echo back the invocation
set -x

RUST_BACKTRACE=full chroot "${deploydir}" env -C "${workdir}" coreos-installer "$@"
