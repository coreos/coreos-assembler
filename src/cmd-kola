#!/usr/bin/env python3

import argparse
import re
import subprocess
import os
import platform
import sys
import yaml

# Just test these boot to start with.  In the future we should at least
# do ostree upgrades with uefi etc.  But we don't really need the *full*
# suite...if podman somehow broke with nvme or uefi I'd be amazed and impressed.
BASIC_SCENARIOS = ["nvme=true", "firmware=uefi", "firmware=uefi-secure"]
arch = platform.machine()

cosa_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, cosa_dir)

from cosalib import cmdlib

basearch = cmdlib.get_basearch()

# Parse args and dispatch
parser = argparse.ArgumentParser()
parser.add_argument("--build", help="Build ID")
parser.add_argument("--basic-qemu-scenarios", help="Run the basic test across uefi-secure,nvme etc.", action='store_true')
parser.add_argument("--output-dir", help="Output directory")
parser.add_argument("--upgrades", help="Run upgrade tests", action='store_true')
parser.add_argument("subargs", help="Remaining arguments for kola", nargs='*',
                    default=[])
args, unknown_args = parser.parse_known_args()

if args.upgrades:
    default_cmd = 'run-upgrade'
    default_output_dir = "tmp/kola-upgrade"
else:
    default_cmd = 'run'
    default_output_dir = "tmp/kola"

# XXX: teach to kola to auto-detect based on prefix; see discussions in
# https://github.com/coreos/coreos-assembler/pull/85
kolaargs = ['kola']

# automatically add tests from denylist specified in the src config
try:
    with open("src/config/kola-denylist.yaml") as f:
        denylist = yaml.safe_load(f)
        # also load the FCOS stream name if applicable in case we need it below
        with open("src/config/manifest.yaml") as g:
            manifest = yaml.safe_load(g)
            stream = manifest.get('add-commit-metadata', {}).get('fedora-coreos.stream')
        for obj in (denylist or []):
            if basearch not in obj.get('arches', [basearch]):
                continue
            if stream is not None and stream not in obj.get('streams', [stream]):
                continue
            print(f"⚠️  Skipping kola test pattern \"{obj['pattern']}\":")
            print(f"⚠️  {obj['tracker']}")
            kolaargs.extend(['--denylist-test', obj['pattern']])
except FileNotFoundError:
    pass

r = re.compile("-p(=.+)?|--platform(=.+)?")
platformargs = list(filter(r.match, unknown_args))

if os.getuid() != 0 and len(platformargs) == 0:
    kolaargs.extend(['-p', 'qemu-unpriv'])

if args.build is not None:
    kolaargs.extend(['--build', args.build])
outputdir = args.output_dir or default_output_dir
kolaargs.extend(['--output-dir', outputdir])
subargs = args.subargs or [default_cmd]
kolaargs.extend(subargs)
kolaargs.extend(unknown_args)

if args.basic_qemu_scenarios:
    if arch == "x86_64":
        for scenario in BASIC_SCENARIOS:
            subargs = kolaargs + ['--qemu-' + scenario, 'basic']
            print(subprocess.list2cmdline(subargs), flush=True)
            subprocess.check_call(subargs)
    else:
        # Basic qemu scenarios using nvme and uefi
        # are not supported on multi-arch
        subargs = kolaargs + ['basic']
        print(subprocess.list2cmdline(subargs), flush=True)
        subprocess.check_call(subargs)
elif args.upgrades:
    if '--qemu-image-dir' not in unknown_args:
        os.makedirs('tmp/kola-qemu-cache', exist_ok=True)
        kolaargs.extend(['--qemu-image-dir', 'tmp/kola-qemu-cache'])
    kolaargs.extend(['-v', '--find-parent-image'])
    print(subprocess.list2cmdline(kolaargs), flush=True)
    os.execvp('kola', kolaargs)
else:
    # flush before exec; see https://docs.python.org/3.7/library/os.html#os.execvpe
    print(subprocess.list2cmdline(kolaargs), flush=True)
    os.execvp('kola', kolaargs)
