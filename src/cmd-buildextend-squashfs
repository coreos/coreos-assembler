#!/usr/bin/python3 -u
# An operation that mutates a build by generating a squashfs rootfs.

import os
import sys
import json
import yaml
import shutil
import argparse

sys.path.insert(0, '/usr/lib/coreos-assembler')
from cmdlib import run_supermin, run_verbose, write_json, sha256sum_file

# Parse args and dispatch
parser = argparse.ArgumentParser()
parser.add_argument("--build", help="Build ID")
args = parser.parse_args()

# default to latest build if not specified
if not args.build:
    with open('builds/builds.json') as f:
        j = json.load(f)
        args.build = j['builds'][0]

print(f"Targeting build: {args.build}")

with open('src/config/manifest.yaml') as f:
    manifest = yaml.safe_load(f)

base_name = manifest['rojig']['name']
img_prefix = f'{base_name}-{args.build}'
artifact_name = f'{img_prefix}.rootfs.squashfs'

builddir = f'builds/{args.build}'
buildmeta_path = f'{builddir}/meta.json'
with open(buildmeta_path) as f:
    buildmeta = json.load(f)

tmpdir = 'tmp/buildpost-squashfs'
if os.path.isdir(tmpdir):
    shutil.rmtree(tmpdir)
os.mkdir(tmpdir)


def generate_squashfs(workdir):
    ref = buildmeta['ref']
    tmp_img = f'{tmpdir}/{artifact_name}'
    script = f'''#!/usr/bin/env bash
set -xeuo pipefail
ostree checkout --repo {workdir}/repo/ {ref} /tmp/rootfs
/sbin/mksquashfs /tmp/rootfs {workdir}/{tmp_img}
    '''

    run_supermin(workdir, script)
    checksum = sha256sum_file(tmp_img)
    buildmeta['images']['squashfs'] = {
        'path': artifact_name,
        'sha256': checksum
    }
    os.rename(tmp_img, f"{builddir}/{artifact_name}")
    write_json(buildmeta_path, buildmeta)
    print(f"Updated: {buildmeta_path}")


# Do it!
generate_squashfs(os.getcwd())
