From 3eaffe169c1c99ef65bb2a8b24f867416e0de4d2 Mon Sep 17 00:00:00 2001
From: Dusty Mabe <dusty@dustymabe.com>
Date: Wed, 10 Jan 2024 11:12:51 -0500
Subject: [PATCH 5/5] Create stages/org.osbuild.chattr stage

Add or remove the immutable bit to the specified mount directory.

The need we have for this right now is for the CoreOS builds where
the immutable bit being set on an OSTree deployment root doesn't
survive the `cp -a --reflink=auto` in the org.osbuild.copy stage when
being copied from the directory tree into the mounted XFS filesystem
we created on the disk image. Thus we have to workaround this loss
of attribute by applying the attribute directly on the mounted
filesystem from the disk.
---
 stages/org.osbuild.chattr | 101 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 101 insertions(+)
 create mode 100755 stages/org.osbuild.chattr

diff --git a/stages/org.osbuild.chattr b/stages/org.osbuild.chattr
new file mode 100755
index 00000000..6e4cf03c
--- /dev/null
+++ b/stages/org.osbuild.chattr
@@ -0,0 +1,101 @@
+#!/usr/bin/python3
+"""
+Runs `chattr` to set file/directory attributes.
+"""
+
+import os
+import subprocess
+import sys
+from typing import Dict
+from urllib.parse import ParseResult, urlparse
+
+import osbuild.api
+
+SCHEMA_2 = r"""
+"options": {
+  "additionalProperties": false,
+  "required": ["path", "immutable"],
+  "properties": {
+    "immutable": {
+      "type": "boolean",
+      "description": "Make the file/directory immutable",
+      "default": true
+    },
+    "path": {
+      "oneOf": [
+        {
+          "type": "string",
+          "description": "The destination, if a mount",
+          "pattern": "^mount:\/\/[^\/]+\/"
+        },
+        {
+          "type": "string",
+          "description": "The destination, if a tree",
+          "pattern": "^tree:\/\/\/"
+        }
+      ]
+    }
+  }
+},
+"devices": {
+  "type": "object",
+  "additionalProperties": true
+},
+"mounts": {
+  "type": "array"
+}
+"""
+
+
+def parse_mount(url: ParseResult, args: Dict):
+    name = url.netloc
+    if name:
+        root = args["mounts"].get(name, {}).get("path")
+        if not root:
+            raise ValueError(f"Unknown mount '{name}'")
+    else:
+        root = args["paths"]["mounts"]
+
+    return root
+
+
+def parse_location(location, args):
+    url = urlparse(location)
+
+    scheme = url.scheme
+    if scheme == "tree":
+        root = args["tree"]
+    elif scheme == "mount":
+        root = parse_mount(url, args)
+    else:
+        raise ValueError(f"Unsupported scheme '{scheme}'")
+
+    assert url.path.startswith("/")
+
+    path = os.path.relpath(url.path, "/")
+    path = os.path.join(root, path)
+    path = os.path.normpath(path)
+
+    if url.path.endswith("/"):
+        path = os.path.join(path, ".")
+
+    return path
+
+
+def main(args, options):
+    path = options["path"]
+    immutable = options["immutable"]
+
+    dst = parse_location(path, args)
+    if immutable:
+        subprocess.run(["chattr", "+i", dst], check=True)
+    elif not immutable:
+        subprocess.run(["chattr", "-i", dst], check=True)
+
+    return 0
+
+
+if __name__ == '__main__':
+    _args = osbuild.api.arguments()
+    r = main(_args, _args["options"])
+    sys.exit(r)
-- 
2.43.0

