#!/usr/bin/env bash
set -euo pipefail
# Forked from https://github.com/coreos/scripts/blob/master/build_library/qemu_template.sh
# Changed to have command line arguments, drop non-x86_64/non-KVM support
# Automatically uses `-snapshot` if the target disk isn't writable
# Uses -nographic by default, and most importantly, contains a default
# Ignition config that auto-logins on the console


dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh
# shellcheck source=src/libguestfish.sh
. "${dn}"/libguestfish.sh

BUILDID=latest
IMAGE_TYPE=qemu
HOSTNAME=
VM_DISK=
DISK_CHANNEL=virtio
VM_MEMORY=2048
VM_NCPUS="${VM_NCPUS:-${QEMU_PROCS}}"
VM_SRV_MNT=
TARGET_USER=core
FIRMWARE=bios
USAGE="Usage: $0 [-d /path/to/disk.qcow2] [--] [qemu options...]
Options:
    -b --buildid          Target buildid (default latest)
    -I --imgtype          Target image type (qemu, metal, etc.  Default qemu)
    -d DISK               Root disk drive (won't be changed by default)
    --disk-channel TYPE   Communication mechanism for root device: virtio, nvme
    -i FILE               File containing an Ignition config to merge into the default config
    --srv src             Mount (via 9p) src on the host as /var/srv in guest
    -m MB                 RAM size in MB (2048)
    --hostname NAME       Set hostname via DHCP
    --size GB             Disk size in GB (matches base by default)
    --user USERNAME       Create user USERNAME via Ignition (if not already extant) and log in as that user
    -h                    this ;-)
    --uefi                Boot using uefi (x86_64 only, implied on arm)
    --uefi-secure         Boot using uefi with secure boot enabled (x86_64/arm only)

This script is a wrapper around qemu for starting CoreOS virtual machines,
it will auto-log you into the console, and by default for read-only disk
images makes a transient snapshot. Unless a disk image is passed with -d, it
will launch the latest build.

Any arguments after -- will be passed through to qemu. See the qemu(1) man page
for more details.
"

die(){
    echo "${1}" 1>&2
    exit 1
}

while [ $# -ge 1 ]; do
    case "$1" in
        -b|--buildid)
            BUILDID="$2"
            shift 2 ;;
        -I|--imgtype)
            IMAGE_TYPE="$2"
            shift 2 ;;
        -d)
            VM_DISK="$2"
            shift 2 ;;
        --disk-channel)
            DISK_CHANNEL="$2"
            shift 2 ;;
        -i|--ignition-config)
            IGNITION_CONFIG_FILE="$2"
            shift 2 ;;
        --srv)
            VM_SRV_MNT="$2"
            shift 2 ;;
        -m)
            VM_MEMORY="$2"
            shift 2 ;;
        --user)
            TARGET_USER="$2"
            shift 2 ;;
        --hostname)
            HOSTNAME="$2"
            shift 2 ;;
        -v|--verbose)
            set -x
            shift ;;
        --uefi)
            FIRMWARE=uefi
            shift ;;
        --uefi-secure)
            FIRMWARE=uefi-secure
            shift ;;
        -h|--help)
            echo "$USAGE"
            exit ;;
        --)
            shift
            break ;;
        *)
            die "Unknown argument $1";;
    esac
done

kola_args=( )

preflight

if [ -z "${VM_DISK}" ]; then
    if ! [ -d "builds/${BUILDID}" ]; then
        die "No builds/${BUILDID}"
    fi
    VM_DISK=$(cosa meta --build="${BUILDID}" --image-path="${IMAGE_TYPE}")
fi

# Make sure disk path is absolute; note we don't realpath
# the full disk name in order to avoid canonicalizing the disk name
# itself, since we dispatch on that to detect e.g. Ignition version,
# and we want to support use of e.g. git-annex and tools like that.
vmdiskdir=$(dirname "${VM_DISK}")
VM_DISK=$(realpath "${vmdiskdir}")/$(basename "${VM_DISK}")

# For future me: if you are in here wondering where this value is ultimately
# derived from, it exists in mantle/sdk/ignversion.go via `TargetIgnitionVersionFromName()`
ignition_version=$(disk_ignition_version "${VM_DISK}")
ign_validate="ignition-validate"

# Set name to coreos to be shorter, and default CPUs to host
set -- -name coreos -smp "${VM_NCPUS}" "$@"

systemd_units=
append_systemd_unit() {
    if [ -z "${systemd_units}" ]; then
        systemd_units="${1}"
    else
        systemd_units="${systemd_units},$1"
    fi
}

if [ -n "${VM_SRV_MNT}" ]; then
    set -- --fsdev local,id=var-srv,path="${VM_SRV_MNT}",security_model=mapped,readonly \
        -device virtio-9p-"${devtype}",fsdev=var-srv,mount_tag=/var/srv "$@"
    # The dependency changes are hacks around https://github.com/coreos/fedora-coreos-tracker/issues/223
    append_systemd_unit '{
"name": "var-srv.mount",
"enabled": true,
"contents": "[Unit]\nDefaultDependencies=no\nAfter=systemd-tmpfiles-setup.service\nBefore=basic.target\n[Mount]\nWhat=/var/srv\nWhere=/var/srv\nType=9p\nOptions=ro,trans=virtio,version=9p2000.L\n[Install]\nWantedBy=multi-user.target\n"
}'
fi

if [ -n "${IGNITION_CONFIG_FILE:-}" ]; then
    user_config=$(base64 --wrap 0 "${IGNITION_CONFIG_FILE}")
    user_config=$(cat << EOF
,"config": {
    "merge": [{
        "source": "data:text/plain;base64,$user_config"
    }]
}
EOF
    )
else
    user_config=""
fi

coreos_assembler_sysctl=$(cat << 'EOF' | base64 --wrap 0
# Written during `coreos-assembler run`.

# Right now, we're running at the default log level, which is DEBUG (7).
# The text gets interspersed with user input/program output on the tty.
# Bump the default to ERROR (3).
kernel.printk = 3 4 1 7
EOF
)

coreos_assembler_motd=$(cat << 'EOF' | base64 --wrap 0
ICMP traffic (ping) does not work with QEMU and user mode networking.
To exit, press Ctrl-A and then X.

EOF
)

# generate a string like rows XX columns XX for stty
rowcol=$(stty -a | tr ';' '\n' | grep -e 'rows\|columns' | tr '\n' ' ' )
rowcol=$(echo "stty ${rowcol}" | base64 --wrap 0)

append_systemd_unit "{
    \"name\": \"serial-getty@${DEFAULT_TERMINAL}.service\",
    \"dropins\": [
        {
            \"name\": \"autologin-core.conf\",
            \"contents\": \"[Service]\\nTTYVTDisallocate=no\\nExecStart=\\nExecStart=-/usr/sbin/agetty --autologin ${TARGET_USER} --noclear %I \$TERM\\n\"
        }
    ]
}"

f=$(mktemp)
cat > "${f}" <<EOF
{
    "ignition": {
        "version": "3.0.0"${user_config}
    },
    "storage": {
        "files": [
            {
                "path": "/etc/sysctl.d/10-coreos-assembler.conf",
                "contents": { "source": "data:text/plain;base64,${coreos_assembler_sysctl}" },
                "mode": 420
            },
            {
                "path": "/etc/motd",
                "append": [
                    { "source": "data:text/plain;base64,${coreos_assembler_motd}" }
                ],
                "mode": 420
            },
            {
                "path": "/home/core/.bashrc",
                "append": [
                    { "source": "data:text/plain;base64,${rowcol}" }
                ]
            }
        ]
    },
    "passwd": {
        "users": [
            {
                "name": "${TARGET_USER}"
            }
        ]
    },
    "systemd": {
        "units": [
            ${systemd_units}
        ]
    }
}
EOF
if [ "${ignition_version}" = "2.2.0" ]; then
    ign_validate="true"
    spec2f=$(mktemp)
    kola ign-convert2 < "${f}" > "${spec2f}"
    mv "${spec2f}" "${f}"
fi

# We're using fd 9 to avoid clashing with kola's internal qemu fd mappings;
# this is a bug.
exec 9<>"${f}"
rm -f "${f}"
IGNITION_CONFIG_FILE=/proc/self/fd/9

if ! ${ign_validate} "${IGNITION_CONFIG_FILE}"; then
    jq . < "${IGNITION_CONFIG_FILE}"
    exit 1
fi

case "${DISK_CHANNEL}" in
    virtio) ;;
    nvme) kola_args+=('--qemu-nvme');;
    *) die "Invalid --disk-channel ${DISK_CHANNEL}" ;;
esac

case "${FIRMWARE}" in
    bios) ;;
    *) kola_args+=("--qemu-firmware=${FIRMWARE}")
esac

if [ -n "${HOSTNAME}" ]; then
    kola_args+=("--hostname=${HOSTNAME}")
fi

# for the metal images, there's no other way but to inject into /boot
case "${IMAGE_TYPE}" in
    qemu) ;;
    *) kola_args+=('--inject-ignition');;
esac

set -x
exec kola qemuexec -U --qemu-image "${VM_DISK}" --ignition "${IGNITION_CONFIG_FILE}" --memory "${VM_MEMORY}" "${kola_args[@]}" -- "$@"
