#!/usr/bin/env bash
set -euo pipefail
# Forked from https://github.com/coreos/scripts/blob/master/build_library/qemu_template.sh
# Changed to have command line arguments, drop non-x86_64/non-KVM support
# Automatically uses `-snapshot` if the target disk isn't writable
# Uses -nographic by default, and most importantly, contains a default
# Ignition config that auto-logins on the console


dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

VM_DISK=
VM_MEMORY=2048
VM_PERSIST=0
VM_NCPUS="${VM_NCPUS:-$(nproc)}"
VM_SRV_MNT=
SSH_PORT=${SSH_PORT:-}
USAGE="Usage: $0 /path/to/disk.qcow2 [--] [qemu options...]
Options:
    -d DISK     Root disk drive (won't be changed by default)
    --persist   Don't create a temporary snapshot
    -i FILE     File containing an Ignition config
    --srv src   Mount (via 9p) src on the host as /var/srv in guest
    -m MB       RAM size in MB (2048)
    -p PORT     The port on localhost to map to the VM's sshd. [2222]
    -h          this ;-)

This script is a wrapper around qemu for starting CoreOS virtual machines,
it will auto-log you into the console, and by default for read-only disk
images makes a transient snapshot.

Any arguments after -- will be passed through to qemu. See the qemu(1) man page
for more details.
"

die(){
    echo "${1}" 1>&2
    exit 1
}

while [ $# -ge 1 ]; do
    case "$1" in
        -d)
            VM_DISK="$2"
            shift 2 ;;
        --persist)
            VM_PERSIST=1
            shift 1 ;;
        -i|--ignition-config)
            IGNITION_CONFIG_FILE="$2"
            shift 2 ;;
        --srv)
            VM_SRV_MNT="$2"
            shift 2 ;;
        -m)
            VM_MEMORY="$2"
            shift 2 ;;
        -p|--ssh-port)
            SSH_PORT="$2"
            shift 2 ;;
        -v|--verbose)
            set -x
            shift ;;
        -h|--help)
            echo "$USAGE"
            exit ;;
        --)
            shift
            break ;;
        *)
            die "Unknown argument $1";;
    esac
done

set -x
preflight

if [ -z "${VM_DISK}" ]; then
    if [ -L ./builds/latest ]; then
        latest_build=$(readlink builds/latest)
        VM_DISK=$(ls builds/"${latest_build}"/*-"${latest_build}"-qemu.qcow2)
    else
        die "No builds/latest, and no -d argument provided"
    fi
fi

# Emulate the host CPU closely in both features and cores.
set -- -machine accel=kvm -cpu host -smp "${VM_NCPUS}" "$@"

if [ -n "${VM_SRV_MNT}" ]; then
    set -- --fsdev local,id=var-srv,path="${VM_SRV_MNT}",security_model=mapped,readonly \
        -device virtio-9p-pci,fsdev=var-srv,mount_tag=/var/srv "$@"
    ign_var_srv_mount=',{
"name": "var-srv.mount",
"enabled": true,
"contents": "[Mount]\nWhat=/var/srv\nWhere=/var/srv\nType=9p\nOptions=ro,trans=virtio,version=9p2000.L\n[Install]\nWantedBy=multi-user.target\n"
}'
else
    ign_var_srv_mount=""
fi


coreos_assembler_sysctl=$(cat << 'EOF' | base64 --wrap 0
# Written during `coreos-assembler run`.

# Right now, we're running at the default log level, which is DEBUG (7).
# The text gets interspersed with user input/program output on the tty.
# Bump the default to ERROR (3).
kernel.printk = 3 4 1 7
EOF
)

if [ -z "${IGNITION_CONFIG_FILE:-}" ]; then
    f=$(mktemp)
    cat > "${f}" <<EOF
{
    "ignition": {
        "version": "3.0.0"
    },
    "storage": {
        "files": [
            {
                "path": "/etc/sysctl.d/10-coreos-assembler.conf",
                "contents": { "source": "data:text/plain;base64,${coreos_assembler_sysctl}" },
                "mode": 420
            }
        ]
    },
    "systemd": {
        "units": [
            {
                "name": "serial-getty@ttyS0.service",
                "dropins": [
                    {
                        "name": "autologin-core.conf",
                        "contents": "[Service]\\nTTYVTDisallocate=no\\nExecStart=\\nExecStart=-/usr/sbin/agetty --autologin core --noclear %I \$TERM\\n"
                    }
                ]
            },
            {
                "name": "serial-getty-motd.service",
                "enabled": true,
                "contents": "[Unit]\\nDescription=Helper message to exit QEMU monitor to /etc/motd\\nBefore=getty.target\\n[Service]\\nType=oneshot\\nExecStart=/bin/sh -c '/usr/bin/echo \\"ICMP traffic (ping) does not work with QEMU and user mode networking.\\\\nTo exit, press Ctrl-A and then X.\\\\n\\" >> /etc/motd'\\n[Install]\\nWantedBy=getty.target\\n"
            }
            ${ign_var_srv_mount}
        ]
    }
}
EOF
    exec 3<>"${f}"
    rm -f "${f}"
    IGNITION_CONFIG_FILE=/proc/self/fd/3

    if ! ignition-validate "${IGNITION_CONFIG_FILE}"; then
        cat "${IGNITION_CONFIG_FILE}"
        exit 1
    fi
fi
set -- -fw_cfg name=opt/com.coreos/config,file="${IGNITION_CONFIG_FILE}" "$@"

if [ -n "${SSH_PORT}" ]; then
   hostfwd=",hostfwd=tcp::${SSH_PORT}-:22"
fi

if [ "${VM_PERSIST}" = 0 ]; then
    set -- -snapshot "$@"
    vm_drive_args=",cache=unsafe"
fi

set -- -drive if=virtio"${vm_drive_args:-}",file="${VM_DISK}" "$@"

# There is no BIOS on aarch64, so we need a firmware to boot the system
if [ "$(arch)" == "aarch64" ]; then
    set -- -bios /usr/share/AAVMF/AAVMF_CODE.fd "$@"
fi

# shellcheck disable=SC2086
exec ${QEMU_KVM} -name coreos -m "${VM_MEMORY}" -nographic \
              -netdev user,id=eth0,hostname=coreos"${hostfwd:-}" \
              -device virtio-net-pci,netdev=eth0 \
              -object rng-random,filename=/dev/urandom,id=rng0 -device virtio-rng-pci,rng=rng0 \
              "$@"
