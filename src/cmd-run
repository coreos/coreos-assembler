#!/usr/bin/env bash
set -euo pipefail
# Forked from https://github.com/coreos/scripts/blob/master/build_library/qemu_template.sh
# Changed to have command line arguments, drop non-x86_64/non-KVM support
# Automatically uses `-snapshot` if the target disk isn't writable
# Uses -nographic by default, and most importantly, contains a default
# Ignition config that auto-logins on the console


dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh
# shellcheck source=src/libguestfish.sh
. "${dn}"/libguestfish.sh

BUILDID=latest
IMAGE_TYPE=qemu
VM_DISK=
VM_MEMORY=2048
VM_DISKSIZE=
VM_PERSIST_IMG=
VM_NCPUS="${VM_NCPUS:-$(nproc)}"
VM_SRV_MNT=
SSH_PORT=${SSH_PORT:-}
UEFI=0
BOOT_INJECT=0
SECURE=0
USAGE="Usage: $0 [-d /path/to/disk.qcow2] [--] [qemu options...]
Options:
    -b --buildid          Target buildid (default latest)
    -I --imgtype          Target image type (qemu, metal, etc.  Default qemu)
    -d DISK               Root disk drive (won't be changed by default)
    --persist-to-img IMG  Persist changes to a separate image
    -i FILE               File containing an Ignition config to merge into the default config
    --srv src             Mount (via 9p) src on the host as /var/srv in guest
    -m MB                 RAM size in MB (2048)
    --size GB             Disk size in GB (matches base by default)
    -p PORT               The port on localhost to map to the VM's sshd. [2222]
    -h                    this ;-)
    -B --boot-inject      Force Ignition injection into /boot (useful for running metal images)
    --uefi                Boot using uefi (x86_64 only, implied on arm)
    --uefi-secure         Boot using uefi with secure boot enabled (x86_64/arm only)

This script is a wrapper around qemu for starting CoreOS virtual machines,
it will auto-log you into the console, and by default for read-only disk
images makes a transient snapshot. Unless a disk image is passed with -d, it
will launch the latest build.

Any arguments after -- will be passed through to qemu. See the qemu(1) man page
for more details.
"

die(){
    echo "${1}" 1>&2
    exit 1
}

while [ $# -ge 1 ]; do
    case "$1" in
        -b|--buildid)
            BUILDID="$2"
            shift 2 ;;
        -I|--imgtype)
            IMAGE_TYPE="$2"
            shift 2 ;;
        -d)
            VM_DISK="$2"
            shift 2 ;;
        --persist-to-img)
            VM_PERSIST_IMG="$2"
            shift 2 ;;
        -i|--ignition-config)
            IGNITION_CONFIG_FILE="$2"
            shift 2 ;;
        --srv)
            VM_SRV_MNT="$2"
            shift 2 ;;
        -m)
            VM_MEMORY="$2"
            shift 2 ;;
        --size)
            VM_DISKSIZE="${2}G"
            shift 2 ;;
        -p|--ssh-port)
            SSH_PORT="$2"
            shift 2 ;;
        -v|--verbose)
            set -x
            shift ;;
        --uefi)
            UEFI=1
            shift ;;
        --uefi-secure)
            SECURE=1
            shift ;;
        -B|--boot-inject)
            BOOT_INJECT=1
            shift ;;
        -h|--help)
            echo "$USAGE"
            exit ;;
        --)
            shift
            break ;;
        *)
            die "Unknown argument $1";;
    esac
done

preflight

if [ "$UEFI" == 1 ] && [ "$SECURE" == 1 ]; then
	die "cannot specify --uefi and --uefi-secure"
fi

if [ -z "${VM_DISK}" ]; then
    if ! [ -d "builds/${BUILDID}" ]; then
        die "No builds/${BUILDID}"
    fi
    builddir=$(get_build_dir "${BUILDID}")
    diskpath=$(jq -r '.["images"]["'"${IMAGE_TYPE}"'"]["path"]' < "${builddir}/meta.json")
    if [ "${diskpath}" = "null" ]; then
        die "No image ${IMAGE_TYPE} in build ${BUILDID}"
    fi
    VM_DISK=${builddir}/${diskpath}
    # For other image types (most usefully for metal) force
    # on injection into the /boot partition, since Ignition
    # won't pull from qemu userdata.
    if [ "${IMAGE_TYPE}" != qemu ]; then
        BOOT_INJECT=1
    fi
fi

# Make sure disk path is absolute; note we don't realpath
# the full disk name in order to avoid canonicalizing the disk name
# itself, since we dispatch on that to detect e.g. Ignition version,
# and we want to support use of e.g. git-annex and tools like that.
vmdiskdir=$(dirname "${VM_DISK}")
VM_DISK=$(realpath "${vmdiskdir}")/$(basename "${VM_DISK}")

ignition_version=$(disk_ignition_version "${VM_DISK}")
ign_validate="ignition-validate"

# Emulate the host CPU closely in both features and cores.
# We don't care about migration for this.
set -- -machine accel=kvm -cpu host -smp "${VM_NCPUS}" "$@"

if [ -n "${VM_SRV_MNT}" ]; then
    set -- --fsdev local,id=var-srv,path="${VM_SRV_MNT}",security_model=mapped,readonly \
        -device virtio-9p-"${devtype}",fsdev=var-srv,mount_tag=/var/srv "$@"
    # The dependency changes are hacks around https://github.com/coreos/fedora-coreos-tracker/issues/223
    ign_var_srv_mount=',{
"name": "var-srv.mount",
"enabled": true,
"contents": "[Unit]\nDefaultDependencies=no\nAfter=systemd-tmpfiles-setup.service\nBefore=basic.target\n[Mount]\nWhat=/var/srv\nWhere=/var/srv\nType=9p\nOptions=ro,trans=virtio,version=9p2000.L\n[Install]\nWantedBy=multi-user.target\n"
}'
else
    ign_var_srv_mount=""
fi

if [ -n "${IGNITION_CONFIG_FILE:-}" ]; then
    user_config=$(base64 --wrap 0 "${IGNITION_CONFIG_FILE}")
    user_config=$(cat << EOF
,"config": {
    "merge": [{
        "source": "data:text/plain;base64,$user_config"
    }]
}
EOF
    )
else
    user_config=""
fi

coreos_assembler_sysctl=$(cat << 'EOF' | base64 --wrap 0
# Written during `coreos-assembler run`.

# Right now, we're running at the default log level, which is DEBUG (7).
# The text gets interspersed with user input/program output on the tty.
# Bump the default to ERROR (3).
kernel.printk = 3 4 1 7
EOF
)

coreos_assembler_motd=$(cat << 'EOF' | base64 --wrap 0
ICMP traffic (ping) does not work with QEMU and user mode networking.
To exit, press Ctrl-A and then X.

EOF
)

# generate a string like rows XX columns XX for stty
rowcol=$(stty -a | tr ';' '\n' | grep -e 'rows\|columns' | tr '\n' ' ' )
rowcol=$(echo "stty ${rowcol}" | base64 --wrap 0)

f=$(mktemp)
cat > "${f}" <<EOF
{
    "ignition": {
        "version": "3.0.0"${user_config}
    },
    "storage": {
        "files": [
            {
                "path": "/etc/sysctl.d/10-coreos-assembler.conf",
                "contents": { "source": "data:text/plain;base64,${coreos_assembler_sysctl}" },
                "mode": 420
            },
            {
                "path": "/etc/motd",
                "append": [
                    { "source": "data:text/plain;base64,${coreos_assembler_motd}" }
                ],
                "mode": 420
            },
            {
                "path": "/home/core/.bashrc",
                "append": [
                    { "source": "data:text/plain;base64,${rowcol}" }
                ]
            }
        ]
    },
    "systemd": {
        "units": [
            {
                "name": "serial-getty@${DEFAULT_TERMINAL}.service",
                "dropins": [
                    {
                        "name": "autologin-core.conf",
                        "contents": "[Service]\\nTTYVTDisallocate=no\\nExecStart=\\nExecStart=-/usr/sbin/agetty --autologin core --noclear %I \$TERM\\n"
                    }
                ]
            }
            ${ign_var_srv_mount}
        ]
    }
}
EOF
if [ "${ignition_version}" = "2.2.0" ]; then
    ign_validate="true"
    spec2f=$(mktemp)
    /usr/lib/coreos-assembler/incomplete-hack-ign-3to2 "${f}" > "${spec2f}"
    mv "${spec2f}" "${f}"
fi

exec 3<>"${f}"
rm -f "${f}"
IGNITION_CONFIG_FILE=/proc/self/fd/3

if ! ${ign_validate} "${IGNITION_CONFIG_FILE}"; then
    jq . < "${IGNITION_CONFIG_FILE}"
    exit 1
fi

if [ -z "${VM_PERSIST_IMG}" ]; then
    VM_IMG=$(mktemp -p "${TMPDIR:-/var/tmp}")
    # shellcheck disable=SC2086
    qemu-img create -q -f qcow2 -b "${VM_DISK}" "${VM_IMG}" ${VM_DISKSIZE}
else
    echo "Re-using existing ${VM_PERSIST_IMG}"
    VM_IMG=${VM_PERSIST_IMG}
fi

if [ "$(arch)" == "ppc64le" ] || [ "$(arch)" == "s390x" ] || [ "${BOOT_INJECT}" = 1 ]; then
    echo "Injecting /boot/ignition/config.ign via libguestfs..."
    coreos_gf_run_mount "${VM_IMG}"
    coreos_gf mkdir-p /boot/ignition
    coreos_gf upload ${IGNITION_CONFIG_FILE} /boot/ignition/config.ign
    #TODO coreos_gf_relabel /boot/ignition/config.ign
    coreos_gf_shutdown
    echo "done"
else
    set -- -fw_cfg name=opt/com.coreos/config,file="${IGNITION_CONFIG_FILE}" "$@"
fi

if [ -z "${VM_PERSIST_IMG}" ]; then
    exec 4<> "${VM_IMG}"
    rm -f "${VM_IMG}"
    VM_IMG=/proc/self/fd/4
fi

if [ -n "${SSH_PORT}" ]; then
   hostfwd=",hostfwd=tcp::${SSH_PORT}-:22"
fi

set -- -drive if=virtio,file="${VM_IMG}" "$@"

# There is no BIOS on aarch64, so we need a firmware to boot the system
if [ "$(arch)" == "aarch64" ]; then
    set -- -bios /usr/share/AAVMF/AAVMF_CODE.fd "$@"
fi

if [ "$UEFI" == "1" ]; then
    cp /usr/share/edk2/ovmf/OVMF_VARS.fd /tmp/vars.fd
    exec 5<> /tmp/vars.fd
    rm /tmp/vars.fd
    set -- -drive file=/usr/share/edk2/ovmf/OVMF_CODE.fd,if=pflash,format=raw,unit=0,readonly=on "$@"
    set -- -drive file=/proc/self/fd/5,if=pflash,format=raw,unit=1,readonly=off "$@"
    set -- -machine q35 "$@"
fi

if [ "$SECURE" == "1" ]; then
    cp /usr/share/edk2/ovmf/OVMF_VARS.secboot.fd /tmp/vars.fd
    exec 5<> /tmp/vars.fd
    rm /tmp/vars.fd
    set -- -drive file=/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd,if=pflash,format=raw,unit=0,readonly=on "$@"
    set -- -drive file=/proc/self/fd/5,if=pflash,format=raw,unit=1,readonly=off "$@"
    set -- -machine q35 "$@"
fi

# shellcheck disable=SC2086
exec ${QEMU_KVM} -name coreos -m "${VM_MEMORY}" -nographic \
              -netdev user,id=eth0,hostname=coreos"${hostfwd:-}" \
              -device virtio-net-"${devtype}",netdev=eth0 \
              -object rng-random,filename=/dev/urandom,id=rng0 -device virtio-rng-"${devtype}",rng=rng0 \
              "$@"
