#!/usr/bin/env bash
set -euo pipefail
# Forked from https://github.com/coreos/scripts/blob/master/build_library/qemu_template.sh
# Changed to have command line arguments, drop non-x86_64/non-KVM support
# Automatically uses `-snapshot` if the target disk isn't writable
# Uses -nographic by default, and most importantly, contains a default
# Ignition config that auto-logins on the console


dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh
# shellcheck source=src/libguestfish.sh
. "${dn}"/libguestfish.sh

BUILDID=latest
IMAGE_TYPE=qemu
VM_DISK=
DISK_CHANNEL=virtio
VM_MEMORY=2048
VM_DISKSIZE=
VM_PERSIST_IMG=
VM_NCPUS="${VM_NCPUS:-${QEMU_PROCS}}"
VM_SRV_MNT=
SSH_ATTACH=
SSH_PORT=${SSH_PORT:-}
SSH_CONFIG=
UEFI=0
SWTPM=1
BOOT_INJECT=0
SECURE=0
USAGE="Usage: $0 [-d /path/to/disk.qcow2] [--] [qemu options...]
Options:
    -b --buildid          Target buildid (default latest)
    -I --imgtype          Target image type (qemu, metal, etc.  Default qemu)
    -d DISK               Root disk drive (won't be changed by default)
    --disk-channel TYPE   Communication mechanism for root device: virtio, nvme
    --persist-to-img IMG  Persist changes to a separate image
    -i FILE               File containing an Ignition config to merge into the default config
    --srv src             Mount (via 9p) src on the host as /var/srv in guest
    -m MB                 RAM size in MB (2048)
    --size GB             Disk size in GB (matches base by default)
    --ssh                 Attach via SSH instead of console
    -p --ssh-port PORT    Map PORT on localhost to the VM's sshd.
    --ssh-config FILE     Write SSH config to FILE. Useful with '-p 0'.
    -h                    this ;-)
    -B --boot-inject      Force Ignition injection into /boot (useful for running metal images)
    --uefi                Boot using uefi (x86_64 only, implied on arm)
    --uefi-secure         Boot using uefi with secure boot enabled (x86_64/arm only)
    --no-swtpm            Don't create a temporary software TPM

This script is a wrapper around qemu for starting CoreOS virtual machines,
it will auto-log you into the console, and by default for read-only disk
images makes a transient snapshot. Unless a disk image is passed with -d, it
will launch the latest build.

Any arguments after -- will be passed through to qemu. See the qemu(1) man page
for more details.
"

die(){
    echo "${1}" 1>&2
    exit 1
}

# remember in case we re-exec under ssh-agent
args=("$0" "$@")

while [ $# -ge 1 ]; do
    case "$1" in
        -b|--buildid)
            BUILDID="$2"
            shift 2 ;;
        -I|--imgtype)
            IMAGE_TYPE="$2"
            shift 2 ;;
        -d)
            VM_DISK="$2"
            shift 2 ;;
        --disk-channel)
            DISK_CHANNEL="$2"
            shift 2 ;;
        --persist-to-img)
            VM_PERSIST_IMG="$2"
            shift 2 ;;
        -i|--ignition-config)
            IGNITION_CONFIG_FILE="$2"
            shift 2 ;;
        --srv)
            VM_SRV_MNT="$2"
            shift 2 ;;
        -m)
            VM_MEMORY="$2"
            shift 2 ;;
        --size)
            VM_DISKSIZE="${2}G"
            shift 2 ;;
        -p|--ssh-port)
            SSH_PORT="$2"
            shift 2 ;;
        --ssh-config)
            SSH_CONFIG="$2"
            shift 2 ;;
        --ssh)
            SSH_ATTACH=1
            shift ;;
        -v|--verbose)
            set -x
            shift ;;
        --uefi)
            UEFI=1
            shift ;;
        --uefi-secure)
            SECURE=1
            shift ;;
        --no-swtpm)
            SWTPM=0
            shift ;;
        -B|--boot-inject)
            BOOT_INJECT=1
            shift ;;
        -h|--help)
            echo "$USAGE"
            exit ;;
        --)
            shift
            break ;;
        *)
            die "Unknown argument $1";;
    esac
done

# automatically turn on SSH if --ssh-config or --ssh is given and default
# to port 0.
if { [ -n "${SSH_CONFIG}" ] || [ -n "${SSH_ATTACH}" ]; } && [ -z "${SSH_PORT}" ]; then
    SSH_PORT=0
fi

# check if we or the user will want to SSH and re-exec under ssh-agent if so
ssh_pubkeys=""
if [ -n "${SSH_PORT}" ]; then
    if [ -z "${SSH_AUTH_SOCK:-}" ]; then
        exec ssh-agent "${args[@]}"
    fi

    # if there are no keys, seed with defaults
    if ( ssh-add -l || : ) | grep -q 'no identities'; then
        ssh-add -q
    fi

    # and collect pubkeys to inject into the host
    while read -r pubkey; do
        if [ -z "${ssh_pubkeys}" ]; then
            ssh_pubkeys="\"${pubkey}\""
        else
            ssh_pubkeys="${ssh_pubkeys}, \"${pubkey}\""
        fi
    done <<< "$(ssh-add -L)"
fi

preflight

if [ "$UEFI" == 1 ] && [ "$SECURE" == 1 ]; then
	die "cannot specify --uefi and --uefi-secure"
fi

if [ -z "${VM_DISK}" ]; then
    if ! [ -d "builds/${BUILDID}" ]; then
        die "No builds/${BUILDID}"
    fi
    builddir=$(get_build_dir "${BUILDID}")
    diskpath=$(jq -r '.["images"]["'"${IMAGE_TYPE}"'"]["path"]' < "${builddir}/meta.json")
    if [ "${diskpath}" = "null" ]; then
        die "No image ${IMAGE_TYPE} in build ${BUILDID}"
    fi
    VM_DISK=${builddir}/${diskpath}
    # For other image types (most usefully for metal) force
    # on injection into the /boot partition, since Ignition
    # won't pull from qemu userdata.
    if [ "${IMAGE_TYPE}" != qemu ]; then
        BOOT_INJECT=1
    fi
fi

# Make sure disk path is absolute; note we don't realpath
# the full disk name in order to avoid canonicalizing the disk name
# itself, since we dispatch on that to detect e.g. Ignition version,
# and we want to support use of e.g. git-annex and tools like that.
vmdiskdir=$(dirname "${VM_DISK}")
VM_DISK=$(realpath "${vmdiskdir}")/$(basename "${VM_DISK}")

ignition_version=$(disk_ignition_version "${VM_DISK}")
ign_validate="ignition-validate"

# Emulate the host CPU closely in both features and cores.
# We don't care about migration for this.
set -- -machine accel=kvm -cpu host -smp "${VM_NCPUS}" "$@"

systemd_units=
append_systemd_unit() {
    if [ -z "${systemd_units}" ]; then
        systemd_units="${1}"
    else
        systemd_units="${systemd_units},$1"
    fi
}

if [ -n "${VM_SRV_MNT}" ]; then
    set -- --fsdev local,id=var-srv,path="${VM_SRV_MNT}",security_model=mapped,readonly \
        -device virtio-9p-"${devtype}",fsdev=var-srv,mount_tag=/var/srv "$@"
    # The dependency changes are hacks around https://github.com/coreos/fedora-coreos-tracker/issues/223
    append_systemd_unit '{
"name": "var-srv.mount",
"enabled": true,
"contents": "[Unit]\nDefaultDependencies=no\nAfter=systemd-tmpfiles-setup.service\nBefore=basic.target\n[Mount]\nWhat=/var/srv\nWhere=/var/srv\nType=9p\nOptions=ro,trans=virtio,version=9p2000.L\n[Install]\nWantedBy=multi-user.target\n"
}'
fi

if [ -n "${IGNITION_CONFIG_FILE:-}" ]; then
    user_config=$(base64 --wrap 0 "${IGNITION_CONFIG_FILE}")
    user_config=$(cat << EOF
,"config": {
    "merge": [{
        "source": "data:text/plain;base64,$user_config"
    }]
}
EOF
    )
else
    user_config=""
fi

coreos_assembler_sysctl=$(cat << 'EOF' | base64 --wrap 0
# Written during `coreos-assembler run`.

# Right now, we're running at the default log level, which is DEBUG (7).
# The text gets interspersed with user input/program output on the tty.
# Bump the default to ERROR (3).
kernel.printk = 3 4 1 7
EOF
)

coreos_assembler_motd=$(cat << 'EOF' | base64 --wrap 0
ICMP traffic (ping) does not work with QEMU and user mode networking.
To exit, press Ctrl-A and then X.

EOF
)

# generate a string like rows XX columns XX for stty
rowcol=$(stty -a | tr ';' '\n' | grep -e 'rows\|columns' | tr '\n' ' ' )
rowcol=$(echo "stty ${rowcol}" | base64 --wrap 0)

if [ -z "${SSH_ATTACH}" ]; then
    append_systemd_unit "{
    \"name\": \"serial-getty@${DEFAULT_TERMINAL}.service\",
    \"dropins\": [
        {
            \"name\": \"autologin-core.conf\",
            \"contents\": \"[Service]\\nTTYVTDisallocate=no\\nExecStart=\\nExecStart=-/usr/sbin/agetty --autologin core --noclear %I \$TERM\\n\"
        }
    ]
}"
fi

f=$(mktemp)
cat > "${f}" <<EOF
{
    "ignition": {
        "version": "3.0.0"${user_config}
    },
    "storage": {
        "files": [
            {
                "path": "/etc/sysctl.d/10-coreos-assembler.conf",
                "contents": { "source": "data:text/plain;base64,${coreos_assembler_sysctl}" },
                "mode": 420
            },
            {
                "path": "/etc/motd",
                "append": [
                    { "source": "data:text/plain;base64,${coreos_assembler_motd}" }
                ],
                "mode": 420
            },
            {
                "path": "/home/core/.bashrc",
                "append": [
                    { "source": "data:text/plain;base64,${rowcol}" }
                ]
            }
        ]
    },
    "passwd": {
        "users": [
            {
                "name": "core",
                "sshAuthorizedKeys": [
                    ${ssh_pubkeys}
                ]
            }
        ]
    },
    "systemd": {
        "units": [
            ${systemd_units}
        ]
    }
}
EOF
if [ "${ignition_version}" = "2.2.0" ]; then
    ign_validate="true"
    spec2f=$(mktemp)
    /usr/lib/coreos-assembler/incomplete-hack-ign-3to2 "${f}" > "${spec2f}"
    mv "${spec2f}" "${f}"
fi

exec 3<>"${f}"
rm -f "${f}"
IGNITION_CONFIG_FILE=/proc/self/fd/3

if ! ${ign_validate} "${IGNITION_CONFIG_FILE}"; then
    jq . < "${IGNITION_CONFIG_FILE}"
    exit 1
fi

if [ -z "${VM_PERSIST_IMG}" ]; then
    VM_IMG=$(mktemp -p "${TMPDIR:-/var/tmp}")
    # shellcheck disable=SC2086
    qemu-img create -q -f qcow2 -b "${VM_DISK}" "${VM_IMG}" ${VM_DISKSIZE}
else
    echo "Re-using existing ${VM_PERSIST_IMG}"
    VM_IMG=${VM_PERSIST_IMG}
fi

if [ "$(arch)" == "ppc64le" ] || [ "$(arch)" == "s390x" ] || [ "${BOOT_INJECT}" = 1 ]; then
    echo "Injecting /boot/ignition/config.ign via libguestfs..."
    coreos_gf_run_mount "${VM_IMG}"
    coreos_gf mkdir-p /boot/ignition
    coreos_gf upload ${IGNITION_CONFIG_FILE} /boot/ignition/config.ign
    #TODO coreos_gf_relabel /boot/ignition/config.ign
    coreos_gf_shutdown
    echo "done"
else
    set -- -fw_cfg name=opt/com.coreos/config,file="${IGNITION_CONFIG_FILE}" "$@"
fi

if [ -z "${VM_PERSIST_IMG}" ]; then
    exec 4<> "${VM_IMG}"
    rm -f "${VM_IMG}"
    VM_IMG=/proc/self/fd/4
fi

if [ -n "${SSH_PORT}" ]; then
    # If SSH_PORT is 0, then let's pick one ourselves. There's an inherent race
    # here; ideally qemu would do this, but with --ssh-config, there'd be no way
    # to write it out before exec'ing.
    if [ "${SSH_PORT}" == 0 ]; then
        SSH_PORT=$(python3 -c "import socket; sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM); sock.bind(('', 0)); print(sock.getsockname()[1])")
        echo "SSH port: ${SSH_PORT}"
    fi
   hostfwd=",hostfwd=tcp:127.0.0.1:${SSH_PORT}-:22"
fi

if [ -n "${SSH_CONFIG}" ]; then
    cat > "${SSH_CONFIG}" << EOF
Host coreos
    HostName localhost
    Port ${SSH_PORT}
    User core
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
EOF
fi

case "${DISK_CHANNEL}" in
    virtio) set -- -drive if=virtio,file="${VM_IMG}" "$@" ;;
    nvme) set -- -device nvme,drive=D22,serial=1234 -drive file="${VM_IMG}",if=none,id=D22 "$@" ;;
    *) die "Invalid --disk-channel ${DISK_CHANNEL}" ;;
esac

# There is no BIOS on aarch64, so we need a firmware to boot the system
if [ "$(arch)" == "aarch64" ]; then
    set -- -bios /usr/share/AAVMF/AAVMF_CODE.fd "$@"
fi

if [ "$UEFI" == "1" ]; then
    cp /usr/share/edk2/ovmf/OVMF_VARS.fd /tmp/vars.fd
    exec 5<> /tmp/vars.fd
    rm /tmp/vars.fd
    set -- -drive file=/usr/share/edk2/ovmf/OVMF_CODE.fd,if=pflash,format=raw,unit=0,readonly=on "$@"
    set -- -drive file=/proc/self/fd/5,if=pflash,format=raw,unit=1,readonly=off "$@"
    set -- -machine q35 "$@"
fi

if [ "$SECURE" == "1" ]; then
    cp /usr/share/edk2/ovmf/OVMF_VARS.secboot.fd /tmp/vars.fd
    exec 5<> /tmp/vars.fd
    rm /tmp/vars.fd
    set -- -drive file=/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd,if=pflash,format=raw,unit=0,readonly=on "$@"
    set -- -drive file=/proc/self/fd/5,if=pflash,format=raw,unit=1,readonly=off "$@"
    set -- -machine q35 "$@"
fi

set -- -name coreos -m "${VM_MEMORY}" -nographic \
              -netdev user,id=eth0,hostname=coreos"${hostfwd:-}" \
              -device virtio-net-"${devtype}",netdev=eth0 \
              -object rng-random,filename=/dev/urandom,id=rng0 -device virtio-rng-"${devtype}",rng=rng0 \
              "$@"

# We want to strongly emphasize use of TPM devices in CoreOS, so let's provision
# one by default.  This would be nicer if we didn't need to pass a persistent
# state directory to swtpm, and we could more conveniently "lifecycle bind"
# the swtpm and qemu processes.
if [ "${SWTPM}" = 1 ] && [ -x /usr/bin/swtpm ]; then
    tpm_dir=$(mktemp -d -t cosa-tpmstate.XXXXXX)
    setpriv --pdeathsig SIGTERM -- "${dn}"/swtpm-wrapper "${tpm_dir}" &
    set -- -chardev socket,id=chrtpm,path="${tpm_dir}/swtpm-sock" \
           -tpmdev emulator,id=tpm0,chardev=chrtpm -device tpm-tis,tpmdev=tpm0 "$@"
fi

if [ -z "${SSH_ATTACH}" ]; then
    # shellcheck disable=SC2086
    exec ${QEMU_KVM} "$@"
fi

# shellcheck disable=SC2086
setpriv --pdeathsig SIGTERM -- ${QEMU_KVM} "$@" < /dev/null &
# A dumber but simpler version of https://github.com/jlebon/files/blob/master/bin/sshwait
while true; do
    out=$(echo | nc -w 1 localhost "${SSH_PORT}" 2>&1 || :)
    if grep -q SSH <<< "$out"; then
        break
    fi
    sleep 1
done
exec ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no core@localhost -p "${SSH_PORT}"
