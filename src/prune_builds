#!/usr/bin/env python3
# NOTE: PYTHONUNBUFFERED is set in cmdlib.sh for unbuffered output

'''
    This script is called by both the `build` and `prune` commands. It'll be
    shared more cleanly once we port everything to Python/Go.
'''

import os
import sys
import json
import shutil
import argparse
import subprocess
import collections

from datetime import timedelta, datetime, timezone

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from cmdlib import write_json, rfc3339_time


def parse_date_string(date_string):
    """
    Parses the date strings expected from the build system. Returned
    datetime instances will be in utc.

    :param date_string: string to turn into date. Format: %Y-%m-%dT%H:%M:%SZ
    :type date_string: str
    :returns: datetime instance from the date string
    :rtype: datetime.datetime
    :raises: ValueError, TypeError
    """
    dt = datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%SZ')
    return dt.replace(tzinfo=timezone.utc)


Build = collections.namedtuple('Build', ['id', 'timestamp',
                                         'ostree_timestamp'])

# Let's just hardcode this here for now
DEFAULT_KEEP_LAST_N = 3

parser = argparse.ArgumentParser()
parser.add_argument("--workdir", required=True, help="Path to workdir")
parser.add_argument("--timestamp-only", help="Update timestamp on builds.json",
                    action='store_true')
parser.add_argument("--insert-only", metavar="BUILDID", action='store',
                    help="Append a new latest build, do not prune")
keep_options = parser.add_mutually_exclusive_group()
keep_options.add_argument("--keep-last-n", type=int, metavar="N",
                          default=DEFAULT_KEEP_LAST_N,
                          help="Number of untagged builds to keep (0 for all)")
keep_options.add_argument("--keep-last-days", metavar="N", type=int,
                          help="Keep untagged builds within number of days")
args = parser.parse_args()

keep_younger_than = None
if args.keep_last_days is not None:
    if args.keep_last_days <= 0:
        raise argparse.ArgumentTypeError("value must be positive: %d" %
                                         args.keep_last_days)
    keep_younger_than = (datetime.now(timezone.utc) -
                         timedelta(days=args.keep_last_days))


builds = []
builds_dir = os.path.join(args.workdir, "builds")
builds_json = os.path.join(builds_dir, "builds.json")

if os.path.isfile(builds_json):
    with open(builds_json) as f:
        builddata = json.load(f)
else:
    builddata = {'builds': []}

# handle --timestamp-only
if args.timestamp_only:
    builddata['timestamp'] = rfc3339_time()
    write_json(builds_json, builddata)
    sys.exit(0)

# Handle --insert-only
if args.insert_only:
    builddata['builds'].insert(0, args.insert_only)
    builddata['timestamp'] = rfc3339_time()
    write_json(builds_json, builddata)
    sys.exit(0)

skip_pruning = (not keep_younger_than and args.keep_last_n == 0)

# collect all builds being pointed to by tags
tagged_builds = set([tag['target'] for tag in builddata.get('tags', [])])

# first, pick up all the builds from the dir itself
with os.scandir(builds_dir) as it:
    for entry in it:

        # ignore non-dirs
        if not entry.is_dir(follow_symlinks=False):
            # those are really the only three non-dir things we expect there
            if entry.name not in ['builds.json', 'latest']:
                print(f"Ignoring non-directory {entry.name}")
            continue

        # ignore dirs missing meta.json
        meta_file = os.path.join(entry.path, 'meta.json')
        if not os.path.isfile(meta_file):
            print(f"Ignoring directory {entry.name}")
            continue

        # collect dirs and timestamps
        with open(meta_file) as f:
            j = json.load(f)
        # Older versions only had ostree-timestamp
        ts = j.get('coreos-assembler.build-timestamp') or j['ostree-timestamp']
        t = parse_date_string(ts)
        ostree_ts = j['ostree-timestamp']
        ostree_t = parse_date_string(ostree_ts)
        builds.append(Build(id=entry.name, timestamp=t,
                            ostree_timestamp=ostree_t))

# just get the trivial case out of the way
if len(builds) == 0:
    print("No builds to prune!")
    sys.exit(0)

# sort by timestamp, newest first
builds = sorted(builds, key=lambda x: x.timestamp, reverse=True)

new_builds = []
builds_to_delete = []

if skip_pruning:
    new_builds = builds
else:
    if keep_younger_than:
        for build in builds:
            if build.id in tagged_builds:
                print(f"Skipping tagged build {build.id}")
                new_builds.append(build)
                continue

            if build.timestamp < keep_younger_than:
                builds_to_delete.append(build)
            else:
                new_builds.append(build)
    else:
        n = args.keep_last_n
        assert(n > 0)
        for build in builds:
            # skip tagged builds and don't count them towards the limit
            if build.id in tagged_builds:
                print(f"Skipping tagged build {build.id}")
                new_builds.append(build)
                continue

            if n == 0:
                builds_to_delete.append(build)
            else:
                new_builds.append(build)
                n = n - 1

builddata['builds'] = [x.id for x in new_builds]
builddata['timestamp'] = rfc3339_time()
write_json(builds_json, builddata)

# if we're not pruning, then we're done!
if skip_pruning:
    sys.exit(0)

# now delete other build dirs not in the manifest

for build in builds_to_delete:
    print(f"Pruning build {build.id}")
    shutil.rmtree(os.path.join(builds_dir, build.id))
