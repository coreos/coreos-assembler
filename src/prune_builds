#!/usr/bin/python3 -u

'''
    This script is called by both the `build` and `prune` commands. It'll be
    shared more cleanly once we port everything to Python/Go.
'''

import os
import sys
import json
import shutil
import argparse
import tempfile
import subprocess

import dateutil.parser

from datetime import datetime

sys.path.insert(0, '/usr/lib/coreos-assembler')
from cmdlib import write_json

# Let's just hardcode this here for now
DEFAULT_KEEP_LAST_N = 3

parser = argparse.ArgumentParser()
parser.add_argument("--workdir", required=True, help="Path to workdir")
parser.add_argument("--keep-last-n", type=int, default=DEFAULT_KEEP_LAST_N,
                    help="Number of builds to keep (0 for all)")
parser.add_argument("--insert-only", help="Append a new latest build, do not prune",
                    action='store')
parser.add_argument("--timestamp-only", help="Update timestamp on builds.json",
                    action='store_true')
args = parser.parse_args()

builds = []
builds_dir = os.path.join(args.workdir, "builds")
builds_json = os.path.join(builds_dir, "builds.json")

if os.path.isfile(builds_json):
    with open(builds_json) as f:
        builddata = json.load(f)
else:
    builddata = {'builds': []}

# generate RFC3339 timestamp
now = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")

# handle --timestamp-only
if args.timestamp_only:
    builddata['timestamp'] = now
    write_json(builds_json, builddata)
    sys.exit(0)

# Handle --insert-only
if args.insert_only:
    builddata['builds'].insert(0, args.insert_only)
    builddata['timestamp'] = now
    write_json(builds_json, builddata)
    sys.exit(0)

skip_pruning = (args.keep_last_n == 0)

# first, regen builds.json
with os.scandir(builds_dir) as it:
    for entry in it:

        # ignore non-dirs
        if not entry.is_dir(follow_symlinks=False):
            # those are really the only three non-dir things we expect there
            if entry.name not in ['builds.json', 'latest']:
                print(f"Ignoring non-directory {entry.name}")
            continue

        # ignore dirs missing meta.json
        meta_file = os.path.join(entry.path, 'meta.json')
        if not os.path.isfile(meta_file):
            print(f"Ignoring directory {entry.name}")
            continue

        # collect dirs and timestamps
        with open(meta_file) as f:
            j = json.load(f)
        # Older versions only had ostree-timestamp
        ts = j.get('build-timestamp') or j['ostree-timestamp']
        t = dateutil.parser.parse(ts)
        builds.append((entry.name, t))

builds = sorted(builds, key=lambda x: x[1], reverse=True)
builds_to_delete = []
if not skip_pruning and len(builds) > args.keep_last_n:
    builds_to_delete = builds[args.keep_last_n:]
    del builds[args.keep_last_n:]

builddata['builds'] = [x[0] for x in builds]
builddata['timestamp'] = now
write_json(builds_json, builddata)

# if we're not pruning, then we're done!
if skip_pruning:
    sys.exit()

# now delete other build dirs not in the manifest

for build_dir, _ in builds_to_delete:
    shutil.rmtree(os.path.join(builds_dir, build_dir))

# and finally prune OSTree repos
def ostree_prune(repo_name, sudo=False):
    repo = os.path.join(args.workdir, repo_name)
    argv = []
    if sudo:
        argv.extend(['sudo', '--'])
    print(f"Pruning {repo_name}")
    argv.extend(["ostree", "prune", "--repo", repo, "--refs-only",
                    f"--depth={args.keep_last_n-1}"])
    subprocess.run(argv, check=True)

ostree_prune('repo')
