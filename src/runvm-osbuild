#!/bin/bash
set -eux -o pipefail

usage() {
    cat <<EOC
${0} runs in a supermin virtual machine to then
run OSBuild to build a CoreOS style disk image.

Options:
    --config: JSON-formatted image.yaml
    --help: show this help
    --mpp: the path to the OSBuild mpp.yaml file
    --filepath: where to write the created image file
    --secex: Build qemu-secex image

You probably don't want to run this script by hand. This script is
run as part of 'coreos-assembler build'.
EOC
}

# Parse the passed config JSON and extract a mandatory value
getconfig() {
    k=$1
    jq -re .\""$k"\" < "${config}"
}
# Return a configuration value, or default if not set
getconfig_def() {
    k=$1
    shift
    default=$1
    shift
    jq -re .\""$k"\"//\""${default}"\" < "${config}"
}

secex=""
while [ $# -gt 0 ];
do
    flag="${1}"; shift;
    case "${flag}" in
        --config)                  config="${1}"; shift;;
        --help)                    usage; exit;;
        --mpp)                     mppyaml="${1}"; shift;;
        --filepath)                filepath="${1}"; shift;;
        --secex)                   secex="${1}"; shift;;
         *) echo "${flag} is not understood."; usage; exit 10;;
     esac;
done

# Get the base filename of the desired file output path
filename=$(basename "$filepath")

ostree_container=$(getconfig "ostree-container")
osname=$(getconfig "osname")
platform=$(getconfig "image-type")
deploy_via_container=$(getconfig_def "deploy-via-container" "")
metal_image_size_mb=$(getconfig "metal-image-size")
cloud_image_size_mb=$(getconfig "cloud-image-size")
rootfs_size_mb=$(getconfig "rootfs-size")
container_imgref=$(getconfig "container-imgref")
container_repo=$(getconfig_def "container-repo" "")
container_tag=$(getconfig_def "container-tag" "")
extra_kargs=$(getconfig "extra-kargs-string" "")
squashfs_compression=$(getconfig_def "squashfs-compression" "")
metal_filename=$(getconfig_def "metal-filename" "")
metal4k_filename=$(getconfig_def "metal4k-filename" "")
live_efiboot_img_size_mb=$(getconfig_def "live-efiboot-img-size" "0")
# If we are not deploying via container let's go ahead and
# set the OSTree repo and ref information
ostree_ref=""
ostree_repo=""
if [ -z "${deploy_via_container}" ]; then
    ostree_ref=$(getconfig "ostree-ref")
    ostree_repo="file://$(getconfig "ostree-repo")"
fi

# Since it doesn't exist create loop-control
[ ! -e /dev/loop-control ] && mknod /dev/loop-control c 10 237

# Put the store and the output dir on the cache. At the end we'll mv
# out the created artifact from the output dir to the place it's supposed
# to go.
outdir=cache/osbuild/out
storedir=cache/osbuild/store

processed_json=$(mktemp -t osbuild-XXXX.json)

# Run `podman images` here to initialize a few directories inside the
# supermin VM. Otherwise the org.osbuild.container-deploy stage will
# fail to copy things into containers-storage. This also happens to
# clean up a skopeo error relating to /etc/containers/networks not existing.
podman images > /dev/null

# Run through the preprocessor
# Note: don't quote the size arguements since they are numbers, not strings
osbuild-mpp                                             \
    -D arch=\""$(arch)"\"                               \
    -D ostree_ref=\""${ostree_ref}"\"                   \
    -D ostree_repo=\""${ostree_repo}"\"                 \
    -D filename=\""${filename}"\"                       \
    -D ociarchive=\""${ostree_container}"\"             \
    -D osname=\""${osname}"\"                           \
    -D container_imgref=\""${container_imgref}"\"       \
    -D container_repo=\""${container_repo}"\"           \
    -D container_tag=\""${container_tag}"\"             \
    -D extra_kargs=\""${extra_kargs}"\"                 \
    -D metal_image_size_mb="${metal_image_size_mb}"     \
    -D cloud_image_size_mb="${cloud_image_size_mb}"     \
    -D rootfs_size_mb="${rootfs_size_mb}"               \
    -D qemu_secex=\""${secex}"\"                        \
    -D squashfs_compression=\""${squashfs_compression}"\" \
    -D metal_filename=\""${metal_filename}"\"             \
    -D metal4k_filename=\""${metal4k_filename}"\"         \
    -D live_efiboot_img_size_mb="${live_efiboot_img_size_mb}" \
    "${mppyaml}" "${processed_json}"

# Build the image
osbuild \
    --out "$outdir"              \
    --store "$storedir"          \
    --cache-max-size 14GiB       \
    --checkpoint build           \
    --checkpoint tree            \
    --checkpoint raw-image       \
    --export "$platform" "${processed_json}"


# Copy it out to the specified location. Use mv here so we remove it
# from the cache qcow2 so we don't cache it.
mv "${outdir}/${platform}/${filename}" "${filepath}"

# In case of IBM Secure Execution there are more artifacts
if [ -n "${secex}" ]; then
    dir=$(dirname "${filepath}")
    mv "${outdir}/${platform}/bootfs_hash" "${dir}"
    mv "${outdir}/${platform}/rootfs_hash" "${dir}"
fi

rm -f "${processed_json}"
