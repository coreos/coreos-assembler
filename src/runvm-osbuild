#!/bin/bash
set -eux -o pipefail

usage() {
    cat <<EOC
${0} creates a supermin virtual machine that then
runs OSBuild to build a CoreOS style disk image.

Options:
    --config: JSON-formatted image.yaml
    --help: show this help
    --mpp: the path to the OSBuild mpp.yaml file
    --filepath: where to write the created image file

You probably don't want to run this script by hand. This script is
run as part of 'coreos-assembler build'.
EOC
}

# Parse the passed config JSON and extract a mandatory value
getconfig() {
    k=$1
    jq -re .\""$k"\" < "${config}"
}
# Return a configuration value, or default if not set
getconfig_def() {
    k=$1
    shift
    default=$1
    shift
    jq -re .\""$k"\"//\""${default}"\" < "${config}"
}

while [ $# -gt 0 ];
do
    flag="${1}"; shift;
    case "${flag}" in
        --config)                  config="${1}"; shift;;
        --help)                    usage; exit;;
        --mpp)                     mppyaml="${1}"; shift;;
        --filepath)                filepath="${1}"; shift;;
         *) echo "${flag} is not understood."; usage; exit 10;;
     esac;
done

# Get the base filename of the desired file output path
filename=$(basename "$filepath")

ostree_repo=$(getconfig "ostree-repo")
ostree_ref=$(getconfig "ostree-ref")
platform=$(getconfig "image-type")
deploy_via_container=$(getconfig_def "deploy-via-container" "")

# If we are deploying via container let's go ahead and pull
# the oci archive path from the config
ostree_container=""
if [ -n "${deploy_via_container}" ]; then
    ostree_container=$(getconfig "ostree-container")
fi

# Since it doesn't exist create loop-control
mknod /dev/loop-control c 10 237

# Tell osbuild to write out artifacts into a file in the root
# filesystem of the supermin VM, which is ephemeral.
mkdir /var/osbuild
outdir=/var/osbuild/out

# Run through the preprocessor
osbuild-mpp                                 \
    -D ref=\""${ostree_ref}"\"              \
    -D repourl=\""file://${ostree_repo}"\"  \
    -D filename=\""${filename}"\"           \
    -D ociarchive=\""${ostree_container}"\" \
    "${mppyaml}"                            \
    processed.json

# Build the image
osbuild \
    --out "$outdir"            \
    --store cache/osbuild/store/ \
    --cache-max-size 9GiB        \
    --checkpoint tree            \
    --checkpoint raw-image       \
    --export "$platform" processed.json


# Copy it out to the specified location
cp "${outdir}/${platform}/${filename}" "${filepath}"
