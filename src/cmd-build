#!/usr/bin/env bash
set -euo pipefail

dn=$(dirname $0)
. ${dn}/cmdlib.sh

export LIBGUESTFS_BACKEND=direct

prepare_build

ostree --version
rpm-ostree --version

previous_commit=$(ostree --repo=${workdir}/repo rev-parse ${ref} || true)
# Generate metadata that's *input* to the ostree commit
config_gitrev=$(cd ${configdir} && git describe --tags --always --abbrev=42)
config_dirty=false
if ! git -C ${configdir} diff --quiet --exit-code; then
    config_dirty=true
fi
commitmeta_input_json=$(pwd)/work/commit-metadata-input.json
cat >${commitmeta_input_json} <<EOF
{
  "coreos-assembler.config-gitrev": "${config_gitrev}",
  "coreos-assembler.config-dirty": ${config_dirty}
}
EOF
composejson=$(pwd)/work/compose.json
changed_stamp=$(pwd)/work/treecompose.changed
# --cache-only is here since `fetch` is a separate verb.
runcompose --cache-only --add-metadata-from-json ${commitmeta_input_json} \
           --touch-if-changed "${changed_stamp}" \
           --write-composejson-to ${composejson}
commit=$(ostree --repo=${workdir}/repo-build rev-parse "${ref}")
version=$(ostree --repo=${workdir}/repo-build show --print-metadata-key=version ${commit} | sed -e "s,',,g")
# Very special handling for --write-composejson-to as rpm-ostree doesn't
# write it if the commit didn't change.
if [ -f "${changed_stamp}" ]; then
    # Be nice to people who have older versions
    mkdir -p ${workdir}/tmp
    # Clean up prior versions
    rm -f ${workdir}/tmp/compose-*.json
    # Save this in case the image build fails
    cp -a --reflink=auto ${composejson} ${workdir}/tmp/compose-${commit}.json
else
    # Grab the previous JSON
    cp -a --reflink=auto ${workdir}/tmp/compose-${commit}.json work/compose.json
fi
# https://github.com/ostreedev/ostree/issues/1562#issuecomment-385393872
# The passwd files (among others) don't have world readability.  This won't
# actually corrupt the repository as the *canonical* permissions are stored
# as xattrs.  Probably what we should do is have an ostree option to specify
# a permission mask for objects.
sudo chmod -R a+rX ${workdir}/repo-build/objects
ostree --repo=${workdir}/repo pull-local ${workdir}/repo-build "${ref}"
ostree --repo=${workdir}/repo summary -u

sha256sum_str() {
    sha256sum | cut -f 1 -d ' '
}

kickstart_input=${configdir}/image.ks
kickstart_checksum=$(cat ${kickstart_input} | sha256sum_str)
image_input_checksum=$((echo ${commit} && echo ${kickstart_checksum}) | sha256sum_str)

previous_build=
if [ -L latest ]; then
    previous_build=$(readlink latest)
fi

image_genver=1
if [ -n "${previous_build}" ]; then
    previous_image_input_checksum=$(jq -r '.["coreos-assembler.image-input-checksum"]' < "${previous_build}/meta.json")
    if [ "${image_input_checksum}" = "${previous_image_input_checksum}" ]; then
        echo "No changes in image inputs."
        exit 0
    fi
    previous_ostree_commit=$(jq -r '.["ostree-commit"]' < "${previous_build}/meta.json")
    previous_image_genver=$(jq -r '.["coreos-assembler.image-genver"]' < "${previous_build}/meta.json")
    if [ "${previous_ostree_commit}" = "${commit}" ]; then
        image_genver=$((${previous_image_genver} + 1))
    fi
fi

buildid=${version}-${image_genver}

mkdir -p "work/${buildid}"
cd "work/${buildid}"
# This is used by child processes inside here as a temporary directory, e.g. by
# gf-oemid. We don't want `/tmp` as we want to be able to reliably `rename()`
# directly.
build_tmp=$(pwd)/build-tmp
# Longer exported variable name for child processes
export ASSEMBLER_BUILD_TMPDIR=${build_tmp}
rm ${build_tmp} -rf && mkdir ${build_tmp}

# Generate JSON
if [ -n "${previous_commit}" ]; then
    previous_commit_json='"'"${previous_commit}"'"'
else
    previous_commit_json=null
fi

rm -f local.ks
# HACK: pull out the magic bit; we should have virt-install
# handle this with the ksflatten
grep -e "--coreos-virt-install-disk-size-gb" ${kickstart_input} > local.ks
# https://github.com/coreos/coreos-assembler/pull/12
# AKA commit 1d2150cf5607ade19780e4bd6f195e5c0efdb0ac
# TODO: move this into coreos-virt-install
cat >>local.ks <<EOF
%include ${kickstart_input}
%pre
mkdir -p /mnt/ostree-repo
mount -t 9p -o ro,trans=virtio,version=9p2000.L /mnt/ostree-repo /mnt/ostree-repo
%end
ostreesetup --nogpg --osname=coreos --remote=coreos --url=file:///mnt/ostree-repo --ref="${ref}"
EOF

imageprefix=${name}-${version}-${image_genver}
/usr/libexec/coreos-assembler/virt-install --dest=$(pwd)/${imageprefix}-base.qcow2 \
               --create-disk --kickstart $(pwd)/local.ks --kickstart-out $(pwd)/flattened.ks \
               --location ${workdir}/installer/*.iso --console-log-file $(pwd)/install.log \
               --local-repo=${workdir}/repo

/usr/libexec/coreos-assembler/gf-oemid ${imageprefix}-base.qcow2 $(pwd)/${imageprefix}-qemu.qcow2 qemu

cat > ${build_tmp}/meta.json <<EOF
{
 "coreos-assembler.image-input-checksum": "${image_input_checksum}",
 "coreos-assembler.image-genver": "${image_genver}",
 "coreos-assembler.kickstart-checksum": "${kickstart_checksum}"
}
EOF
# Merge all the JSON
cat ${build_tmp}/meta.json ${commitmeta_input_json} ${composejson} | jq -s add > meta.json

rm "${build_tmp}" -rf
cd ${workdir}/builds
mv work/${buildid} .
ln -Tsfr "${buildid}" latest
