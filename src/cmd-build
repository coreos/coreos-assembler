#!/usr/bin/env bash
set -euo pipefail

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

print_help() {
    cat 1>&2 <<'EOF'
Usage: coreos-assembler build --help
       coreos-assembler build [--force] [--skip-prune]

  Build OSTree and image artifacts from previously fetched packages.
EOF
}

# Parse options
FORCE=
SKIP_PRUNE=0
rc=0
options=$(getopt --options hf --longoptions help,force,force-nocache,skip-prune -- "$@") || rc=$?
[ $rc -eq 0 ] || {
    print_help
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        -f | --force | --force-nocache)
            FORCE="--force-nocache"
            ;;
        --skip-prune)
            SKIP_PRUNE=1
            ;;
        --)
            shift
            break
            ;;
        *)
            fatal "$0: unrecognized option: $1"
            exit 1
            ;;
    esac
    shift
done

if [ $# -ne 0 ]; then
    print_help
    fatal "ERROR: Too many arguments"
    exit 1
fi

export LIBGUESTFS_BACKEND=direct

prepare_build

ostree --version
rpm-ostree --version

# RFC3339 formatter
RFC3339="%Y-%m-%dT%H:%M:%SZ"

previous_build=
if [ -L "${workdir:?}"/builds/latest ]; then
    previous_build=$(readlink "${workdir}"/builds/latest)
    previous_builddir="${workdir}/builds/${previous_build}"
    echo "Previous build: ${previous_build}"
fi

previous_commit=
if [ -n "${ref:-}" ]; then
    previous_commit=$(ostree --repo="${workdir}"/repo rev-parse "${ref}" 2>/dev/null || true)
fi
# If the ref was unset or missing, look at the previous build
if [ -z "${previous_commit}" ] && [ -n "${previous_build}" ]; then
    previous_commit=$(jq -r '.["ostree-commit"]' < "${previous_builddir}/meta.json")
fi
echo "Previous commit: ${previous_commit:-none}"

sha256sum_str() {
    sha256sum | cut -f 1 -d ' '
}

# Calculate kickstart checksum now and gather previous image build variables if any
kickstart_input="${configdir:?}"/image.ks
kickstart_checksum=$(< "${kickstart_input}" sha256sum_str)
if [ -n "${previous_build}" ]; then
    previous_image_input_checksum=$(jq -r '.["coreos-assembler.image-input-checksum"]' < "${previous_builddir}/meta.json")
    previous_image_genver=$(jq -r '.["coreos-assembler.image-genver"]' < "${previous_builddir}/meta.json")
fi
echo "Kickstart checksum: ${kickstart_checksum}"

# Generate metadata that's *input* to the ostree commit
config_gitrev=$(cd "${configdir}" && git describe --tags --always --abbrev=42)
config_dirty=false
if ! git -C "${configdir}" diff --quiet --exit-code; then
    config_dirty=true
fi
commitmeta_input_json=$(pwd)/tmp/commit-metadata-input.json
cat >"${commitmeta_input_json}" <<EOF
{
  "coreos-assembler.config-gitrev": "${config_gitrev}",
  "coreos-assembler.config-dirty": ${config_dirty}
}
EOF
# These need to be absolute paths right now for rpm-ostree
composejson=$(pwd)/tmp/compose.json
# --cache-only is here since `fetch` is a separate verb.
runcompose --cache-only ${FORCE} --add-metadata-from-json "${commitmeta_input_json}" \
           --write-composejson-to "${composejson}"
# Always update the summary, since we used to do so
ostree --repo="${workdir}/repo" summary -u
# Very special handling for --write-composejson-to as rpm-ostree doesn't
# write it if the commit didn't change.
if [ -f "${changed_stamp:?}" ]; then
    commit=$(jq -r '.["ostree-commit"]' < "${composejson}")
    # Clean up prior versions
    rm -f "${workdir}"/tmp/compose-*.json
    # Save this in case the image build fails
    cp -a --reflink=auto "${composejson}" "${workdir}"/tmp/compose-"${commit}".json
else
    commit=${previous_commit}
    image_input_checksum=$( (echo "${commit}" && echo "${kickstart_checksum}") | sha256sum_str)
    # Note we may not actually have a previous build in the case of
    # successfully composing an ostree but failing the image on the
    # first build.
    if [ -n "${previous_build}" ] && [ "${image_input_checksum}" = "${previous_image_input_checksum}" ]; then
        echo "No changes in image inputs."
        exit 0
    fi

    # Grab the previous treecompose JSON (local developer case: treecompose succeeded but
    # image build failed) if possible, otherwise grab the previous build
    cached_previous_composejson="${workdir}"/tmp/compose-"${previous_commit}".json
    if [ -f "${cached_previous_composejson}" ]; then
        echo "Resuming partial build from: ${commit}"
        cp -a --reflink=auto "${cached_previous_composejson}" "${composejson}"
    else
        if [ -z "${previous_build}" ]; then
            fatal "compose tree had no changes, but no previous build or cached data"
        fi
        echo "Commit ${commit} unchanged; reusing previous build's rpm-ostree metadata"
        # This will have all of the data from the previous build, but we'll
        # overwrite things.
        cp -a --reflink=auto "${previous_builddir}"/meta.json "${composejson}"
    fi
fi

if [ -n "${previous_build}" ]; then
    rpm-ostree --repo="${workdir}"/repo db diff "${previous_commit}" "${commit}"
fi

image_input_checksum=$( (echo "${commit}" && echo "${kickstart_checksum}") | sha256sum_str)
echo "New image input checksum: ${image_input_checksum}"
version=$(ostree --repo="${workdir}"/repo show --print-metadata-key=version "${commit}" | sed -e "s,',,g")
if [ "${previous_commit}" = "${commit}" ] && [ -n "${previous_image_genver:-}" ]; then
    image_genver=$((previous_image_genver + 1))
    buildid="${version}"-"${image_genver}"
else
    image_genver=0
    buildid="${version}"
fi
echo "New build ID: ${buildid}"

imageprefix="${name:?}"-"${buildid}"
# Make these two verbose
set -x
mkdir -p tmp/anaconda
img_base=tmp/${imageprefix}-base.qcow2
img_qemu=${imageprefix}-qemu.qcow2
/usr/lib/coreos-assembler/virt-install --dest="$(pwd)"/"${img_base}" \
               --create-disk --kickstart "${kickstart_input}" --kickstart-out "$(pwd)"/tmp/flattened.ks \
               --ostree-remote="${name}" --ostree-stateroot="${name}" \
               --ostree-ref="${ref:-${commit}}" --ostree-repo="${workdir}"/repo \
               --location "${workdir}"/installer/*.iso --console-log-file "$(pwd)"/install.log \
               --logs "$(pwd)"/tmp/anaconda
/usr/lib/coreos-assembler/gf-anaconda-cleanup "$(pwd)"/"${img_base}"
/usr/lib/coreos-assembler/gf-oemid "$(pwd)"/"${img_base}" "$(pwd)"/"${img_qemu}" qemu
set +x
# make a version-less symlink to have a stable path
ln -s "${img_qemu}" "${name}"-qemu.qcow2

img_qemu_sha256=$(sha256sum "${img_qemu}" | cut -f 1 -d ' ')

build_timestamp=$(date -u +$RFC3339)

cat > tmp/meta.json <<EOF
{
 "buildid": "${buildid}",
 "name": "${name}",
 "coreos-assembler.build-timestamp": "${build_timestamp}",
 "coreos-assembler.image-input-checksum": "${image_input_checksum}",
 "coreos-assembler.image-genver": "${image_genver}",
 "coreos-assembler.kickstart-checksum": "${kickstart_checksum}",
 "images": {
    "qemu": { "path": "${img_qemu}",
              "sha256": "${img_qemu_sha256}" }
 }
}
EOF
# Merge all the JSON; note that we want ${composejson} first
# since we may be overriding data from a previous build.
cat "${composejson}" tmp/meta.json "${commitmeta_input_json}" | jq -s add > meta.json

# And add the commit metadata itself, which includes notably the rpmdb pkglist
# in a format that'd be easy to generate diffs out of for higher level tools
"${dn}"/commitmeta_to_json "${workdir}/repo" "${commit}" > commitmeta.json

# Clean up our temporary data
rm tmp -rf
# Back to the toplevel build directory, so we can rename this one
cd "${workdir}"/builds
# We create a .build-commit file to note that we're in the
# middle of a "commit".  This may be useful in the future
# for having things be transactional.  If for example we
# were interrupted between the rename() and linkat() below,
# things would be inconsistent and future builds would fail
# on the `mv`.
touch .build-commit
mv -T "${tmp_builddir:?}" "${buildid}"
# Replace the latest link
ln -Tsfr "${buildid}" latest
# Update builds.json
# the variables passed to `prune_builds` end up single quoted and
# python treats them as literals, so we workaround this by duplicating
# the command  ¯\_(ツ)_/¯
if [ "${SKIP_PRUNE}" == 1 ]; then
    "${dn}"/prune_builds --workdir "${workdir}" --insert-only "${buildid}"
else
    "${dn}"/prune_builds --workdir "${workdir}"
fi
rm .build-commit
