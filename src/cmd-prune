#!/usr/bin/python3 -u

'''
    This script removes previous builds. DO NOT USE on production pipelines
'''

import argparse
import os
import sys
import subprocess


from shutil import rmtree

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from cosalib.builds import Builds, get_local_builds

# Let's just hardcode this here for now
DEFAULT_KEEP_LAST_N = 3


parser = argparse.ArgumentParser(prog="coreos-assembler prune")
parser.add_argument("--workdir", default='.', help="Path to workdir")
parser.add_argument("--dry-run", help="Don't actually delete anything",
                    action='store_true')
strategy = parser.add_mutually_exclusive_group()
strategy.add_argument("--keep-last-n", type=int, metavar="N",
                      default=DEFAULT_KEEP_LAST_N,
                      help="Number of untagged builds to keep (0 for all)")
strategy.add_argument("--build", metavar="BUILDID", action='append',
                      default=[], help="Explicitly prune BUILDID")
args = parser.parse_args()

skip_pruning = (args.keep_last_n == 0)

builds = Builds(args.workdir)

# dict of id -> [tags]
tagged_builds = {}
for tag in builds.get_tags():
    tagged_builds[tag['target']] = tagged_builds.get(tag['target'], [])
    tagged_builds[tag['target']].append(tag['name'])

builds_dir = os.path.join(args.workdir, "builds")
scanned_builds = get_local_builds(builds_dir)

# sort by timestamp, newest first
scanned_builds = sorted(scanned_builds,
                        key=lambda x: x.timestamp,
                        reverse=True)
scanned_builds_map = {}
for build in scanned_builds:
    scanned_builds_map[build.id] = build

new_builds = []
builds_to_delete = []

# Don't prune known builds
if skip_pruning:
    new_builds = scanned_builds
elif len(args.build) > 0:
    builds_to_delete_map = {}
    for bid in args.build:
        build = scanned_builds_map.get(bid)
        if build is None:
            raise Exception(f"Failed to find build ID: {bid}")
        if build.id in tagged_builds:
            tags = ', '.join(tagged_builds[build.id])
            raise Exception(f"Build {build.id} is tagged ({tags})")
        builds_to_delete_map[build.id] = build
    for build in scanned_builds:
        if build.id not in builds_to_delete_map:
            new_builds.append(build)
        else:
            builds_to_delete.append(build)
else:
    n = args.keep_last_n
    assert n > 0

    for build in scanned_builds:
        if build.id in tagged_builds:
            tags = ', '.join(tagged_builds[build.id])
            print(f"Skipping tagged build {build.id} ({tags})")
            new_builds.append(build)
        elif n > 0:
            new_builds.append(build)
            n = n - 1
        else:
            builds_to_delete.append(build)

if args.dry_run:
    for build in builds_to_delete:
        print(f"Would prune build {build.id}")
    sys.exit(0)

# create a new builds list
builds.raw()['builds'] = []
for build in sorted(new_builds,
                    key=lambda x: x.timestamp):
    for arch in build.basearches:
        builds.insert_build(build.id, arch)

builds.bump_timestamp()

if len(builds.get_builds()) > 0:
    latest = builds.get_latest()
    subprocess.check_call(["ln", "-Tsf", latest, "builds/latest"])
elif os.path.islink("builds/latest"):
    os.unlink("builds/latest")

# now delete other build dirs not in the manifest
error_during_pruning = False
for build in builds_to_delete:
    print(f"Pruning build {build.id}")
    try:
        rmtree(os.path.join(builds_dir, build.id))
    except Exception as e:
        error_during_pruning = True
        print(f"{e}")

if error_during_pruning:
    sys.exit(1)
