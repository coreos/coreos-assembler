#!/usr/bin/env bash
set -euo pipefail

# This is just a thin wrapper around prune_builds. That way we still get the
# preflight checks to make sure the workdir looks sane.

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

print_help() {
    cat 1>&2 <<'EOF'
Usage: coreos-assembler prune --help
       coreos-assembler prune [--keep=N] [--timestamp-only]

  Delete older build artifacts. By default, only the last 3 builds are kept.
  This can be overridden with the `--keep` option.

  The `--timestamp-only` option will just update the `timestamp` key of
  `builds.json`
EOF
}

# Parse options
KEEP_LAST_N="3"
TIMESTAMP=0
rc=0
options=$(getopt --options h --longoptions help,keep:,timestamp-only -- "$@") || rc=$?
[ $rc -eq 0 ] || {
    print_help
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        --keep)
            shift
            KEEP_LAST_N="$1"
            ;;
        --timestamp-only)
            TIMESTAMP=1
            ;;
        --)
            shift
            break
            ;;
        *)
            fatal "$0: unrecognized option: $1"
            exit 1
            ;;
    esac
    shift
done

if [ $# -ne 0 ]; then
    print_help
    fatal "ERROR: Too many arguments"
    exit 1
fi

prepare_build

if [ "${TIMESTAMP}" == 1 ]; then
    "${dn}"/prune_builds --timestamp-only --workdir "${workdir:?}"
    exit 0
fi

"${dn}"/prune_builds --keep-last-n "${KEEP_LAST_N}" --workdir "${workdir:?}"
