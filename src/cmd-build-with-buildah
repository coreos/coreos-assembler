#!/usr/bin/env bash
set -euo pipefail

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

print_help() {
    cat 1>&2 <<'EOF'
Usage: coreos-assembler build-with-buildah
       coreos-assembler build-with-buildah [OPTIONS]...

  Build bootable container (ostree) and image base artifacts using the container runtime (buildah).
  `cosa build` will pivot to this script when the environment variable `COREOS_ASSEMBLER_BUILD_WITH_BUILDAH` is set.

  The following options are supported:
  --version=VERSION   Use the given version instead of using versionary.
  --versionary        Generate non-development version using versionary.
  --direct            Run buildah directly rather than within supermin.
  --autolock=VERSION  If no base lockfile used, create one from any arch build of `VERSION`.
                      Note this is automatically enabled when adding to an existing multi-arch
                      non-strict build.
EOF
}

VERSION=
VERSIONARY=
DIRECT=
AUTOLOCK_VERSION=
rc=0
options=$(getopt --options h,d --longoptions help,version:,versionary,direct,autolock: -- "$@") || rc=$?
[ $rc -eq 0 ] || {
    print_help
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        --version)
            shift
            VERSION=$1
            ;;
        --versionary)
            VERSIONARY=1
            ;;
        -d | --direct)
            DIRECT=1
            ;;
        --autolock)
            shift;
            AUTOLOCK_VERSION=$1
            ;;
        --)
            shift
            break
            ;;
        -*)
            fatal "$0: unrecognized option: $1"
            ;;
        *)
            break
            ;;
    esac
    shift
done

if [ -z "${VERSION}" ]; then
    # let error out if file does not exist
    if [ -z "${VERSIONARY}" ]; then
        VERSION=$(src/config/versionary --dev)
    else
        VERSION=$(src/config/versionary)
    fi
fi

build_with_buildah() {
    echo "Building with container runtime (buildah) with VERSION=${VERSION}..."

    tempdir=$(mktemp -d --tmpdir=tmp "build-with-buildah.XXXXXXXX")

    # the config dir virtiofs mount is mounted ro; copy it to the tempdir
    cp -r src/config/ "${tempdir}/src"

    tmp_oci_archive_path=$(realpath "${tempdir}/out.ociarchive")

    initconfig="src/config.json"
    if [ -f "${initconfig}" ]; then
        variant="$(jq --raw-output '."coreos-assembler.config-variant"' "${initconfig}")"
        manifest="src/config/manifest-${variant}.yaml"
        argsfile=build-args-${variant}.conf
    else
        manifest="src/config/manifest.yaml"
        argsfile=build-args.conf
    fi

    if [ -e "builds/$VERSION" ]; then
        echo "Build ${VERSION} already exists"
        exit 0
    fi

    # Apply autolock from another build for this version (or for another version if
    # explicitly provided via --autolock) if no base lockfile exists.
    lockfile="manifest-lock.${arch}.json"
    if [ ! -f "src/config/${lockfile}" ] && { [ -n "${VERSION}" ] || [ -n "${AUTOLOCK_VERSION}" ]; }; then
        autolockfile=$(tmprepo=tmp/repo; workdir=.;
                       generate_autolock "${AUTOLOCK_VERSION:-${VERSION}}")
        if [ -n "${autolockfile}" ]; then
            echo "Injecting autolock-generated ${lockfile}..."
            cp "${autolockfile}" "${tempdir}/src/${lockfile}"
        fi
    fi

    set -- build --security-opt=label=disable --cap-add=all --device /dev/fuse \
            --build-arg-file "$argsfile" -v "$(realpath "${tempdir}/src")":/run/src \
            --build-arg VERSION="${VERSION}" \
            -t oci-archive:"${tmp_oci_archive_path}"

    # XXX: Temporary hack until we have https://github.com/coreos/rpm-ostree/pull/5454
    # which would allow us to fold this back into the build process.
    # shellcheck source=/dev/null
    stream=$(yaml2json "$manifest" /dev/stdout | jq -r '.variables.stream')
    if [ "${stream}" != null ]; then
        set -- "$@" --label fedora-coreos.stream="$stream"
    fi

    if [ -d "src/yumrepos" ] && [ -e "src/yumrepos/${variant:-}.repo" ]; then
        set -- "$@" --secret id=yumrepos,src="$(realpath "src/yumrepos/$variant.repo")" \
                    --secret id=contentsets,src="$(realpath src/yumrepos/content_sets.yaml)" \
                    -v /etc/pki/ca-trust:/etc/pki/ca-trust:ro
    fi

    if [ -d overrides ]; then
        if [[ -n $(ls overrides/rpm/*.rpm 2> /dev/null) ]]; then
            (cd overrides/rpm && rm -rf .repodata && createrepo_c .)
        fi
        set -- "$@" -v "$(realpath overrides)":/run/src/overrides
    fi

    if [ -n "$DIRECT" ]; then
        # turn on layer caching in the direct case; it wouldn't hurt in the
        # supermin path, but it'd be a waste of space on the rootfs
        env -C "${tempdir}/src" buildah "$@" --layers=true .
    else
        /usr/lib/coreos-assembler/cmd-supermin-run --cache \
            env -C "${tempdir}/src" TMPDIR="$(realpath cache)" buildah "$@" .
    fi

    /usr/lib/coreos-assembler/cmd-import "oci-archive:${tmp_oci_archive_path}"

    rm -rf "${tempdir}"
}

build_with_buildah
