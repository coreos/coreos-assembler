#!/usr/bin/env python3
# NOTE: PYTHONUNBUFFERED is set in the entrypoint for unbuffered output
#
# An operation that creates an ISO image for installing CoreOS

import argparse
import json
import os
import re
import shutil
import struct
import subprocess
import sys
import tarfile
import tempfile
import yaml
import glob

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from cosalib.builds import Builds
from cosalib.cmdlib import run_verbose, write_json, sha256sum_file
from cosalib.cmdlib import import_ostree_commit, get_basearch


def ostree_extract_efi(repo, commit, destdir):
    """Given an OSTree commit, extract the EFI parts"""
    ostreeefidir = "/usr/lib/ostree-boot/efi/EFI"
    run_verbose(['/usr/bin/ostree', 'checkout', '--repo', repo,
                 '--user-mode', '--subpath', ostreeefidir,
                 commit, destdir])


live_exclude_kargs = set([
    '$ignition_firstboot',   # unsubstituted variable in grub config
    'console',               # no serial console by default on ISO
    'ignition.platform.id',  # we hardcode "metal"
    'ostree',                # dracut finds the tree automatically
    'rhcos.root',            # This one is set in RHCOS for the legacy LUKS path
])

# Parse args and dispatch
parser = argparse.ArgumentParser()
parser.add_argument("--build", help="Build ID")
parser.add_argument("--force", action='store_true', default=False,
                    help="Overwrite previously generated installer")
parser.add_argument("--no-pxe", action='store_true', default=False,
                    help="Do not generate PXE media")
args = parser.parse_args()

# Identify the builds and target the latest build if none provided
builds = Builds()
if not args.build:
    args.build = builds.get_latest()
print(f"Targeting build: {args.build}")

with open('src/config/image.yaml') as fh:
    image_yaml = yaml.safe_load(fh)
squashfs_compression = image_yaml.get('squashfs-compression', 'zstd')

# We make this a knob so that RHCOS can disable it until it supports osmet. See
# https://github.com/coreos/coreos-installer/issues/224.
osmet = image_yaml.get('osmet', True)

# Hacky mode switch, until we can drop support for the installer images
is_live = os.path.basename(sys.argv[0]).endswith('-live')
if is_live:
    image_type = 'live'
else:
    image_type = 'installer'
meta_keys = {k: 'live-' + k if is_live else k for k in ('iso', 'kernel', 'initramfs')}

config_src = image_type
srcdir_prefix = f"src/config/{config_src}/"

if not os.path.isdir(srcdir_prefix):
    raise Exception(f"missing directory {srcdir_prefix}")

workdir = os.path.abspath(os.getcwd())
builddir = builds.get_build_dir(args.build)
buildmeta_path = os.path.join(builddir, 'meta.json')
with open(buildmeta_path) as f:
    buildmeta = json.load(f)

# Grab the commit hash for this build
buildmeta_commit = buildmeta['ostree-commit']

repo = os.path.join(workdir, 'tmp/repo')

# Don't run if it's already been done, unless forced
if meta_keys['iso'] in buildmeta['images'] and not args.force:
    print(f"'{image_type}' has already been built for {args.build}. Skipping.")
    print("You can force a rebuild with '--force'.")
    sys.exit(0)

basearch = get_basearch()
base_name = buildmeta['name']
iso_name = f'{base_name}-{args.build}-{image_type}.{basearch}.iso'
name_version = f'{base_name}-{args.build}'
# The short volume ID can only be 32 characters (bytes probably).  We may in the future want
# to shorten this more intelligently, otherwise we truncate the
# version which may impede uniqueness.
volid = name_version[0:32]

tmpdir = os.environ.get("FORCE_TMPDIR", f"{workdir}/tmp/buildpost-{image_type}")
if os.path.isdir(tmpdir):
    shutil.rmtree(tmpdir)

tmpisoroot = os.path.join(tmpdir, image_type)
tmpisoimages = os.path.join(tmpisoroot, 'images')
tmpisoisolinux = os.path.join(tmpisoroot, 'isolinux')

os.mkdir(tmpdir)
os.mkdir(tmpisoroot)
os.mkdir(tmpisoimages)
os.mkdir(tmpisoisolinux)

# Number of padding bytes at the end of the ISO initramfs for embedding
# an Ignition config
initrd_ignition_padding = 256 * 1024


# https://www.kernel.org/doc/html/latest/admin-guide/initrd.html#compressed-cpio-images
def mkinitrd_pipe(tmproot, destf, compression=True):
    findproc = subprocess.Popen(['find', '.', '-mindepth', '1', '-print0'],
                                cwd=tmproot, stdout=subprocess.PIPE)
    cpioproc = subprocess.Popen(['cpio', '-o', '-H', 'newc', '-R', 'root:root',
            '--quiet', '--reproducible', '--force-local', '--null',
            '-D', tmproot], stdin=findproc.stdout, stdout=subprocess.PIPE)
    gzipargs = ['gzip']
    if not compression:
        gzipargs.append('-1')
    gzipproc = subprocess.Popen(gzipargs, stdin=cpioproc.stdout, stdout=destf)
    assert cpioproc.wait() == 0, f"cpio exited with {cpioproc.returncode}"
    assert findproc.wait() == 0, f"find exited with {findproc.returncode}"
    assert gzipproc.wait() == 0, f"gzip exited with {gzipproc.returncode}"


def extend_initrd(initramfs, tmproot, compression=True):
    with open(initramfs, 'ab') as fdst:
        mkinitrd_pipe(tmproot, fdst, compression=compression)


def cp_reflink(src, dest):
    subprocess.check_call(['cp', '--reflink=auto', src, dest])


def generate_iso():
    # convention for kernel and initramfs names
    kernel_img = 'vmlinuz'
    initramfs_img = 'initramfs.img'

    tmpisofile = os.path.join(tmpdir, iso_name)
    img_metal_obj = buildmeta['images'].get('metal')
    if img_metal_obj is None:
        raise Exception("ISO generation requires `metal` image")

    img_metal = os.path.join(builddir, img_metal_obj['path'])
    img_metal_checksum = img_metal_obj['sha256']

    # Find the directory under `/usr/lib/modules/<kver>` where the
    # kernel/initrd live. It will be the 2nd entity output by
    # `ostree ls <commit> /usr/lib/modules`
    process = run_verbose(['/usr/bin/ostree', 'ls', '--repo', repo,
                           '--nul-filenames-only', f"{buildmeta_commit}",
                           '/usr/lib/modules'], capture_output=True)
    moduledir = process.stdout.decode().split('\0')[1]

    # copy those files out of the ostree into the iso root dir
    for file in [kernel_img, initramfs_img]:
        run_verbose(['/usr/bin/ostree', 'checkout', '--force-copy', '--repo', repo,
                     '--user-mode', '--subpath', os.path.join(moduledir, file),
                     f"{buildmeta_commit}", tmpisoimages])
        # initramfs isn't world readable by default so let's open up perms
        os.chmod(os.path.join(tmpisoimages, file), 0o755)

    initramfs = os.path.join(tmpisoimages, initramfs_img)
    base_initramfs = os.path.join(tmpdir, initramfs_img)
    shutil.move(initramfs, base_initramfs)
    # Append the "stampfile initramfs" to the base which says
    # whether it's a live or legacy initramfs.
    with tempfile.TemporaryDirectory(prefix='initramfs', dir=tmpdir) as tmproot:
        if is_live:
            stampname = 'etc/coreos-live-initramfs'
        else:
            stampname = 'etc/coreos-legacy-installer-initramfs'
        stamppath = os.path.join(tmproot, stampname)
        os.makedirs(os.path.dirname(stamppath), exist_ok=True)
        open(stamppath, 'w').close()
        extend_initrd(base_initramfs, tmproot)

    if is_live and osmet:
        with tempfile.TemporaryDirectory(prefix='initramfs', dir=tmpdir) as tmproot:
            tmp_osmet = os.path.join(tmproot, img_metal_obj['path'] + '.osmet')
            print(f'Generating osmet file')
            run_verbose(['/usr/lib/coreos-assembler/osmet-pack',
                        img_metal, tmp_osmet, img_metal_checksum])
            extend_initrd(base_initramfs, tmproot, compression=False)

    # The base_initramfs from here is shared between the ISO and PXE paths
    cp_reflink(base_initramfs, initramfs)

    tmp_squashfs = None
    if is_live:
        print(f'Compressing squashfs with {squashfs_compression}')
        tmp_squashfs = os.path.join(tmpisoroot, 'root.squashfs')
        run_verbose(['/usr/lib/coreos-assembler/gf-mksquashfs',
                    img_metal, tmp_squashfs, squashfs_compression])

        # Add the padding
        with open(initramfs, 'ab') as fdst:
            fdst.write(bytes(initrd_ignition_padding))

    # Read and filter kernel arguments for substituting into ISO bootloader
    result = run_verbose(['/usr/lib/coreos-assembler/gf-get-kargs',
            img_metal], stdout=subprocess.PIPE, text=True)
    kargs_array = [karg for karg in result.stdout.split()
            if karg.split('=')[0] not in live_exclude_kargs]
    kargs_array.append(f"coreos.liveiso={volid}")
    kargs = ' '.join(kargs_array)
    print(f'Substituting ISO kernel arguments: {kargs}')

    # Grab all the contents from the installer dir from the configs
    for srcdir, _, filenames in os.walk(srcdir_prefix):
        dir_suffix = srcdir.replace(srcdir_prefix, '', 1)
        dstdir = os.path.join(tmpisoroot, dir_suffix)
        if not os.path.exists(dstdir):
            os.mkdir(dstdir)
        for filename in filenames:
            # Skip development readmes to avoid confusing users
            if filename == 'README-devel.md':
                continue
            srcfile = os.path.join(srcdir, filename)
            dstfile = os.path.join(dstdir, filename)
            # Assumes all files are text
            with open(srcfile) as fh:
                buf = fh.read()
            buf = buf.replace('@@KERNEL-ARGS@@', kargs)
            with open(dstfile, 'w') as fh:
                fh.write(buf)
            shutil.copystat(srcfile, dstfile)
            print(f'{srcfile} -> {dstfile}')

    # These sections are based on lorax templates
    # see https://github.com/weldr/lorax/tree/master/share/templates.d/99-generic

    # Generate the ISO image. Lots of good info here:
    # https://fedoraproject.org/wiki/User:Pjones/BootableCDsForBIOSAndUEFI
    genisoargs = ['/usr/bin/genisoimage', '-verbose',
                  '-V', volid,
                  '-volset', f"{name_version}",
                  # For  greater portability, consider using both
                  # Joliet and Rock Ridge extensions. Umm, OK :)
                  '-rational-rock', '-J', '-joliet-long']

    # For x86_64 legacy boot (BIOS) booting
    if basearch == "x86_64":
        # Install binaries from syslinux package
        isolinuxfiles = [('/usr/share/syslinux/isolinux.bin', 0o755),
                         ('/usr/share/syslinux/ldlinux.c32',  0o755),
                         ('/usr/share/syslinux/libcom32.c32', 0o755),
                         ('/usr/share/syslinux/libutil.c32',  0o755),
                         ('/usr/share/syslinux/vesamenu.c32', 0o755)]
        for src, mode in isolinuxfiles:
            dst = os.path.join(tmpisoisolinux, os.path.basename(src))
            shutil.copyfile(src, dst)
            os.chmod(dst, mode)

        # for legacy bios boot AKA eltorito boot
        genisoargs += ['-eltorito-boot', 'isolinux/isolinux.bin',
                       '-eltorito-catalog', 'isolinux/boot.cat',
                       '-no-emul-boot',
                       '-boot-load-size', '4',
                       '-boot-info-table']

    elif basearch == "ppc64le":
        os.makedirs(os.path.join(tmpisoroot, 'boot/grub'))
        # can be EFI/fedora or EFI/redhat
        grubpath = glob.glob(os.path.join(tmpisoroot, 'EFI/*/grub.cfg'))
        shutil.move(grubpath[0], os.path.join(tmpisoroot, 'boot/grub/grub.cfg'))

        # safely remove things we don't need in the final ISO tree
        for d in ['EFI', 'isolinux', 'zipl.prm']:
            run_verbose(['rm', '-rf', os.path.join(tmpisoroot, d)])

        # grub2-mkrescue is a wrapper around xorriso
        genisoargs = ['grub2-mkrescue', '-volid', volid]
    elif basearch == "s390x":
        # Reserve 32MB for the kernel, starting memory address of the initramfs
        # See https://github.com/weldr/lorax/blob/master/share/templates.d/99-generic/s390.tmpl
        INITRD_ADDRESS = '0x02000000'
        lorax_templates = '/usr/share/lorax/templates.d/99-generic/config_files/s390'
        shutil.copy(os.path.join(lorax_templates, 'redhat.exec'), tmpisoimages)
        with open(os.path.join(lorax_templates, 'generic.ins'), 'r') as fp1:
            with open(os.path.join(tmpisoroot, 'generic.ins'), 'w') as fp2:
                [fp2.write(line.replace('@INITRD_LOAD_ADDRESS@', INITRD_ADDRESS)) for line in fp1]
        for prmfile in ['cdboot.prm', 'genericdvd.prm', 'generic.prm']:
            with open(os.path.join(tmpisoimages, prmfile), 'w') as fp1:
                line1 = 'cio_ignore=all,!condev rd.cmdline=ask'
                with open(os.path.join(tmpisoroot, 'zipl.prm'), 'r') as fp2:
                    line1 += ' ' + ' '.join([line2.strip('\n') for line2 in fp2])
                fp1.write(line1)

        # s390x's z/VM CMS files are limited to 8 char for filenames and extensions
        # Also it is nice to keep naming convetion with Fedora/RHEL for existing users and code
        kernel_dest = os.path.join(tmpisoimages, 'kernel.img')
        shutil.move(os.path.join(tmpisoimages, kernel_img), kernel_dest)
        kernel_img = 'kernel.img'
        initramfs_dest = os.path.join(tmpisoimages, 'initrd.img')
        shutil.move(initramfs, initramfs_dest)
        initramfs = initramfs_dest

        # combine kernel, initramfs and cmdline using lorax/mk-s390-cdboot tool
        run_verbose(['/usr/bin/mk-s390-cdboot',
                     '-i', kernel_dest,
                     '-r', initramfs,
                     '-p', os.path.join(tmpisoimages, 'cdboot.prm'),
                     '-o', os.path.join(tmpisoimages, 'cdboot.img')])
        # generate .addrsize file for LPAR
        with open(os.path.join(tmpisoimages, 'initrd.addrsize'), 'wb') as addrsize:
            addrsize_data = struct.pack(">iiii", 0, int(INITRD_ADDRESS, 16), 0,
                                        os.stat(initramfs).st_size)
            addrsize.write(addrsize_data)

        # safely remove things we don't need in the final ISO tree
        for d in ['EFI', 'isolinux', 'zipl.prm']:
            run_verbose(['rm', '-rf', os.path.join(tmpisoroot, d)])

        genisoargs = ['/usr/bin/xorrisofs', '-verbose',
                      '-volid', volid,
                      '-volset', f"{name_version}",
                      '-rational-rock', '-J', '-joliet-long',
                      '-no-emul-boot', '-eltorito-boot',
                      os.path.join(os.path.relpath(tmpisoimages, tmpisoroot), 'cdboot.img')]

    # For x86_64 and aarch64 UEFI booting
    if basearch in ("x86_64", "aarch64"):
        # Create the efiboot.img file. This is a fat32 formatted
        # filesystem that contains all the files needed for EFI boot
        # from an ISO.
        with tempfile.TemporaryDirectory():

            # In restrictive environments, setgid, setuid and ownership changes
            # may be restricted. This sets the file ownership to root and
            # removes the setgid and setuid bits in the tarball.
            def strip(tarinfo):
                tarinfo.uid = 0
                tarinfo.gid = 0
                if tarinfo.isdir():
                    tarinfo.mode = 0o755
                elif tarinfo.isfile():
                    tarinfo.mode = 0o0644
                return tarinfo

            tmpimageefidir = os.path.join(tmpdir, "efi")
            ostree_extract_efi(repo, buildmeta_commit, tmpimageefidir)

            # Install binaries from boot partition
            # Manually construct the tarball to ensure proper permissions and ownership
            efitarfile = tempfile.NamedTemporaryFile(suffix=".tar")
            with tarfile.open(efitarfile.name, "w:", dereference=True) as tar:
                tar.add(tmpimageefidir, arcname="/EFI", filter=strip)

            # Create the efiboot.img file (a fat filesystem) in the images/ dir
            # Note: virt-make-fs lets us do this as non-root
            efibootfile = os.path.join(tmpisoimages, 'efiboot.img')
            os.environ["LIBGUESTFS_BACKEND"] = "direct"
            run_verbose(['virt-make-fs', '--type=vfat', efitarfile.name,
                         efibootfile])

        genisoargs += ['-eltorito-alt-boot',
                       '-efi-boot', 'images/efiboot.img',
                       '-no-emul-boot']

    # Define inputs and outputs
    genisoargs += ['-o', tmpisofile, tmpisoroot]

    run_verbose(genisoargs)

    # Add MBR for x86_64 legacy (BIOS) boot when ISO is copied to a USB stick
    if basearch == "x86_64":
        run_verbose(['/usr/bin/isohybrid', tmpisofile])

    # We've already padded the initrd with initrd_ignition_padding bytes of
    # zeroes.  Find the byte offset of that padding within the ISO image and
    # write it into a custom header at the end of the ISO 9660 System Area,
    # which is 32 KB at the start of the image "reserved for system use".
    # The System Area usually contains partition tables and the like, and
    # we're assuming that none of our platforms use the last 24 bytes of it.
    #
    # This allows an external tool, coreos-iso-embed-ignition, to modify
    # an existing ISO image to embed a user's custom Ignition config.
    # The tool wraps the Ignition config in a cpio.gz and uses our header
    # to write it directly into the ISO image.  The cpio.gz will be read
    # into the initramfs filesystem at runtime and ignition-dracut will
    # ensure that the config is moved where Ignition will see it.
    #
    # Skip on s390x because that platform uses an embedded El Torito image
    # with its own copy of the initramfs.
    if is_live and basearch != "s390x":
        isoinfo = run_verbose(['isoinfo', '-lR', '-i', tmpisofile],
                stdout=subprocess.PIPE, text=True)
        # -rw-rw-r--   1 1750 1750       553961457 Sep 18 2019 [   4733 00]  initramfs.img
        #                           match the logical block number ^^^^ ||
        #                                          file type, always 00 ^^
        matches = list(re.finditer(r'\[\s*([0-9]+) 00\]\s+{}\s*$'.format(initramfs_img),
                isoinfo.stdout, re.MULTILINE))
        if len(matches) != 1:
            raise Exception('Found {} copies of {}'.format(len(matches), initramfs_img))
        # Start of the initramfs within the ISO
        offset = int(matches[0].group(1)) * 2048  # assume 2 KB per logical block
        # End of the initramfs within the ISO
        offset += os.stat(initramfs).st_size
        # Start of the initramfs padding
        offset -= initrd_ignition_padding
        with open(tmpisofile, 'r+b') as isofh:
            # Verify that the calculated byte range is empty
            isofh.seek(offset)
            if isofh.read(initrd_ignition_padding) != bytes(initrd_ignition_padding):
                raise Exception(f'ISO image {initrd_ignition_padding} bytes at {offset} are not zero')
            # Write header at the end of the System Area
            fmt = '<8s2Q'
            isofh.seek(32768 - struct.calcsize(fmt))
            # Magic number + offset + length
            isofh.write(struct.pack(fmt, b'coreiso+', offset, initrd_ignition_padding))
            print(f'Embedded {initrd_ignition_padding} bytes Ignition config space at {offset}')

    buildmeta['images'].update({
        meta_keys['iso']: {
            'path': iso_name,
            'sha256': sha256sum_file(tmpisofile)
        }
    })
    shutil.move(tmpisofile, f"{builddir}/{iso_name}")

    if not args.no_pxe:
        kernel_name = f'{base_name}-{args.build}-{image_type}-kernel-{basearch}'
        initramfs_name = f'{base_name}-{args.build}-{image_type}-initramfs.{basearch}.img'
        kernel_file = os.path.join(builddir, kernel_name)
        initramfs_file = os.path.join(builddir, initramfs_name)
        shutil.copyfile(os.path.join(tmpisoimages, kernel_img), kernel_file)
        cp_reflink(base_initramfs, initramfs_file)
        # Append the rootfs squashfs to the PXE initramfs, so that it can be used
        # directly for installs.
        if is_live:
            with tempfile.TemporaryDirectory(prefix='initramfs', dir=tmpdir) as tmproot:
                shutil.move(tmp_squashfs, tmproot)
                # Compression is redundant but the kernel requires it
                extend_initrd(initramfs_file, tmproot, compression=False)
        buildmeta['images'].update({
            meta_keys['kernel']: {
                'path': kernel_name,
                'sha256': sha256sum_file(kernel_file)
            },
            meta_keys['initramfs']: {
                'path': initramfs_name,
                'sha256': sha256sum_file(initramfs_file)
            }
        })

    write_json(buildmeta_path, buildmeta)
    print(f"Updated: {buildmeta_path}")


commit_tar_name = 'ostree-commit.tar'
if 'ostree' in buildmeta['images']:
    commit_tar_name = buildmeta['images']['ostree']['path']
commit_tar = os.path.join(builddir, commit_tar_name)
import_ostree_commit(repo, buildmeta_commit, commit_tar)

# Do it!
generate_iso()
