#!/usr/bin/env python3
# NOTE: PYTHONUNBUFFERED is set in cmdlib.sh for unbuffered output
#
# An operation that creates an ISO image for installing CoreOS

import argparse
import json
import os
import platform
import re
import shutil
import struct
import subprocess
import sys
import tarfile
import tempfile
import yaml

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from cosalib.builds import Builds
from cosalib.cmdlib import run_verbose, write_json, sha256sum_file
from cosalib.cmdlib import import_ostree_commit, get_basearch

live_exclude_kargs = set([
    '$ignition_firstboot',	# unsubstituted variable in grub config
    'console',			# no serial console by default on ISO
    'ignition.platform.id',	# we hardcode "metal"
    'ostree',			# dracut finds the tree automatically
    'root',			# we use root.squashfs
    'rootflags',		# not needed
    'rw',			# we have a read-only root
])

# Parse args and dispatch
parser = argparse.ArgumentParser()
parser.add_argument("--build", help="Build ID")
parser.add_argument("--force", action='store_true', default=False,
                    help="Overwrite previously generated installer")
args = parser.parse_args()

# Identify the builds and target the latest build if none provided
builds = Builds()
if not args.build:
    args.build = builds.get_latest()
print(f"Targeting build: {args.build}")

with open('src/config/image.yaml') as fh:
    image_yaml = yaml.safe_load(fh)
squashfs_compression = image_yaml.get('squashfs-compression', 'zstd')

# Hacky mode switch, until we can drop support for the installer images
is_live = os.path.basename(sys.argv[0]).endswith('-live')
image_type = 'live' if is_live else 'installer'
meta_keys = {k: 'live-' + k if is_live else k for k in ('iso', 'kernel', 'initramfs')}

workdir = os.path.abspath(os.getcwd())
builddir = builds.get_build_dir(args.build)
buildmeta_path = os.path.join(builddir, 'meta.json')
with open(buildmeta_path) as f:
    buildmeta = json.load(f)

# Grab the commit hash for this build
buildmeta_commit = buildmeta['ostree-commit']

repo = os.path.join(workdir, 'tmp/repo')

# Don't run if it's already been done, unless forced
if meta_keys['iso'] in buildmeta['images'] and not args.force:
    print(f"Image has already been built for {args.build}. Skipping.")
    print("You can force a rebuild with '--force'.")
    sys.exit(0)

basearch = get_basearch()
base_name = buildmeta['name']
iso_name = f'{base_name}-{args.build}-{image_type}.{basearch}.iso'
name_version = f'{base_name}-{args.build}'

tmpdir = os.environ.get("FORCE_TMPDIR", f"{workdir}/tmp/buildpost-{image_type}")
if os.path.isdir(tmpdir):
    shutil.rmtree(tmpdir)

tmpisoroot = os.path.join(tmpdir, image_type)
tmpisoimages = os.path.join(tmpisoroot, 'images')
tmpisoisolinux = os.path.join(tmpisoroot, 'isolinux')

os.mkdir(tmpdir)
os.mkdir(tmpisoroot)
os.mkdir(tmpisoimages)
os.mkdir(tmpisoisolinux)

# Number of padding bytes at the end of the ISO initramfs for embedding
# an Ignition config
initrd_ignition_padding = 256 * 1024

def generate_iso():
    tmpisofile = os.path.join(tmpdir, iso_name)
    img_qemu = os.path.join(builddir, buildmeta['images']['qemu']['path'])

    # Find the directory under `/usr/lib/modules/<kver>` where the
    # kernel/initrd live. It will be the 2nd entity output by
    # `ostree ls <commit> /usr/lib/modules`
    process = run_verbose(['/usr/bin/ostree', 'ls', '--repo', repo,
                           '--nul-filenames-only', f"{buildmeta_commit}",
                           '/usr/lib/modules'], capture_output=True)
    moduledir = process.stdout.decode().split('\0')[1]

    # copy those files out of the ostree into the iso root dir
    for file in ['initramfs.img', 'vmlinuz']:
        run_verbose(['/usr/bin/ostree', 'checkout', '--repo', repo,
                     '--user-mode', '--subpath', os.path.join(moduledir, file),
                     f"{buildmeta_commit}", tmpisoimages])
        # initramfs isn't world readable by default so let's open up perms
        os.chmod(os.path.join(tmpisoimages, file), 0o755)

    if is_live:
        initramfs = os.path.join(tmpisoimages, 'initramfs.img')
        tmp_squashfs = os.path.join(tmpdir, 'root.squashfs')
        tmp_cpio = os.path.join(tmpdir, 'root.cpio')
        tmp_initramfs = os.path.join(tmpdir, 'initramfs')

        print(f'Compressing squashfs with {squashfs_compression}')
        run_verbose(['/usr/lib/coreos-assembler/gf-mksquashfs',
                     img_qemu, tmp_squashfs, squashfs_compression])
        run_verbose(['cpio', '-o', '-H', 'newc', '-R', 'root:root',
                '--quiet', '--reproducible', '--force-local',
                '-D', os.path.dirname(tmp_squashfs), '-O', tmp_cpio],
                input=os.path.basename(tmp_squashfs).encode())
        # Compression is redundant but the kernel requires it
        run_verbose(['gzip', '-1', tmp_cpio])

        # Append the root cpio to the initramfs.
        # The initramfs image is a hardlink to the uncompressed objects
        # cache, so we can't modify it in place.
        with open(tmp_initramfs, 'wb') as fdst:
            with open(initramfs, 'rb') as fsrc:
                shutil.copyfileobj(fsrc, fdst)
            with open(tmp_cpio + '.gz', 'rb') as fsrc:
                shutil.copyfileobj(fsrc, fdst)
            # Pad with NUL bytes for the ISO image.  We'll truncate the
            # padding off again when copying the PXE initrd.
            fdst.write(bytes(initrd_ignition_padding))
        os.rename(tmp_initramfs, initramfs)
        os.unlink(tmp_squashfs)

    # Read and filter kernel arguments for substituting into ISO bootloader
    result = run_verbose(['/usr/lib/coreos-assembler/gf-get-kargs',
            img_qemu], stdout=subprocess.PIPE, text=True)
    kargs = ' '.join(karg for karg in result.stdout.split()
            if karg.split('=')[0] not in live_exclude_kargs)
    print(f'Substituting ISO kernel arguments: {kargs}')

    # Grab all the contents from the installer dir from the configs
    srcdir_prefix=f"src/config/{image_type}/"
    for srcdir, dirnames, filenames in os.walk(srcdir_prefix):
        dir_suffix = srcdir.replace(srcdir_prefix, '', 1)
        dstdir = os.path.join(tmpisoroot, dir_suffix)
        if not os.path.exists(dstdir):
            os.mkdir(dstdir)
        for filename in filenames:
            # Skip development readmes to avoid confusing users
            if filename == 'README-devel.md':
                continue
            srcfile = os.path.join(srcdir, filename)
            dstfile = os.path.join(dstdir, filename)
            # Assumes all files are text
            with open(srcfile) as fh:
                buf = fh.read()
            buf = buf.replace('@@KERNEL-ARGS@@', kargs)
            with open(dstfile, 'w') as fh:
                fh.write(buf)
            shutil.copystat(srcfile, dstfile)
            print(f'{srcfile} -> {dstfile}')

    # These sections are based on lorax templates
    # see https://github.com/weldr/lorax/tree/master/share/templates.d/99-generic

    # Generate the ISO image. Lots of good info here:
    # https://fedoraproject.org/wiki/User:Pjones/BootableCDsForBIOSAndUEFI
    genisoargs = ['/usr/bin/genisoimage', '-verbose',
                  '-volset', f"{name_version}",
                  # For  greater portability, consider using both
                  # Joliet and Rock Ridge extensions. Umm, OK :)
                  '-rational-rock', '-J', '-joliet-long']

    ### For x86_64 legacy boot (BIOS) booting
    if basearch == "x86_64":
        # Install binaries from syslinux package
        isolinuxfiles = [('/usr/share/syslinux/isolinux.bin', 0o755),
                         ('/usr/share/syslinux/ldlinux.c32',  0o755),
                         ('/usr/share/syslinux/libcom32.c32', 0o755),
                         ('/usr/share/syslinux/libutil.c32',  0o755),
                         ('/usr/share/syslinux/vesamenu.c32', 0o755)]
        for src, mode in isolinuxfiles:
            dst = os.path.join(tmpisoisolinux, os.path.basename(src))
            shutil.copyfile(src, dst)
            os.chmod(dst, mode)

        # for legacy bios boot AKA eltorito boot
        genisoargs += ['-eltorito-boot', 'isolinux/isolinux.bin',
                       '-eltorito-catalog', 'isolinux/boot.cat',
                       '-no-emul-boot',
                       '-boot-load-size', '4',
                       '-boot-info-table']

    elif basearch == "ppc64le":
        genisoargs += ['-r', '-l', '-sysid', 'PPC',
                       '-chrp-boot', '-graft-points']
    elif basearch == "s390x":
        # combine kernel, initramfs and cmdline using lorax/mk-s390-cdboot tool
        run_verbose(['/usr/bin/mk-s390-cdboot',
                     '-i', os.path.join(tmpisoimages, 'vmlinuz'),
                     '-r', os.path.join(tmpisoimages, 'initramfs.img'),
                     '-p', os.path.join(tmpisoroot, 'zipl.prm'),
                     '-o', os.path.join(tmpisoimages, 'fcos.img')])
        genisoargs = ['/usr/bin/xorrisofs', '-verbose',
                      '-volset', f"{name_version}",
                      '-rational-rock', '-J', '-joliet-long',
                      '-no-emul-boot', '-eltorito-boot',
                      os.path.join(os.path.relpath(tmpisoimages, tmpisoroot), 'fcos.img')]

    ### For x86_64 and aarch64 UEFI booting
    if basearch in ("x86_64", "aarch64"):
        # Create the efiboot.img file. This is a fat32 formatted
        # filesystem that contains all the files needed for EFI boot
        # from an ISO.
        with tempfile.TemporaryDirectory() as tmpefidir:

            # In restrictive environments, setgid, setuid and ownership changes
            # may be restricted. This sets the file ownership to root and
            # removes the setgid and setuid bits in the tarball.
            def strip(tarinfo):
                tarinfo.uid = 0
                tarinfo.gid = 0
                if tarinfo.isdir():
                    tarinfo.mode = 0o755
                elif tarinfo.isfile():
                    tarinfo.mode = 0o0644
                return tarinfo

            tmpimageefidir = os.path.join(tmpdir, "efi")
            os.makedirs(tmpimageefidir)
            ostreeefidir="/usr/lib/ostree-boot/efi/EFI"

            # Fetch a list of folders in ostree EFI dir
            process = run_verbose(['/usr/bin/ostree', 'ls', '--repo', repo,
                                '--nul-filenames-only', f"{buildmeta_commit}",
                                ostreeefidir], capture_output=True)
            ostreeefidirfiles = process.stdout.decode().split('\0')[1:]
            ostreeefisubdirs = [x.replace(f"{ostreeefidir}/", '') for x in ostreeefidirfiles]

            for folder in ostreeefisubdirs:
                if not folder:
                    continue
                folderfullpath = os.path.join(ostreeefidir, folder)
                # copy files to a temporary directory
                destdir = os.path.join(tmpimageefidir, folder)
                run_verbose(['/usr/bin/ostree', 'checkout', '--repo', repo,
                            '--user-mode', '--subpath', folderfullpath,
                            f"{buildmeta_commit}", destdir])

            # Install binaries from boot partition
            # Manually construct the tarball to ensure proper permissions and ownership
            efitarfile = tempfile.NamedTemporaryFile(suffix=".tar")
            with tarfile.open(efitarfile.name, "w:", dereference=True) as tar:
                tar.add(tmpimageefidir, arcname="/EFI", filter=strip)

            # Create the efiboot.img file (a fat filesystem) in the images/ dir
            # Note: virt-make-fs lets us do this as non-root
            efibootfile = os.path.join(tmpisoimages, 'efiboot.img')
            run_verbose(['virt-make-fs', '--type=vfat', efitarfile.name,
                         efibootfile])

        genisoargs += ['-eltorito-alt-boot',
                       '-efi-boot', 'images/efiboot.img',
                       '-no-emul-boot']

    # Define inputs and outputs
    genisoargs += ['-o', tmpisofile, tmpisoroot]

    run_verbose(genisoargs)

    # Add MBR for x86_64 legacy (BIOS) boot when ISO is copied to a USB stick
    if basearch == "x86_64":
        run_verbose(['/usr/bin/isohybrid', tmpisofile])

    # We've already padded the initrd with initrd_ignition_padding bytes of
    # zeroes.  Find the byte offset of that padding within the ISO image and
    # write it into a custom header at the end of the ISO 9660 System Area,
    # which is 32 KB at the start of the image "reserved for system use".
    # The System Area usually contains partition tables and the like, and
    # we're assuming that none of our platforms use the last 24 bytes of it.
    #
    # This allows an external tool, coreos-iso-embed-ignition, to modify
    # an existing ISO image to embed a user's custom Ignition config.
    # The tool wraps the Ignition config in a cpio.gz and uses our header
    # to write it directly into the ISO image.  The cpio.gz will be read
    # into the initramfs filesystem at runtime and ignition-dracut will
    # ensure that the config is moved where Ignition will see it.
    #
    # Skip on s390x because that platform uses an embedded El Torito image
    # with its own copy of the initramfs.
    if is_live and basearch != "s390x":
        isoinfo = run_verbose(['isoinfo', '-lR', '-i', tmpisofile],
                stdout=subprocess.PIPE, text=True)
        # -rw-rw-r--   1 1750 1750       553961457 Sep 18 2019 [   4733 00]  initramfs.img 
        #                           match the logical block number ^^^^ ||
        #                                          file type, always 00 ^^
        matches = list(re.finditer(r'\[\s*([0-9]+) 00\]\s+initramfs\.img\s*$',
                isoinfo.stdout, re.MULTILINE))
        if len(matches) != 1:
            raise Exception('Found {} copies of initramfs.img'.format(len(matches)))
        # Start of the initramfs within the ISO
        offset = int(matches[0].group(1)) * 2048  # assume 2 KB per logical block
        # End of the initramfs within the ISO
        offset += os.stat(os.path.join(tmpisoimages, "initramfs.img")).st_size
        # Start of the initramfs padding
        offset -= initrd_ignition_padding
        with open(tmpisofile, 'r+b') as isofh:
            # Verify that the calculated byte range is empty
            isofh.seek(offset)
            if isofh.read(initrd_ignition_padding) != bytes(initrd_ignition_padding):
                raise Exception(f'ISO image {initrd_ignition_padding} bytes at {offset} are not zero')
            # Write header at the end of the System Area
            fmt = '<8s2Q'
            isofh.seek(32768 - struct.calcsize(fmt))
            # Magic number + offset + length
            isofh.write(struct.pack(fmt, b'coreiso+', offset, initrd_ignition_padding))
            print(f'Embedded {initrd_ignition_padding} bytes Ignition config space at {offset}')

    kernel_name = f'{base_name}-{args.build}-{image_type}-kernel-{basearch}'
    initramfs_name = f'{base_name}-{args.build}-{image_type}-initramfs.{basearch}.img'
    kernel_file = os.path.join(builddir, kernel_name)
    initramfs_file = os.path.join(builddir, initramfs_name)
    shutil.copyfile(os.path.join(tmpisoimages, "vmlinuz"), kernel_file)
    with open(os.path.join(tmpisoimages, "initramfs.img"), 'rb') as fsrc:
        with open(initramfs_file, 'wb') as fdst:
            shutil.copyfileobj(fsrc, fdst)
            if is_live:
                # Verify ISO initrd padding and truncate it away
                pad_offset = fsrc.tell() - initrd_ignition_padding
                fsrc.seek(pad_offset)
                if fsrc.read() != bytes(initrd_ignition_padding):
                    raise Exception(f"Expected {initrd_ignition_padding} bytes of trailing zeroes in initrd, didn't find it")
                fdst.truncate(pad_offset)

    kernel_checksum = sha256sum_file(kernel_file)
    initramfs_checksum = sha256sum_file(initramfs_file)
    checksum = sha256sum_file(tmpisofile)

    buildmeta['images'].update({
        meta_keys['iso']: {
            'path': iso_name,
            'sha256': checksum
        },
        meta_keys['kernel']: {
            'path': kernel_name,
            'sha256': kernel_checksum
        },
        meta_keys['initramfs']: {
            'path': initramfs_name,
            'sha256': initramfs_checksum
        }
    })
    os.rename(tmpisofile, f"{builddir}/{iso_name}")
    write_json(buildmeta_path, buildmeta)
    print(f"Updated: {buildmeta_path}")


commit_tar_name = 'ostree-commit.tar'
if 'ostree' in buildmeta['images']:
    commit_tar_name = buildmeta['images']['ostree']['path']
commit_tar = os.path.join(builddir, commit_tar_name)
import_ostree_commit(repo, buildmeta_commit, commit_tar)

# Do it!
generate_iso()
