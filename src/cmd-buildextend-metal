#!/usr/bin/env bash
set -euo pipefail

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

print_help() {
    cat 1>&2 <<'EOF'
Usage: coreos-assembler buildextend-metal --help
       coreos-assembler buildextend-metal [--build ID] [--bios] [--uefi]

  Build raw metal images for bios or metal. If neither switches are provided,
  both targets are built.
EOF
}

# Parse options
BIOS=
UEFI=
rc=0
build=
options=$(getopt --options h --longoptions help,build:,bios,uefi -- "$@") || rc=$?
[ $rc -eq 0 ] || {
    print_help
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        --bios)
            BIOS=1
            ;;
        --uefi)
            UEFI=1
            ;;
        --build)
            build=$2
            shift
            ;;
        --)
            shift
            break
            ;;
        -*)
            fatal "$0: unrecognized option: $1"
            exit 1
            ;;
        *)
            break
            ;;
    esac
    shift
done

if [ $# -ne 0 ]; then
    print_help
    fatal "Too many arguments passed"
fi

# default to both of them
if [ -z "${BIOS}" ] && [ -z "${UEFI}" ]; then
    BIOS=1
    UEFI=1
fi

export LIBGUESTFS_BACKEND=direct

prepare_build

if [ -z "${build}" ]; then
    if [ -L "${workdir}"/builds/latest ]; then
        build=$(readlink "${workdir}"/builds/latest)
    else
        fatal "No build found."
    fi
fi

builddir="${workdir}/builds/${build}"
if [ ! -d "${builddir}" ]; then
    fatal "Build dir ${builddir} does not exist."
fi

json_key() {
    jq -r ".[\"$1\"]" < "${builddir}/meta.json"
}

# reread these values from the build itself rather than rely on the ones loaded
# by prepare_build since the config might've changed since then
name=$(json_key name)
ref=$(json_key ref)
ref_is_temp=""
if [ "${ref}" = "null" ]; then
    ref="tmpref-${name}"
    ref_is_temp=1
fi

# for anaconda logs
mkdir -p tmp/anaconda

for itype in ${BIOS:+metal-bios} ${UEFI:+metal-uefi}; do
    img=${name}-${build}-${itype}.raw
    if [ -f "${builddir}/${img}" ]; then
        echo "Image $itype already exists"
        continue
    fi

    path=${PWD}/${img}
    run_virtinstall "${workdir}/repo" "${ref}" "${path}.tmp" --variant="${itype}"
    /usr/lib/coreos-assembler/gf-platformid "${path}"{.tmp,} metal
    rm -f "${path}".tmp

    # flush it out before going to the next one so we don't have to redo both if
    # the next one fails

    # there's probably a jq one-liner for this...
    python3 -c "
import sys, json
j = json.load(sys.stdin)
j['images']['$itype'] = {
    'path': '${img}',
    'sha256': '$(sha256sum_str < "${img}")',
    'size': $(stat -c '%s' "${img}")
}
json.dump(j, sys.stdout, indent=4)
" < "${builddir}/meta.json" > meta.json.new

    # and now the crucial bit
    mv -T meta.json.new "${builddir}/meta.json"
    mv -T "${img}" "${builddir}/${img}"
done
