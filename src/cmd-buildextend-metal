#!/usr/bin/env bash
set -euo pipefail

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

# This script is used for creating both the bare metal and the canonical VM
# image (qemu). `buildextend-qemu` is a symlink to `buildextend-metal`.
case "$(basename "$0")" in
    "cmd-buildextend-metal") image_type=metal;;
    "cmd-buildextend-dasd") image_type=dasd;;
    "cmd-buildextend-qemu") image_type=qemu;;
    *) fatal "called as unexpected name $0";;
esac

print_help() {
    cat 1>&2 <<EOF
Usage: coreos-assembler buildextend-${image_type} --help
       coreos-assembler buildextend-${image_type} [--build ID]

  Build a bare metal image.
EOF
}

# Parse options
rc=0
build=
options=$(getopt --options h --longoptions help,build: -- "$@") || rc=$?
[ $rc -eq 0 ] || {
    print_help
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        --build)
            build=$2
            shift
            ;;
        --)
            shift
            break
            ;;
        -*)
            fatal "$0: unrecognized option: $1"
            exit 1
            ;;
        *)
            break
            ;;
    esac
    shift
done

if [ $# -ne 0 ]; then
    print_help
    fatal "Too many arguments passed"
fi

case "$basearch" in
    "x86_64"|"aarch64"|"s390x"|"ppc64le") ;;
    *) fatal "$basearch is not supported for this command" ;;
esac

if [[ "$basearch" != "s390x" && $image_type == dasd ]]; then
    fatal "$basearch is not supported for building dasd images"
fi

export LIBGUESTFS_BACKEND=direct

prepare_build

if [ -z "${build}" ]; then
    build=$(get_latest_build)
    if [ -z "${build}" ]; then
        fatal "No build found."
    fi
fi

builddir=$(get_build_dir "$build")
if [ ! -d "${builddir}" ]; then
    fatal "Build dir ${builddir} does not exist."
fi

# check if the image already exists in the meta.json
meta_img=$(jq -r ".[\"images\"][\"${image_type}\"]" < "${builddir}/meta.json")
if [ "${meta_img}" != "null" ]; then
    echo "${image_type} image already exists:"
    echo "$meta_img"
    exit 0
fi

# reread these values from the build itself rather than rely on the ones loaded
# by prepare_build since the config might've changed since then
name=$(json_key name)
ref=$(json_key ref)
ref_is_temp=""
if [ "${ref}" = "null" ]; then
    ref="tmpref-${name}"
    ref_is_temp=1
fi
commit=$(json_key ostree-commit)

ostree_repo=${tmprepo}
rev_parsed=$(ostree rev-parse --repo="${ostree_repo}" "${ref}" 2>/dev/null || :)
if [ "${rev_parsed}" != "${commit}" ]; then
    # Probably an older commit or tmp/ was wiped. Let's extract it to a separate
    # temporary repo (not to be confused with ${tmprepo}...) so we can feed it
    # as a ref (if not temp) to Anaconda.
    echo "Cache for build ${build} is gone"
    echo "Importing commit ${commit} into temporary OSTree repo"
    mkdir -p tmp/repo
    commit_tar_name=$(jq -r .images.ostree.path < "${builddir}/meta.json")
    if [ "${commit_tar_name}" = null ]; then
        commit_tar_name=ostree-commit.tar
    fi
    tar -C tmp/repo -xf "${builddir}/${commit_tar_name}"
    ostree_repo=$PWD/tmp/repo
    if [ -n "${ref_is_temp}" ]; then
        # this gets promptly "dereferenced" back in run_virtinstall, but it
        # keeps the code below simple so it can work in both temp/not temp cases
        ostree refs --repo="${ostree_repo}" "${commit}" --create "${ref}"
    fi # otherwise, the repo already has a ref, so no need to create
fi

image_format=raw
if [[ $image_type == qemu ]]; then
    image_format=qcow2
fi

img=${name}-${build}-${image_type}.${basearch}.${image_format}
path=${PWD}/${img}

ignition_platform_id="${image_type}"
# dasd is a different disk format, but it's still metal.  Just like
# if in the future we introduce a 4k sector size x86_64 image type (metal-4k).
if [ "${image_type}" = dasd ]; then
    ignition_platform_id=metal
fi

# First parse the old luks_rootfs flag
rootfs_type="$(python3 -c 'import sys, yaml; lf=yaml.safe_load(sys.stdin).get("luks_rootfs", ""); print("luks" if lf.lower() in ("yes", "true") else "")' < "$configdir/image.yaml")"
if [ -z "${rootfs_type}" ]; then
    rootfs_type="$(python3 -c 'import sys, yaml; print(yaml.safe_load(sys.stdin).get("rootfs", "xfs"))' < "$configdir/image.yaml")"
fi

# fs-verity requires block size = page size. We need to take that into account
# in the disk size estimation due to higher fragmentation on larger blocks.
BLKSIZE=""
if [ "${rootfs_type}" = "ext4verity" ]; then
    BLKSIZE="$(getconf PAGE_SIZE)"
fi

echo "Estimating disk size..."
# The additional 35% here is obviously a hack, but we can't easily completely fill the filesystem,
# and doing so has apparently negative performance implications.
/usr/lib/coreos-assembler/estimate-commit-disk-size ${BLKSIZE:+--blksize ${BLKSIZE}} --repo "$ostree_repo" "$ref" --add-percent 35 > "$PWD/tmp/ostree-size.json"
rootfs_size="$(jq '."estimate-mb".final' "$PWD/tmp/ostree-size.json")"
# extra size is the non-ostree partitions, see create_disk.sh
image_size="$(( rootfs_size + 513 ))M"
echo "Disk size estimated to ${image_size}"

# For bare metal and dasd images, we use the estimated image size. For IaaS/virt, we get it from
# image.yaml because we want a "default" disk size that has some free space.
if [[ "${image_type}" = metal || "${image_type}" = dasd ]]; then
    # Unset the root size, which will inherit from the image size
    rootfs_size=0
else
    image_size="$(python3 -c 'import sys, yaml; print(yaml.safe_load(sys.stdin)["size"])' < "$configdir/image.yaml")G"
    rootfs_size="${rootfs_size}M"
fi

disk_args=()

set -x
# Extract the target kernel config, which may inform how we build disks.
target_moduledir=$(ostree --repo="${tmprepo}" ls "${commit}" /usr/lib/modules | grep -o '/usr/lib/modules/.*')
ostree --repo="${tmprepo}" cat "${commit}" "${target_moduledir}/config" > tmp/target-kernel.config
# Part of: https://github.com/ostreedev/ostree/pull/1959
# We need to support kernels that don't have this enabled yet, including RHEL8
# and current Fedora 31.
# https://bugzilla.redhat.com/show_bug.cgi?id=1765933
# We unconditonally enable fs-verity for /boot if we have it,
# because...integrity there is useful a bit and it will help
# us prove this out even if we're not using it for the rootfs.
if grep -Eq '^CONFIG_FS_VERITY=y' tmp/target-kernel.config; then
    disk_args+=("--boot-verity")
else
    echo 'NOTE: Missing CONFIG_FS_VERITY from target kernel config'
    sleep 1
fi
rm tmp/target-kernel.config

kargs="$(python3 -c 'import sys, yaml; args = yaml.safe_load(sys.stdin).get("extra-kargs", []); print(" ".join(args))' < "$configdir/image.yaml")"
tty="console=tty0 console=${DEFAULT_TERMINAL},115200n8"
# On each s390x hypervisor, a tty would be automatically detected by the kernel
# and systemd, there is no need to specify one. However, we keep DEFAULT_TERMINAL
# as ttysclp0, which is helpful for building/testing with KVM+virtio (cmd-run).
if [ "$basearch" == "s390x" ]; then
    tty=
fi
kargs="$kargs $tty ignition.platform.id=$ignition_platform_id"

ostree_remote="$(python3 -c 'import sys, yaml; print(yaml.safe_load(sys.stdin).get("ostree-remote", "NONE"))' < "$configdir/image.yaml")"
save_var_subdirs="$(python3 -c 'import sys, yaml; print(yaml.safe_load(sys.stdin).get("save-var-subdirs-for-selabel-workaround", "NONE"))' < "$configdir/image.yaml")"

qemu-img create -f ${image_format} "${path}.tmp" "${image_size}"
# We support deploying a commit directly instead of a ref
ref_arg=${ref}
if [ -n "${ref_is_temp}" ]; then
    ref_arg=${commit}
fi
target_drive=("-drive" "if=virtio,id=target,format=${image_format},file=${path}.tmp,cache=unsafe")
if [[ $image_format == raw && $image_type == dasd ]]; then
    target_drive=("-drive" "if=none,id=target,format=${image_format},file=${path}.tmp,cache=unsafe" \
                    # we need 4096 block size for ECKD DASD
                    "-device" "virtio-blk-ccw,drive=target,physical_block_size=4096,logical_block_size=4096,scsi=off")
fi
runvm "${target_drive[@]}" -- \
        /usr/lib/coreos-assembler/create_disk.sh \
            --disk /dev/vda \
            --buildid "${build}" \
            --imgid "${img}" \
            --grub-script /usr/lib/coreos-assembler/grub.cfg \
            --kargs "\"${kargs}\"" \
            --osname "${name}" \
            --ostree-ref "${ref_arg}" \
            --ostree-remote "${ostree_remote}" \
            --ostree-repo "${ostree_repo}" \
            --save-var-subdirs "${save_var_subdirs}" \
            --rootfs-size "${rootfs_size}" \
            --rootfs "${rootfs_type}" \
            "${disk_args[@]}"
/usr/lib/coreos-assembler/finalize-artifact "${path}.tmp" "${path}"
echo "{}" > tmp/vm-iso-checksum.json

# there's probably a jq one-liner for this...
python3 -c "
import sys, json
j = json.load(sys.stdin)
j['images']['${image_type}'] = {
    'path': '${img}',
    'sha256': '$(sha256sum_str < "${img}")',
    'size': $(stat -c '%s' "${img}")
}
json.dump(j, sys.stdout, indent=4)
" < "${builddir}/meta.json" | cat - tmp/vm-iso-checksum.json | jq -s add > meta.json.new

# and now the crucial bits
/usr/lib/coreos-assembler/finalize-artifact meta.json.new "${builddir}/meta.json"
/usr/lib/coreos-assembler/finalize-artifact "${img}" "${builddir}/${img}"
