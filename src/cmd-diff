#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
import sys
import tempfile
import time
from multiprocessing import Process

from dataclasses import dataclass
from enum import IntEnum
import guestfs
from typing import Callable

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from cosalib.builds import Builds
from cosalib.cmdlib import runcmd, import_ostree_commit


@dataclass
class DiffBuildTarget:
    id: str
    dir: str
    meta: dict

    @staticmethod
    def from_build(builds, build, arch):
        return DiffBuildTarget(build, builds.get_build_dir(build, arch),
                               builds.get_build_meta(build, arch))


class OSTreeImport(IntEnum):
    NO = 1
    PARTIAL = 2
    FULL = 3


@dataclass
class Differ:
    name: str
    description: str
    needs_ostree: OSTreeImport
    function: Callable[[DiffBuildTarget, DiffBuildTarget], None]


TMP_REPO = 'tmp/repo'

DIFF_CACHE = 'tmp/diff-cache'


def main():
    args = parse_args()
    builds = Builds()

    latest_build = builds.get_latest()

    os.makedirs(DIFF_CACHE, exist_ok=True)

    # finalize diff targets
    if args.diff_from is None and args.diff_to is None:
        # default to previous and current build
        args.diff_from = builds.get_previous()
        args.diff_to = latest_build
    elif args.diff_from is None:
        args.diff_from = latest_build
    elif args.diff_to is None:
        args.diff_to = latest_build

    if args.diff_from == 'latest':
        args.diff_from = latest_build
    if args.diff_to == 'latest':
        args.diff_to = latest_build

    if args.diff_from == args.diff_to:
        raise Exception("from and to builds are the same")

    diff_from = DiffBuildTarget.from_build(builds, args.diff_from, args.arch)
    diff_to = DiffBuildTarget.from_build(builds, args.diff_to, args.arch)

    # get activated differs
    active_differs = []
    for differ in DIFFERS:
        if getattr(args, differ.name.replace('-', '_')):
            active_differs += [differ]

    # ensure commits are imported if we know we'll need them
    ostree_import = max([d.needs_ostree for d in active_differs])
    if ostree_import > OSTreeImport.NO:
        for target in [diff_from, diff_to]:
            import_ostree_commit('.', target.dir, target.meta, extract_json=False,
                                 partial_import=(ostree_import == OSTreeImport.PARTIAL))

    # start diff'ing
    for differ in active_differs:
        differ.function(diff_from, diff_to)

    if args.gc:
        # some of the dirs in the rootfs are dumb and have "private" bits
        runcmd(['find', DIFF_CACHE, '-type', 'd', '-exec', 'chmod', 'u+rwx', '{}', '+'])
        shutil.rmtree(DIFF_CACHE)


def parse_args():
    # Parse args and dispatch
    parser = argparse.ArgumentParser()
    parser.add_argument("--from", dest='diff_from', help="First build ID")
    parser.add_argument("--to", dest='diff_to', help="Second build ID")
    parser.add_argument("--gc", action='store_true', help="Delete cached diff content")
    parser.add_argument("--arch", dest='arch', help="Architecture of builds")

    for differ in DIFFERS:
        parser.add_argument("--" + differ.name, action='store_true', default=False,
                            help=differ.description)
    return parser.parse_args()


def diff_source_control(diff_from, diff_to):
    for source in ['coreos-assembler.container-config-git', 'coreos-assembler.container-image-git']:
        config_from = diff_from.meta[source]
        config_to = diff_to.meta[source]
        config_shared_history = True
        for item in ['origin', 'branch', 'dirty']:
            if config_from[item] != config_to[item]:
                config_shared_history = False
                break
        if not config_shared_history:
            # If they weren't from the same repo/branch, etc then
            # there's not really any way to compare them easily
            # so just output the details gory details and move on.
            print(f"from: {config_from}")
            print(f"to: {config_to}")
        else:
            print(f"{config_from['origin']}: {config_from['commit'][:7]}..{config_to['commit'][:7]}")
            # If the git repo is on github (which our repos are) let's print a link
            # where a user can click (or share) and view the changes from one commit
            # to another.
            if 'github.com' in config_from['origin']:
                # Also pull off `.git` if it is on the end of the URL since the
                # compare API won't work if `.git` is in there.
                origin_url = f"{config_from['origin']}".removesuffix('.git')
                print(f"    --> {origin_url}/compare/{config_from['commit'][:7]}...{config_to['commit'][:7]}")


def diff_rpms(diff_from, diff_to):
    commit_from = diff_from.meta['ostree-commit']
    commit_to = diff_to.meta['ostree-commit']
    runcmd(['rpm-ostree', 'db', 'diff', '--repo', TMP_REPO, commit_from, commit_to])


def diff_ostree_ls(diff_from, diff_to):
    commit_from = diff_from.meta['ostree-commit']
    commit_to = diff_to.meta['ostree-commit']
    runcmd(['ostree', 'diff', '--repo', TMP_REPO, commit_from, commit_to])


def diff_ostree(diff_from, diff_to):
    commit_from = diff_from.meta['ostree-commit']
    commit_to = diff_to.meta['ostree-commit']
    checkout_from = os.path.join(cache_dir("ostree"), diff_from.id)
    checkout_to = os.path.join(cache_dir("ostree"), diff_to.id)
    if not os.path.exists(checkout_from):
        runcmd(['ostree', 'checkout', '-U', '--repo', TMP_REPO, commit_from, checkout_from])
    if not os.path.exists(checkout_to):
        runcmd(['ostree', 'checkout', '-U', '--repo', TMP_REPO, commit_to, checkout_to])
    git_diff(checkout_from, checkout_to)


def diff_initrd(diff_from, diff_to):
    commit_from = diff_from.meta['ostree-commit']
    commit_to = diff_to.meta['ostree-commit']
    initrd_from = os.path.join(cache_dir("initrd"), diff_from.id)
    initrd_to = os.path.join(cache_dir("initrd"), diff_to.id)

    def get_initrd_path(commit):
        ls = runcmd(['ostree', 'ls', '--repo', TMP_REPO, commit, "/usr/lib/modules",
                     "--nul-filenames-only"], capture_output=True).stdout
        entries = [entry.decode('utf-8') for entry in ls.strip(b'\0').split(b'\0')]
        assert len(entries) == 2  # there should only be the modules/ dir and the kver dir
        return os.path.join(entries[1], "initramfs.img")

    def extract_initrd(commit, dir):
        ostree_path = get_initrd_path(commit)
        cat = subprocess.Popen(['ostree', 'cat', '--repo', TMP_REPO, commit, ostree_path], stdout=subprocess.PIPE)
        runcmd(['coreos-installer', 'dev', 'extract', 'initrd', '-', '-C', dir], stdin=cat.stdout)
        cat.wait()

    if not os.path.exists(initrd_from):
        extract_initrd(commit_from, initrd_from)
    if not os.path.exists(initrd_to):
        extract_initrd(commit_to, initrd_to)
    git_diff(initrd_from, initrd_to)


def diff_live_iso_tree(diff_from, diff_to):
    iso_from = os.path.join(diff_from.dir, diff_from.meta['images']['live-iso']['path'])
    iso_to = os.path.join(diff_to.dir, diff_to.meta['images']['live-iso']['path'])
    diff_cmd_outputs(['coreos-installer', 'dev', 'show', 'iso'], iso_from, iso_to)
    diff_cmd_outputs(['isoinfo', '-R', '-l', '-i'], iso_from, iso_to)


def diff_live_iso(diff_from, diff_to):
    iso_from = os.path.join(diff_from.dir, diff_from.meta['images']['live-iso']['path'])
    iso_to = os.path.join(diff_to.dir, diff_to.meta['images']['live-iso']['path'])
    dir_from = os.path.join(cache_dir("iso"), diff_from.id)
    dir_to = os.path.join(cache_dir("iso"), diff_to.id)

    def extract_iso(iso, dir):
        iso = os.path.abspath(iso)
        os.mkdir(dir)
        runcmd(['bsdtar', 'xpf', iso], cwd=dir)

    if not os.path.exists(dir_from):
        extract_iso(iso_from, dir_from)
    if not os.path.exists(dir_to):
        extract_iso(iso_to, dir_to)
    git_diff(dir_from, dir_to)


def diff_live_initrd_tree(diff_from, diff_to):
    initramfs_from = os.path.join(diff_from.dir, diff_from.meta['images']['live-initramfs']['path'])
    initramfs_to = os.path.join(diff_to.dir, diff_to.meta['images']['live-initramfs']['path'])
    diff_cmd_outputs(['coreos-installer', 'dev', 'show', 'initrd'], initramfs_from, initramfs_to)


def diff_live_initrd(diff_from, diff_to):
    initramfs_from = os.path.join(diff_from.dir, diff_from.meta['images']['live-initramfs']['path'])
    initramfs_to = os.path.join(diff_to.dir, diff_to.meta['images']['live-initramfs']['path'])
    dir_from = os.path.join(cache_dir("live-initrd"), diff_from.id)
    dir_to = os.path.join(cache_dir("live-initrd"), diff_to.id)

    if not os.path.exists(dir_from):
        runcmd(['coreos-installer', 'dev', 'extract', 'initrd', initramfs_from, '-C', dir_from])
    if not os.path.exists(dir_to):
        runcmd(['coreos-installer', 'dev', 'extract', 'initrd', initramfs_to, '-C', dir_to])
    git_diff(dir_from, dir_to)


def diff_live_rootfs_img_tree(diff_from, diff_to):
    rootfs_from = os.path.join(diff_from.dir, diff_from.meta['images']['live-rootfs']['path'])
    rootfs_to = os.path.join(diff_to.dir, diff_to.meta['images']['live-rootfs']['path'])
    diff_cmd_outputs(['coreos-installer', 'dev', 'show', 'initrd'], rootfs_from, rootfs_to)


def ensure_extracted_rootfses(diff_from, diff_to):
    rootfs_from = os.path.join(diff_from.dir, diff_from.meta['images']['live-rootfs']['path'])
    rootfs_to = os.path.join(diff_to.dir, diff_to.meta['images']['live-rootfs']['path'])
    dir_from = os.path.join(cache_dir("live-rootfs"), diff_from.id)
    dir_to = os.path.join(cache_dir("live-rootfs"), diff_to.id)

    def extract_rootfs(img, dir):
        runcmd(['coreos-installer', 'dev', 'extract', 'initrd', img, '-C', dir])

    if not os.path.exists(dir_from):
        extract_rootfs(rootfs_from, dir_from)
    if not os.path.exists(dir_to):
        extract_rootfs(rootfs_to, dir_to)

    return (dir_from, dir_to)


def diff_live_rootfs_img(diff_from, diff_to):
    (dir_from, dir_to) = ensure_extracted_rootfses(diff_from, diff_to)
    git_diff(dir_from, dir_to)


def extract_live_sysroot_img(diff_from, diff_to):
    (rootfs_dir_from, rootfs_dir_to) = ensure_extracted_rootfses(diff_from, diff_to)

    def get_sysroot_img(dir):
        for fstype in ["erofs", "squashfs"]:
            img = os.path.join(dir, f"root.{fstype}")
            if os.path.exists(img):
                return img
        raise Exception(f"Cannot find root.[squash|ero]fs in {dir}")

    def run_unpack_sysroot_img(img, dest):
        if img.endswith(".squashfs"):
            runcmd(['unsquashfs', '-d', dest, '-no-xattrs', '-excludes', img, '/ostree/deploy', '/ostree/repo/objects'])
        else:
            runcmd(['fsck.erofs', f'--extract={dest}', '--no-xattrs', img])
            runcmd(['sudo', 'rm', '-r', '-f', os.path.join(dest, "ostree/deploy")], quiet=True)
            runcmd(['sudo', 'rm', '-r', '-f', os.path.join(dest, "ostree/repo/objects")], quiet=True)

    fs_from = get_sysroot_img(rootfs_dir_from)
    fs_to = get_sysroot_img(rootfs_dir_to)

    dir_from = os.path.join(cache_dir("live-sysroot-img"), diff_from.id)
    dir_to = os.path.join(cache_dir("live-sysroot-img"), diff_to.id)

    if not os.path.exists(dir_from):
        run_unpack_sysroot_img(fs_from, dir_from)
    if not os.path.exists(dir_to):
        run_unpack_sysroot_img(fs_to, dir_to)

    return (dir_from, dir_to)


def diff_live_sysroot_tree(diff_from, diff_to):
    (dir_from, dir_to) = extract_live_sysroot_img(diff_from, diff_to)
    diff_cmd_outputs(['find', '{}', '-printf', "%P\n"], dir_from, dir_to)


def diff_live_sysroot(diff_from, diff_to):
    (dir_from, dir_to) = extract_live_sysroot_img(diff_from, diff_to)
    git_diff(dir_from, dir_to)


def get_metal_path(build_target):
    metal_file = build_target.meta.get('images', {}).get('metal')

    if not metal_file:
        raise Exception(f"Could not find metal image for build {build_target.id}")
    return os.path.join(build_target.dir, metal_file['path'])


def diff_metal_partitions(diff_from, diff_to):
    metal_from = get_metal_path(diff_from)
    metal_to = get_metal_path(diff_to)
    diff_cmd_outputs(['sgdisk', '-p'], metal_from, metal_to)


def run_guestfs_mount(image_path, mount_target):
    """This function runs in a background thread."""
    g = None
    try:
        g = guestfs.GuestFS(python_return_dict=True)
        g.set_backend("direct")
        g.add_drive_opts(image_path, readonly=1)
        g.launch()

        # Mount the disks in the guestfs VM
        root = g.findfs_label("root")
        g.mount_ro(root, "/")
        boot = g.findfs_label("boot")
        g.mount_ro(boot, "/boot")
        efi = g.findfs_label("EFI-SYSTEM")
        g.mount_ro(efi, "/boot/efi")

        # This is a blocking call that runs the FUSE server
        g.mount_local(mount_target)
        g.mount_local_run()

    except Exception as e:
        print(f"Error in guestfs process for {image_path}: {e}", file=sys.stderr)
    finally:
        if g:
            g.close()


def diff_metal(diff_from, diff_to):
    metal_from = get_metal_path(diff_from)
    metal_to = get_metal_path(diff_to)

    mount_dir_from = os.path.join(cache_dir("metal"), diff_from.id)
    mount_dir_to = os.path.join(cache_dir("metal"), diff_to.id)

    for d in [mount_dir_from, mount_dir_to]:
        if os.path.exists(d):
            shutil.rmtree(d)
        os.makedirs(d)

    # As the libreguest mount call is blocking until unmounted, let's
    # do that in a separate thread
    p_from = Process(target=run_guestfs_mount, args=(metal_from, mount_dir_from))
    p_to = Process(target=run_guestfs_mount, args=(metal_to, mount_dir_to))

    try:
        p_from.start()
        p_to.start()
        # Wait for the FUSE mounts to be ready. We'll check for a known file.
        for i, d in enumerate([mount_dir_from, mount_dir_to]):
            p = p_from if i == 0 else p_to
            timeout = 60  # seconds
            start_time = time.time()
            check_file = os.path.join(d, 'ostree')
            while not os.path.exists(check_file):
                time.sleep(1)
                if time.time() - start_time > timeout:
                    raise Exception(f"Timeout waiting for mount in {d}")
                if not p.is_alive():
                    raise Exception(f"A guestfs process for {os.path.basename(d)} died unexpectedly.")

        # Now that the mounts are live, we can diff them
        git_diff(mount_dir_from, mount_dir_to)

    finally:
        # Unmount the FUSE binds, this will make the guestfs mount calls return
        runcmd(['fusermount', '-u', mount_dir_from], check=False)
        runcmd(['fusermount', '-u', mount_dir_to], check=False)

        # Ensure the background processes are terminated
        def shutdown_process(process):
            process.join(timeout=5)
            if process.is_alive():
                process.terminate()
                process.join()

        shutdown_process(p_from)
        shutdown_process(p_to)


def diff_cmd_outputs(cmd, file_from, file_to):
    with tempfile.NamedTemporaryFile(prefix=cmd[0] + '-') as f_from, \
         tempfile.NamedTemporaryFile(prefix=cmd[0] + '-') as f_to:
        if '{}' not in cmd:
            cmd += ['{}']
        idx = cmd.index('{}')
        cmd_from = list(cmd)
        cmd_from[idx] = file_from
        subprocess.run(cmd_from, check=True, stdout=f_from).stdout
        cmd_to = list(cmd)
        cmd_to[idx] = file_to
        subprocess.run(cmd_to, check=True, stdout=f_to).stdout
        git_diff(f_from.name, f_to.name)


def git_diff(arg_from, arg_to):
    runcmd(['git', 'diff', '--no-index', arg_from, arg_to], check=False)


def cache_dir(dir):
    dir = os.path.join(DIFF_CACHE, dir)
    os.makedirs(dir, exist_ok=True)
    return dir


# unfortunately, this has to come at the end to resolve functions
DIFFERS = [
    Differ("rpms", "Diff RPMs", needs_ostree=OSTreeImport.PARTIAL, function=diff_rpms),
    Differ("source-control", "Diff config and COSA input commits",
           needs_ostree=OSTreeImport.NO, function=diff_source_control),
    Differ("ostree-ls", "Diff OSTree contents using 'ostree diff'",
           needs_ostree=OSTreeImport.FULL, function=diff_ostree_ls),
    Differ("ostree", "Diff OSTree contents using 'git diff'",
           needs_ostree=OSTreeImport.FULL, function=diff_ostree),
    Differ("initrd", "Diff initramfs contents",
           needs_ostree=OSTreeImport.FULL, function=diff_initrd),
    Differ("live-iso-ls", "Diff live ISO listings",
           needs_ostree=OSTreeImport.NO, function=diff_live_iso_tree),
    Differ("live-iso", "Diff live ISO content",
           needs_ostree=OSTreeImport.NO, function=diff_live_iso),
    Differ("live-initrd-ls", "Diff live initramfs listings",
           needs_ostree=OSTreeImport.NO, function=diff_live_initrd_tree),
    Differ("live-initrd", "Diff live initramfs content",
           needs_ostree=OSTreeImport.NO, function=diff_live_initrd),
    Differ("live-rootfs-img-ls", "Diff live-rootfs.img listings",
           needs_ostree=OSTreeImport.NO, function=diff_live_rootfs_img_tree),
    Differ("live-rootfs-img", "Diff live-rootfs.img content",
           needs_ostree=OSTreeImport.NO, function=diff_live_rootfs_img),
    Differ("live-sysroot-ls", "Diff live '/root.[erofs|squash]fs' (embed into live-rootfs) listings",
           needs_ostree=OSTreeImport.NO, function=diff_live_sysroot_tree),
    Differ("live-sysroot", "Diff live '/root.[ero|squash]fs' (embed into live-rootfs) content",
           needs_ostree=OSTreeImport.NO, function=diff_live_sysroot),
    Differ("metal-part-table", "Diff metal disk image partition tables",
           needs_ostree=OSTreeImport.NO, function=diff_metal_partitions),
    Differ("metal", "Diff metal disk image content",
           needs_ostree=OSTreeImport.NO, function=diff_metal),
]

if __name__ == '__main__':
    main()
