#!/usr/bin/python3 -u
# An operation that mutates a build by generating an OpenStack image.

import os
import sys
import json
import yaml
import shutil
import argparse

sys.path.insert(0, '/usr/lib/coreos-assembler')
from cmdlib import run_verbose, write_json, sha256sum_file

# Parse args and dispatch
parser = argparse.ArgumentParser()
parser.add_argument("--build", help="Build ID")
args = parser.parse_args()

# default to latest build if not specified
if not args.build:
    with open('builds/builds.json') as f:
        j = json.load(f)
        args.build = j['builds'][0]

print(f"Targeting build: {args.build}")

with open('src/config/manifest.yaml') as f:
    manifest = yaml.safe_load(f)

base_name = manifest['rojig']['name']
img_prefix = f'{base_name}-{args.build}'
openstack_name = f'{img_prefix}-openstack.qcow2'

builddir = os.path.join('builds', args.build)
buildmeta_path = os.path.join(builddir, 'meta.json')
with open(buildmeta_path) as f:
    buildmeta = json.load(f)

tmpdir = 'tmp/buildpost-openstack'
if os.path.isdir(tmpdir):
    shutil.rmtree(tmpdir)
os.mkdir(tmpdir)


def generate_openstack():
    buildmeta_images = buildmeta['images']
    img_qemu = os.path.join(builddir, buildmeta_images['qemu']['path'])
    tmp_img_openstack = os.path.join(tmpdir, openstack_name)
    run_verbose(['/usr/lib/coreos-assembler/gf-oemid',
                 img_qemu, tmp_img_openstack, 'openstack'])
    checksum = sha256sum_file(tmp_img_openstack)
    buildmeta_images['openstack'] = {
        'path': openstack_name,
        'sha256': checksum
    }
    os.rename(tmp_img_openstack, f"{builddir}/{openstack_name}")
    write_json(buildmeta_path, buildmeta)
    print(f"Updated: {buildmeta_path}")


# Do it!
generate_openstack()
