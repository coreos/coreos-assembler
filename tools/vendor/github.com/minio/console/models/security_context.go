// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2021 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityContext security context
//
// swagger:model securityContext
type SecurityContext struct {

	// fs group
	// Required: true
	FsGroup *string `json:"fsGroup"`

	// run as group
	// Required: true
	RunAsGroup *string `json:"runAsGroup"`

	// run as non root
	// Required: true
	RunAsNonRoot *bool `json:"runAsNonRoot"`

	// run as user
	// Required: true
	RunAsUser *string `json:"runAsUser"`
}

// Validate validates this security context
func (m *SecurityContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFsGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsNonRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityContext) validateFsGroup(formats strfmt.Registry) error {

	if err := validate.Required("fsGroup", "body", m.FsGroup); err != nil {
		return err
	}

	return nil
}

func (m *SecurityContext) validateRunAsGroup(formats strfmt.Registry) error {

	if err := validate.Required("runAsGroup", "body", m.RunAsGroup); err != nil {
		return err
	}

	return nil
}

func (m *SecurityContext) validateRunAsNonRoot(formats strfmt.Registry) error {

	if err := validate.Required("runAsNonRoot", "body", m.RunAsNonRoot); err != nil {
		return err
	}

	return nil
}

func (m *SecurityContext) validateRunAsUser(formats strfmt.Registry) error {

	if err := validate.Required("runAsUser", "body", m.RunAsUser); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security context based on context it is used
func (m *SecurityContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityContext) UnmarshalBinary(b []byte) error {
	var res SecurityContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
