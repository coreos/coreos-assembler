package main

import (
	"fmt"
	"os"
	"time"

	jobspec "github.com/coreos/gangplank/spec"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

// generateFileName is a file handle where the generate JobSpec
// will be written to with generateCommand
var generateFileName string

// generateCommand creates a jobspec and dumps it.
var generateCommand = &cobra.Command{
	Use:   "generate",
	Short: "generate jobspec from CLI args",
	Run: func(*cobra.Command, []string) {
		var out *os.File = os.Stdout
		if generateFileName != "" {
			f, err := os.OpenFile(generateFileName, os.O_CREATE|os.O_WRONLY, 0755)
			if err != nil {
				log.WithError(err).Fatalf("unable to open %s for writing", generateFileName)
			}
			defer f.Close()
			out = f
		}
		generateJobSpec()
		now := time.Now().Format(time.RFC3339)
		if _, err := out.Write([]byte("# Generated by Gangplank CLI\n# " + now + "\n")); err != nil {
			log.WithError(err).Fatalf("Failed to write header to file")
		}
		if err := spec.WriteYAML(out); err != nil {
			log.WithError(err).Fatal("Faield to write Gangplank YAML")
		}
	},
}

func init() {
	cmdRoot.PersistentFlags().StringSliceVarP(&automaticBuildStages, "build-artifact", "A", []string{},
		fmt.Sprintf("build artifact for any of: %v", jobspec.GetArtifactShortHandNames()))

	cmdRoot.AddCommand(generateCommand)
	generateCommand.Flags().StringVar(&generateFileName, "json-out", "", "write JSON to file")
}

// generateJobSpec creates a jobspec from the commandline.
func generateJobSpec() {
	if specFile != "" {
		js, err := jobspec.JobSpecFromFile(specFile)
		if err != nil {
			log.WithError(err).Fatal("failed to  read jobspec")
		}
		spec = js
	}
	spec.GenerateStages(automaticBuildStages)
}
